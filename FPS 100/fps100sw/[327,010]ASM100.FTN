C+++    MAIN
C****** ASM100 = AP ASSEMBLY LANGUAGE PROGRAM = REL.  1.00 , 09/01/79
C
C****** ASM100 = ASM100 MAINLINE = REL.  1.00 , 09/01/79
C
C
        INTEGER LINSAV,FIRST,IFLG
C
C--------------------------------------------------
C
C       ALL PARTS OF THE PROGRAM WHICH DO FILE MAINTAINENCE
C       ARE SURROUNDED THUSLY WITH "*****"
C
C---------------------------------------------------
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
C
C       EXPLANATION OF COMMON SYMBOLS'
C       OPSYM(8,300)  SYMBOL TABLE, FIRST THREE WORDS ARE CHARACTERS
C               OF MNEMONIC, NEXT FOUR ARE BIT VALUES,
C               LAST WORD IS COMBINATION OF ARGUMENT FOR PROCESSING
C               TYPE AND MASK TYPE
C       USRSYM  USER SYMBOL TABLE, FIRST THREE WORDS ARE CHARACTERS
C               LAST WORD IS VALUE
C       SYM(3)  WORDS A PACKED SYMBOL IS RETURNED IN FROM GSYM
C       CODE(4)  THE MACHINE CODE WORD BEING BUILT FROM LINE
C       CODMSK(4)  THE BITS CURRENTLY MARKED IN CODE(4)
C       MASKTB  MASK TABLE
C       ISBT  WORD CONTAINING SIGN BIT ONLY
C       LIN(100) ARRAY CONTAINING CURRENT LINE IN COMPACT FORM
C               ONE CHAR PER MACHINE WORD, RIGHT ADJUSTED
C       NXC  NEXT CHAR POINTER IN LIN ARRAY
C       IBRF  CONTAINS INDEX VALUE TO BREAK TABLE FOR TESTING TYPE
C       ALFLG  SUCCESS OR FAIL FLAG FROM GSYM ROUTINE
C       GVLFLG  RETURN -1 IF GVAL FAILS, 0 IF SUCCESSFUL
C       IARG  GSYM RETURNS PROCESSING TYPE HERE
C       MSKTYP  GSYM RETURNS MASK TYPE HERE
C       TABPTR  RETURN INDEX TO SYSTEM SYMBOL TABLE, GSYM
C       IVAL  GVAL ET AL RETURN VALUE OF EXPRESSION, SYMBOL HERE
C       IOLIN  ARRAY CONTAINING SINGLE OUTPUT LINE
C       MCPTR  POINTER TO CURRENT NEXT WORD OF MACHINE CODE
C       LSTING  IF 0, NO LISTING OF INPUT LINES THIS PASS
C             IF 1, LIST INPUT LINES THIS PASS
C       LSTFLG  USER LISTING FLAG, 0--NO LISTING
C                       1--LISTING
C       GLNFLG  FLAG FROM GLIN, -1 EOF OCCURRED, 0 SEMICOLON
C               NOT LAST CHARACTER IN LINE, 1 SEMICOLON WAS LAST CHARACTER
C               SEEN IN LINE.
C       CHARS(37)  ARRAY CONTAINING SYSTEM INTERNAL CHAR VALUES
C               RIGHT HALF OF WORD
C       BLANK  WORD CONTAINING TWO BLANK CHARS
C       ERRTOT  NUMBER OF ERRORS ACCUMULATED
C       ERNUMS IS ARRAY CONTAINING NUMERIC VALUE OF ACCUMULATED ERRORS
C               FOR A LINE BEING ASSEMBLED
C       ERRCNT, CONTAINS THE NUMBER OF ERRORS, IF 0, NO ERRORS FOR LINE
C       IORDF, ORDER FLAG FOR SUCCESSIVE PSEUDO-OPS (BLOCK TYPES)
C
C
C
C
C       GO INITIALIZE THINGS
        FIRST=0
        INSFLG = 0
        LINNUM = 0
        PAGES = 0
        INSFG2 = 2
1       CONTINUE
        CALL APALI(FIRST)
C
        LINSAV = LINNUM
        NRADIX = 8
C
C       GO DO PASS ONE
        CALL PASS1(IFLG)
        IF (IFLG .NE. 0) GOTO 7000
C
        LINNUM = LINSAV
        NRADIX = 8
        IOPTR = 0
        CALL PASS2
        GOTO 1
C
C       CONTROL COMES HERE TO FINISH UP, CLOSE ALL FILES
C
7000    CONTINUE
        WRITE (ITTO,7001)
7001    FORMAT (1X,'ASSEMBLY COMPLETED')
C
C       MAP LOGICAL UNIT NUMBERS IF NECESSARY.
C
        SLUN = SLUN - 7
        OLUN = OLUN - 7
        LLUN = LLUN - 7
        TLUN = TLUN - 7
        ID = INFILE (4,SFILE,SLUN)
        ID = INFILE (4,BFILE,OLUN)
        ID = INFILE (4,LFILE,LLUN)
C
C       DELETE TEMPORARY FILE
C
        ID = INFILE (5,TFILE,TLUN)
        STOP
        END
C+++    APALI
C****** APALI = APAL INITIALIZE = REL.  1.00 , 09/01/79
C
        SUBROUTINE APALI(FIRST)
        INTEGER FIRST
C
C       HERE WE INITIALIZE THE ASSEMBLER (APAL)
C
        INTEGER J,I,ICODE,IL,YESANS,NOANS
        INTEGER INFILE
C
        INTEGER EXPRMX,EXPRTB
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
        COMMON /EXPRST/ EXPRMX,EXPRTB(12,3)
C
        DATA YESANS,NOANS /2HY , 2HN /
C
C
C       BLANK OUT IOLIN
C
        DO 50 I=1,100
        DO 45 J=1,10
        IOLIN(I,J) = BLANK
45      CONTINUE
50      CONTINUE
C
        IF (FIRST.NE.0) GO TO 1800
C                                                          C
C                                                          C
C                                                          C
C       THESE THREE ENTRIES IN "CHARS" ARE SPECIAL, AS     C
C        THEY CANNOT BE SET WITH A '1H'                    C
C                                                          C
C       LOCATION   CHARACTER           CODE                C
C     CHARS(3)     CARRIAGE RETURN     1                   C
C     CHARS(36)    END OF FILE         2                   C
C      CHARS(2)    TAB                 3                   C
C                                                          C
C                                                          C
C       THE CODES FOR CARRIAGE RETURN AND END OF FILE ARE  C
C         ARBITRARY IN THAT THEY ARE ONLY USED INTERNALLY  C
C         AND NOT USED FOR ACTUAL I/O                      C
C       HOWEVER !!!!!!!!   THEY MUST BE UNIQUE FROM THE    C
C       CHARACTER CODES USED FOR THE VARIOUS 64 PRINTING   C
C         CHARACTERS                                       C
C                                                          C
C       IF TABS ARE TO BE USED, HOWEVER, THE CODE MUST     C
C         CORRESPOND TO THAT ACTUALLY USED BY THE CHARACTERC
C         SET EMPLOYED                                     C
C                                                          C
        CHARS(3)=1
        CHARS(36)=2
        CHARS(2)=8201
        FIRST=1
C                                                          C
C       HERE WE OPEN INPUT AND OUTPUT FILES:               C
C                                                          C
C       SLUN - INPUT SOURCE TEXT FILE                       C
C       TLUN - SCRATCH FILE ON WHICH TO SAVE INPUT SOURCE   C
C       OLUN - OUTPUT FILE FOR BINARY OUTPUT TEXT           C
C       LLUN - OUTPUT FILE FOR ASSEMBLY LISTING             C
C         AND ERROR MESSAGES                               C
C       ITTI - FILE FOR CONSOLE INPUT                      C
C       ITTO - FILE FOR CONSOLE OUTPUT                     C
C                                                          C
C
C       HERE WE SET CHANNEL NUMBERS FOR CONSOLE INPUT / OUTPUT
C
        ITTI = 5
        ITTO = 5
C                                                          C
C
C       APAL NEEDS A SCRATCH FILE ON WHICH TO SAVE THE INPUT TEXT READ
C         IN DURING PASS ONE.  THIS IS DONE SO THAT NON-REWINDABLE
C         I/O DEVICES, SUCH AS CARD READERS, MAKE BE USED TO ASSEMBLE
C         FROM
C
C       NOW WE GET FILE NAMES FOR THE SOURCE FILE, BINARY OUTPUT FILE,
C         AND LISTING AND ERROR FILE
C       THIS IS DONE WITH CALLS TO "INFILE", WHICH ACCEPTS A NAME TYPED
C         IN FROM THE USER CONSOLE (ITTI) AND THEN GETS THE DESIRED FILE
C         FROM THE SYSTEM
C
        SLUN=1
        TLUN=2
        OLUN=3
        LLUN=4
        ICODE = 0
C
C       PUT OUT A GREETING TO THE TERMINAL
C
        WRITE (ITTO,800)
800     FORMAT (1X,'ASM100 REL.  1.00 , 09/01/79')
C
C       ASSIGN TEMP FILE
C
        IL = INFILE (7,TFILE,TLUN)
C
C
C       GET THE SOURCE FILE
C
850     CONTINUE
        WRITE (ITTO,900)
900     FORMAT  (1X, 12HSOURCE FILE=)
        READ(ITTI,925) (SFILE(I),I=1,30)
925     FORMAT (30A1)
        CALL LENGTH (SFILE)
        IL = INFILE (1,SFILE,SLUN)
        IF (IL .NE. 0) GOTO 850
C
C       GET THE BINARY OUTPUT FILE
C
950     CONTINUE
        WRITE(ITTO,975)
975     FORMAT (1X, 12HOBJECT FILE=)
        READ(ITTI,925) (BFILE(I),I=1,30)
        CALL LENGTH (BFILE)
        IL = INFILE (2,BFILE,OLUN)
        IF (IL .NE. 0) GOTO 950
C
C       GET THE LISTING AND ERROR FILE
C
1000    CONTINUE
        WRITE (ITTO,1100)
1100    FORMAT (1X, 20HLIST AND ERROR FILE=)
        READ(ITTI,925) (LFILE(I),I=1,30)
        CALL LENGTH (LFILE)
        IL = INFILE (2,LFILE,LLUN)
        IF (IL .NE. 0) GOTO 1000
C
C       MAP LOGICAL UNIT NUMBERS HERE IF NECESSARY.
C
        SLUN = SLUN + 7
        OLUN = OLUN + 7
        LLUN = LLUN + 7
        TLUN = TLUN + 7
C
C       ASK THE USER IF HE WANTS A LISTING
C
        LSTFLG = -1
1200    WRITE(ITTO,1300)
1300    FORMAT (1X, 14HLISTING? (Y/N))
        READ(ITTI,925) (FIELD(I),I=1,30)
        IF (FIELD(1) .EQ. YESANS) LSTFLG = 1
        IF (FIELD(1) .EQ. NOANS) LSTFLG = 0
        IF (LSTFLG .EQ. 1) GOTO 1400
        IF (LSTFLG .EQ. 0) GOTO 1800
        WRITE (ITTO,1700)
        GOTO 1200
C
C       ASK THE USER WHAT LISTING RADIX TO USE
C
1400    WRITE(ITTO,1500)
1500    FORMAT (1X, 23HLISTING RADIX (8,10,16))
        READ(ITTI,1600) IRADIX
1600    FORMAT (I2)
        IF (IRADIX .EQ. 8) GOTO 1800
        IF (IRADIX .EQ. 10) GOTO 1800
        IF (IRADIX .EQ. 16) GOTO 1800
        WRITE (ITTO,1700)
1700    FORMAT (1X, 3H???)
        GOTO 1400
C
1800    IPASS=1
C
C       REWIND TEMPORARY FILE - MAP TLUN IF NECESSARY
C
        TLUN = TLUN - 7
        IL = INFILE (6,TFILE,TLUN)
        TLUN = TLUN + 7
C
C
C       INITIALIZE SOME CONSTANTS
C
        ISUSYM=1
C
C
C       NUSYM  --  NUMBER OF USER DEFINED SYMBOLS
        NUSYM=0
C       NOPSYM  --  NUMBER OF OP-CODE SYMBOLS
        NOPSYM=231
C       IORDF  --  ORDER FLAG:  0 AT START, 1 AFTER TITLE SEEN,
C                        2 AFTER ANY CODE SEEN
        IORDF=0
C       LOC  --  LOCATION COUNTER; INCREMENTED BEFORE EACH LOCATION
        LOCNT=-1
C       LSTING  --  LISTING THIS PASS FLAG:  PASS #1, SET TO 0,  PASS #2
C                        SET TO LSTFLG
        LSTING=0
C       ERRCNT  --  # ERRORS IN THIS LINE
        ERRCNT=0
C       ERRTOT  --  TOTAL # OF ERRORS
        ERRTOT=0
C       IPTR  --  POINTER TO NEXT GOOD CHARACTER IN INPUT LINE
        IPTR=1
C       IPTRX  --  POINTER TO LAST GOOD CHARACTER IN INPUT LINE
        IPTRX=0
C       FLDFLG  --  FLAG WHICH IF 0 INDICATES TO READ FROM 'LIN'
C                   IF 1 READ FROM 'FIELD'.
        FLDFLG = 0
C
C
C       SOME MISCELLANEOUS CONSTANTS
        IDPXX(1)=16384
        IDPXX(2)=-32767-1
        IDPXX(3)=-16384
        OPSYM(5,121)=-32767-1
        OPSYM(5,123)=-32767-1
        OPSYM(5,125)=-32767-1
        ISBT=-32767-1
        OPSYM(5,219)= IOR16 (OPSYM(5,219),ISBT)
        OPSYM(5,220)= IOR16 (OPSYM(5,220),ISBT)
C
C
        RETURN
C
C
C
C       NOTE:
C
C       1. IF THE USER WISHES TO OPERATE APAL IN A "BATCH" MODE THEN HE
C         MAY REMOVE THE DIALOGUE FROM ABOVE AND REPLACE THE CALLS TO
C         "INFILE" WITH SIMPLE ASSIGNMENT STATEMENTS WHICH SET "SLUN",
C         "TLUN","LLUN", AND "OLUN"
C
C
C       FOR EXAMPLE
C
C       SLUN = # OF CARD READER
C       TLUN = # OF A TAPE DRIVE
C       OLUN = # OF ANOTHER TAPE DRIVE
C       LLUN = # OF THE LINE PRINTER
C
C       IN THIS CASE, THE CALL TO "SETTY" WOULD BE REMOVED AS REDUNDENT
C
C
C
C       2. IF ASSEMBLIES ARE BEING DONE OFF OF A "REWINDABLE" I/O
C         DEVICE, THEN THE SCRATCH FILE MENTIONED ABOVE NEED NOT BE USED
C
C       TWO CHANGES NEED BE MADE:
C         1. SET "TLUN" EQUAL TO "SLUN"
C         2. SET "IPASS TO 2 INSTEAD OF 1
C              (IPASS IS ONLY USED TO INDICATE WHETHER WE USE THE
C              "INPUT" OR "SCRATCH" FILES TO READ FROM
C
C
C
        END
C+++    PASS1
C****** PASS1 = 1ST PASS OF ASSEMBLY = REL.  1.00 , 09/01/79
C
        SUBROUTINE PASS1(RETFLG)
C
        INTEGER INDX,I,J,K,L,M,RETFLG,TTY(2),INDX1
        INTEGER IFFLG,BOXFLG,ID,LINFLG,SLUNSV,LINSV,EXTPTR
        INTEGER COMCNT,IBUF(3),ITYPE,OLDTYP,ELMCNT,COMPTR
        INTEGER IBRFSV,NXCSV,BLKCMN(3),LOCCMN(3),SI,SR,SIP,SOP
        INTEGER X,ARRAY1(6),ARRAY2(6),VAL1,VAL2,INSFIL(31)
        INTEGER SM,SS,ST
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
        DATA TTY(1),TTY(2)/2HTT,  2HY /
C
        DATA BLKCMN(1),BLKCMN(2),BLKCMN(3)/2H.B, 2HLA, 2HNK/
        DATA LOCCMN(1),LOCCMN(2),LOCCMN(3)/2H.L, 2HOC, 2HAL/
        DATA SI,SR,SIP,SOP/2HI , 2HR , 2HIP, 2HOP/
        DATA SM,SS,ST/2HM , 2HS , 2HT /
C
C       BEGIN PASS ONE
C
C       INCREMENT TO NEXT LOCATION
C       LABFLG FLAG, 0 NO LABEL THIS LINE
C               -1, NEW SYMBOL DEFINED AS LABEL, THIS LINE
C
        IFFLG = 0
        BOXFLG = 0
        LINFLG = 0
        GLNFLG = 0
        EXTNUM = 0
        COMCNT = 0
        RETFLG = 0
        LINES = 9999
C
C       GET A NEW LINE
C
100     CONTINUE
        IF (GLNFLG .EQ. 0) LOCNT = LOCNT + 1
110     LABFLG=0
111     CONTINUE
        CALL GLINE
        IF (BOXFLG .NE. 0) GOTO 1320
        IF (GLNFLG) 115,130,130
C
C------ EOF ENCOUNTERED
C
115     CONTINUE
        IF (INSFLG .EQ. 0) GOTO 120
        LINES = LINES + 1
        IF (LINES .GT. 54) CALL HEADER
        WRITE (LLUN,116)
116     FORMAT (1X, 12H END $INSERT)
        WRITE (TLUN,117)
117     FORMAT ( 1H[)
C
C       CLOSE INSERTED FILE, MAP LUN IF NECESSARY.
C
        SLUN = SLUN - 7
        ID = INFILE (4,INSFIL,SLUN)
        SLUN = SLUNSV
        LINNUM = LINSV
        INSFLG = 0
        GOTO 110
C
120     CONTINUE
        IF (LINFLG .EQ. 0) GOTO 225
        CALL ERRMES (23)
        GOTO 1000
225     CONTINUE
        RETFLG = 1
        GOTO 1000
C
130     CONTINUE
C
C       CAN THIS LINE BE ASSEMBLED?
C
        IF (IFFLG .NE. 0) GOTO 1250
C
C       GET FIRST SYMBOL.
C
        CALL GSYM
        LINFLG = 1
C       IS BREAK CHAR A COLON?
        IF (IBRF .NE. 16) GOTO 200
C
C       YES - COLON...
C       DID WE GET AN ALPHA-NUMERIC TOKEN FOR THE LABEL?
C
        IF(ALFLG) 155,160,160
155     CALL ERRMES (20)
        GOTO 2010
C       DEFINE SYMBOL WITH CURRENT LOC
C       FIRST, CHECK FOR CONFLICT WITH PREVIOUSLY DEFINED SYMBOL
160     CONTINUE
        IF (NUSYM .EQ. 0) GOTO 175
        CALL FUSYM
        IF (TABPTR .EQ. 0) GOTO 170
C       IF GET TO HERE, CURRENT SYMBOL ALREADY DEFINED
        CALL ERRMES (2)
        GOTO 2000
170     CONTINUE
175     CONTINUE
C       IF FALL THROUGH LOOP, DEFINE NEW SYMBOL WITH CURRENT LOC
        NUSYM=NUSYM+1
        IF (NUSYM .GT. USRMAX) GOTO 3000
        USRSYM(NUSYM,1)=SYM(1)
        USRSYM(NUSYM,2)=SYM(2)
        USRSYM(NUSYM,3)=SYM(3)
        USRSYM(NUSYM,4)=LOCNT
        USRSYM(NUSYM,5)=0
        LABFLG=-1
C       GET NEXT SYMBOL, PROCEED WITH SCAN
        CALL GSYM
C
C       IS THIS A LABEL ON A BLANK LINE?
C
        IF ((IBRF .EQ. 3) .AND. (ALFLG .EQ. -1)) GOTO 111
C
C       NO -CONTINUE
C
C       AND FALL INTO LOOKUP ROUTINE
C       CHECK IF PSEUDO OP. IS BREAK CHAR A $ ?
200     CONTINUE
        IF (IBRF .NE. 9) GOTO 500
C
C       CHECK IF PSEUDO OP IS PRECEEDED BY A TOKEN
C       POSSIBLY $EQU
C
        IF (ALFLG .GE. 0)  GOTO 520
C
C       EXTRACT PSEUDO OP NAME
C
        CALL GSYM
C
C       DID WE GET AN ALPHA-NUMERIC TOKEN?
C
        IF (ALFLG .GE. 0) GOTO 210
        CALL ERRMES (20)
        GOTO 2010
C
C       LOOK FOR PSEUDO OP IN PSEUDO OP TABLE.
C
210     CONTINUE
        INDX = 0
        DO 230 I=1,31
        DO 220 J=1,3
        IF (SYM(J) .NE. PSUSYM(J,I)) GOTO 230
220     CONTINUE
        INDX = I
        GOTO 240
230     CONTINUE
240     CONTINUE
C
C       GO DO IT!
C
C       TITLE,ENTRY,VAL,BAD EQU,LOC,FP,END,EXT,INSERT
C       IF,ENDIF,BOX,ENDBOX,LIB,ENDLIB,RADIX,PAGE,LIST,NOLIST
C       INTEGER,REAL,COMMON,DATA,COMIO,SUBR,PARAM,CALL,GLOBAL
C       TRIPLE(FPS100),TASK(FPS100),ISR(FPS100)
C
        GOTO (1500,245,100,540,250,100,1000,700,1100,1200,
     1  1260,1300,1310,1400,1450,1600,245,245,245,702,704,
     2  1700,245,4000,245,5000,6000,245,706,7000,8000),INDX
C
C       SYMBOL WAS NOT A PSEUDO OP
C
        GOTO 3010
C
C       PSEUDO OPS WHICH ARE NOT PROCESSED AND DO NOT REQUIRE
C       THE LOCATION COUNTER TO BE INCREMENTED COME HERE.
C
245     CONTINUE
        IF (GLNFLG .NE. 1) GOTO 110
        CALL GLINE
        GOTO 245
C
C------ $LOC
C
250     CONTINUE
        CALL GVAL(0,EXTPTR)
C       IF FAIL TO GET VALUE, SEND ERROR MESS
        IF(GVLFLG)270,260,260
260     LOCNT=IVAL
        IF (LABFLG .GE. 0) GOTO 110
        USRSYM(NUSYM,4)=LOCNT
        GOTO 110
C
C       BAD OR MISSING EXPRESSION
C
270     CALL ERRMES (9)
        GOTO 2010
C
C------ CHECK FOR = PSEUDO-OP, OR EQU
C
C       FIRST ELIMINATE ALL WITH BREAK CHAR OTHER THAN EQUAL '='
500     CONTINUE
        IF(IBRF-10)100,520,100
C       STORE FIRST SYMBOL
520     IBUF(1)=SYM(1)
        IBUF(2)=SYM(2)
        IBUF(3)=SYM(3)
C
C       DETERMINE WHETHER = OR $EQU
C
        IF (IBRF .EQ. 10) GOTO 540
        IF (IBRF .NE. 9) GOTO 100
C
C       $EQU PSEUDO OP
C
        CALL GSYM
        IF (ALFLG) 100,530,530
C       MAKE SURE ITS EQU
530     CONTINUE
        IF (SYM(1) .NE. PSUSYM(1,4)) GOTO 3030
        IF (SYM(2) .NE. PSUSYM(2,4)) GOTO 3030
        IF (SYM(3) .NE. PSUSYM(3,4)) GOTO 3030
        IF (IBRF .NE. 0) NXC = NXC - 1
C
C       MAKE SURE IT IS NOT DB =
C
540     CONTINUE
        IF (IBUF(1) .EQ. OPSYM(1,196)) GOTO 100
C       CHECK FOR CONFLICT WITH PREVIOUSLY DEFINED SYMBOL
        IF (NUSYM .EQ. 0) GOTO 555
        DO 550 I=1,NUSYM
        IF (USRSYM(I,1).NE.IBUF(1))GOTO 550
        IF (USRSYM(I,2).NE.IBUF(2)) GOTO 550
        IF (USRSYM(I,3).NE.IBUF(3)) GOTO 550
C       IF GET TO HERE, CURRENT SYMBOL ALREADY DEFINED
        CALL ERRMES (2)
        GOTO 2010
550     CONTINUE
555     CONTINUE
        CALL GVAL (1,EXTPTR)
        NUSYM=NUSYM+1
        IF (NUSYM .GT. USRMAX) GOTO 3000
        USRSYM(NUSYM,1)=IBUF(1)
        USRSYM(NUSYM,2)=IBUF(2)
        USRSYM(NUSYM,3)=IBUF(3)
        USRSYM(NUSYM,5)=0
        ID = NUSYM
C       CHECK FOR BAD VALUE, IF BAD, SEND MESSAGE
        IF(GVLFLG)580,560,560
560     USRSYM(ID,4)=IVAL
C
C       INSERT SYMBOL INTO USRSYM TABLE, SET USRSYM(NUSYM,4) TO VALUE DERIVED
C       FROM THE EXPRESSION, AND USRSYM(NUSYM,5) TO ZERO UNLESS AN EXTERNAL
C       WAS ENCOUNTERED IN WHICH CASE SET USRSYM(NUSYM,5) TO THE VALUE OF
C       USRSYM(EXTPTR,5) FOR THE EXTERNAL VARIABLE, TO FLAG THE NEW VARIABLE
C       AS HAVING AN EXTERNAL REFERENCE FOR ITS VALUE.
C
        IF (EXTPTR .NE. 0) USRSYM(ID,5) = USRSYM(IAND16 (EXTPTR,4095),
     1  5)
C
        GOTO 110
C       VALUE EXPRESSION ILLEGAL
580     USRSYM(NUSYM,4)=0
C
C       BAD OR MISSING EXPRESSION.
C
        CALL ERRMES (9)
        GOTO 2010
C
C------ $EXT
C
700     CONTINUE
C       $EXT FOUND, DEFINE SYMBOLS AS EXTERNAL IN USER SYMBOL TABLE
        ID = 1
        GOTO 710
C
C------ $INTEGER
C
702     CONTINUE
        ID = 2
        GOTO 710
C
C------ $REAL
C
704     CONTINUE
        ID = 3
        GOTO 710
C
C------ $TRIPLE
C
706     CONTINUE
        ID = 4
C
710     CALL GSYM
        IF (ALFLG) 720,730,730
C
C       GET NEW LINE, IF CONTINUED.
C
720     CONTINUE
        IF ((IBRF .EQ. 3) .AND. (GLNFLG .EQ. 1)) GOTO 725
        CALL ERRMES (28)
        GOTO 2010
725     CONTINUE
        CALL GLINE
        GOTO 710
C       CHECK FOR CONFLICT WITH PREVIOUSLY DEFINED SYMBOL
730     CONTINUE
        IF (NUSYM .EQ. 0) GOTO 741
        DO 740 I=1,NUSYM
        IF (USRSYM(I,1).NE.SYM(1)) GOTO 740
        IF (USRSYM(I,2).NE.SYM(2)) GOTO 740
        IF (USRSYM(I,3).NE.SYM(3)) GOTO 740
C       IF GET HERE, SYMBOL ALREADY DEFINED
        CALL ERRMES (2)
        GOTO 750
740     CONTINUE
741     CONTINUE
        NUSYM=NUSYM+1
        IF (NUSYM .GT. USRMAX) GOTO 3000
        USRSYM(NUSYM,1)=SYM(1)
        USRSYM(NUSYM,2)=SYM(2)
        USRSYM(NUSYM,3)=SYM(3)
        USRSYM(NUSYM,4)=0
        IF (ID .NE. 1) GOTO 742
        EXTNUM = EXTNUM + 1
        USRSYM(NUSYM,5) = IOR16 (ILSH16 (EXTNUM,8),1)
742     CONTINUE
        IF (ID .NE. 2) GOTO 744
        USRSYM(NUSYM,5) = IOR16 (ILSH16 (1,3),6)
744     CONTINUE
        IF (ID .NE. 3) GOTO 750
        USRSYM(NUSYM,5) = IOR16 (ILSH16 (2,3),6)
750     CONTINUE
        IF (ID .NE. 4) GOTO 755
        USRSYM(NUSYM,5) = IOR16 (ILSH16 (4,3),6)
755     CONTINUE
C       CHECK FOR CRT
        IF (IBRF-3) 760,780,760
C       CHECK FOR COMMA
760     IF (IBRF-15) 770,710,770
770     CALL ERRMES (27)
        GOTO 710
C       HAVE SEEN CRT, DONE, BUT CHECK IF ERROR PENDING
780     IF (ERRCNT) 110,110,2010
C
C------ $END
C
C       COME HERE NORMALLY
1000    CONTINUE
C
C       SEND ANY ERROR MESSAGES
C
        CALL SNDMES
C       RESET LOCATION COUNTER AND TEXT POINTERS AND BEGIN PASS 2
C
C       REWIND TEMP FILE -MAP TLUN IF NECESSARY
C
        TLUN = TLUN - 7
        ID = INFILE (6,TFILE,TLUN)
        TLUN = TLUN + 7
        RETURN
C
C------ $INSERT
C
1100    CONTINUE
C
C       CHECK FOR NESTED INSERTS
C
        IF (INSFLG .EQ. 1) GOTO 1190
C
C       SAVE SLUN AND LINE NUMBER
C
        SLUNSV = SLUN
        LINSV = LINNUM
C
C       EXTRACT FILENAME
C
C
C       REMOVE LEADING BLANKS
C
1110    CONTINUE
        IF (LIN(NXC) .NE. CHARS(1)) GOTO 1115
        NXC = NXC + 1
        GOTO 1110
C
C       EXTRACT FILENAME
C
1115    CONTINUE
        CALL EXFLDS (CHARS(1),CHARS(1),1,0)
        CALL LENGTH (FIELD)
C
C       SAVE INSERT FILE NAME
C
        DO 1120 I=1,31
        INSFIL(I) = FIELD(I)
1120    CONTINUE
C
C       ASSIGN FILE,RESET LINNUM,SET THE $INSERT FLAG
C
        SLUN = 5
        ID = INFILE (1,INSFIL,SLUN)
        SLUN = SLUN + 7
        LINNUM = 0
        INSFLG = 1
        CALL PNUM (LINSV,IOPTR,1)
        CALL WLIN
        GOTO 110
C
C       MULTIPLE INSERTS ERROR
C
1190    CONTINUE
        CALL ERRMES (41)
        GOTO 2010
C
C------ $IF
C
1200    CONTINUE
C
C       EVALUATE EXPRESSION
C
        CALL GVAL(0,EXTPTR)
        IF (GVLFLG) 1220,1210,1210
C
C       SET "IF" FLAG IF EXPR = 0
C
1210    CONTINUE
        IF (IVAL .EQ. 0) IFFLG = 1
        GOTO 110
C
C       BAD OR MISSING EXPRESSION
C
1220    CONTINUE
        CALL ERRMES (9)
        GOTO 2010
C
C------$IF-$ENDIF PROCESSING
C
1250    CONTINUE
C
C       LOOK FOR $
C
        CALL GSYM
        IF (IBRF .NE. 9) GOTO 110
        CALL GSYM
C
C       LOOK FOR ENDIF
C
        IF (SYM(1) .NE. PSUSYM(1,11)) GOTO 110
        IF (SYM(2) .NE. PSUSYM(2,11)) GOTO 110
        IF (SYM(3) .NE. PSUSYM(3,11)) GOTO 110
C
C------ $ENDIF
C
1260    CONTINUE
C
C       RESET IFFLG
C
        IFFLG = 0
        GOTO 110
C
C------ $BOX
C
1300    CONTINUE
C
C       SET BOXFLG
C
        BOXFLG = 1
        GOTO 110
C
C------ $ENDBOX (BAD)
C
1310    CONTINUE
C
C       ENDBOX WITHOUT A BOX
C
        CALL ERRMES (41)
        GOTO 110
C
C------ $BOX-$ENDBOX PROCESSING
C
1320    CONTINUE
C
C       LOOK FOR A $
C
        CALL GSYM
        IF (IBRF .NE. 9) GOTO 110
C
C       LOOK FOR A ENDBOX
C
        CALL GSYM
        IF (SYM(1) .NE. PSUSYM(1,13)) GOTO 110
        IF (SYM(2) .NE. PSUSYM(2,13)) GOTO 110
        IF (SYM(3) .NE. PSUSYM(3,13)) GOTO 110
C
C       IF FOUND ENDBOX - RESET BOX FLAG
C
        BOXFLG = 0
        GOTO 110
C
C------ &LIB
C
1400    CONTINUE
C
C       WRITE A LIB BLOCK
C
        WRITE (OLUN,1410)
1410    FORMAT ( 5X,1H6,6X,6H***LSB)
        GOTO 110
C
C------&ENDLIB
C
1450    CONTINUE
C
C       PROCESS AS A $ END
C
        GOTO 1000
C
C------ $TITLE
C
1500    CONTINUE
C       GET NEXT SYMBOL, WHICH IS TITLE
        CALL GSYM
        IF (ALFLG .LT. 0) GOTO 1520
        TI(1) = SYM(1)
        TI(2) = SYM(2)
        TI(3) = SYM(3)
C
C       WRITE A TITLE BLOCK
C
        WRITE (OLUN,1510) SYM(1),SYM(2),SYM(3)
1510    FORMAT ( 5X,1H3,6X,8H***TITLE/ 3A2)
        GOTO 110
C
C       ERROR
C
1520    CONTINUE
C
C       UNRECOGNIZED OR ILLEGAL STATEMENT
C
        CALL ERRMES (20)
        GOTO 2010
C
C------ $RADIX
C
C       EVALUATE EXPRESSION IN BASE 10 NO MATTER WHAT CURRENT RADIX IS.
C
1600    CONTINUE
        ID = NRADIX
        NRADIX = 10
        CALL GVAL(0,EXTPTR)
        IF (GVLFLG .LT. 0) GOTO 1610
        NRADIX = ID
        IF (IVAL .NE. 8 .AND. IVAL .NE. 10 .AND. IVAL .NE. 16)
     1  GOTO 1610
        NRADIX = IVAL
        GOTO 110
C
C       ERROR
C
C       BAD OR MISSING EXPRESSION.
C
1610    CONTINUE
        CALL ERRMES (9)
        GOTO 2010
C
C------ $COMMON
C
1700    CONTINUE
        ELMCNT = 0
        OLDTYP = 0
C
C       CHECK IF BLANK COMMON
C
        IF (IBRF .EQ. 0) GOTO 1710
        IF (IBRF .NE. 7) GOTO 1990
C
C       GET NAME OF COMMON BLOCK AND PLACE IN SYMBOL TABLE.
C
        CALL EXFLDS (CHARS(7),CHARS(7),1,1)
        IF (FIELD(1) .NE. CHARS(3)) GOTO 1720
C
C       BLANK COMMON
C
1710    CONTINUE
        DO 1715 I=1,3
        SYM(I) = BLKCMN(I)
1715    CONTINUE
        GOTO 1725
C
C       PLACE NAME OF COMMON BLOCK IN SYMBOL TABLE
C
1720    CONTINUE
        CALL PACKS (6,FIELD)
        IF (FIELD(1) .NE. CHARS(8)) GOTO 1725
        DO 1722 I=1,3
        IF ((SYM(I) .NE. BLKCMN(I)) .AND. (SYM(I) .NE. LOCCMN(I))
     1  ) GOTO 1990
1722    CONTINUE
1725    CONTINUE
        CALL FUSYM
C
C       AS EACH NEW COMMON BLOCK IS ENCOUNTERED BY APAL, A COUNTER IS
C       UPDATED (COMCNT). IF THE COMMON BLOCK NAME HAS NOT BEEN PREVIOUSLY
C       DECLARED, INCREMENT COMCNT AND ENTER THE RESULT INTO USRSYM(TABPTR,5)
C       OTHERWISE EXTRACT THE COMMON BLOCK COUNT FROM THE UPPER 8 BITS OF
C       USRSYM(TABPTR,5) WHERE IT HAS BEEN PREVIOUSLY BEEN STORED.
C
        IF (TABPTR .EQ. 0) GOTO 1730
C
C       IF COMMON BLOCK HAS ALREADY BEEN ENTERED INTO THE SYMBOL TABLE,
C       VERIFY THAT IT HAS BEEN DONE SO LEGITAMETLY, IE, USRSYM (TABPTR,4)
C       MUST EQUAL 1.
C
        IF (USRSYM(TABPTR,4) .NE. 1) GOTO 1990
        COMPTR = TABPTR
        DO 1727 I=1,3
        IF (SYM(I) .NE. LOCCMN(I)) GOTO 1728
1727    CONTINUE
        USRSYM(TABPTR,4) = IRSH16 (USRSYM(TABPTR,5),8)
        GOTO 1770
1728    CONTINUE
        COMCNT = COMCNT + 1
        USRSYM(TABPTR,4) = COMCNT
        GOTO 1770
C
C       CHECK FOR SYMBOL TABLE OVERFLOW AS HERE WE HAVE A NEW COMMON BLOCK
C       DECLARED.
C
1730    CONTINUE
        NUSYM = NUSYM + 1
        IF (NUSYM .GT. USRMAX) GOTO 3000
C
C       ENTER COMMON BLOCK NAME INTO SYMBOL TABLE, AND SAVE THE LOCATION
C       OF THE ENTRY TO BE USED IN THE LINKED LIST WHICH WILL BE BUILT UP
C       LATER.
C
        DO 1740 I=1,3
        USRSYM(NUSYM,I) = SYM(I)
1740    CONTINUE
C
C       USRSYM(NUSYM,5) IS SET TO 3 TO MARK THIS VARIABLE AS A COMMON BLOCK NAME
C
        USRSYM(NUSYM,5) = 3
C
        COMPTR = NUSYM
        COMCNT = COMCNT + 1
        USRSYM(NUSYM,4) = COMCNT
1770    CONTINUE
        INDX = COMPTR
C
C       PLACE EACH ELEMENT OF COMMON BLOCK IN SYMBOL TABLE IF NOT ALREADY
C       ENTERED.
C
        CALL GSYM
        IF (ALFLG .LT. 0) GOTO 3030
1775    CONTINUE
        CALL FUSYM
        INDX1 = TABPTR
        IF (TABPTR .NE. 0) GOTO 1800
        NUSYM = NUSYM + 1
        IF (NUSYM .GT. USRMAX) GOTO 3000
        DO 1780 I=1,3
        USRSYM(NUSYM,I) = SYM(I)
1780    CONTINUE
        INDX1 = NUSYM
C
C       CHECK FOR PARAMATERS OF ELEMENT
C
1800    CONTINUE
        IVAL = 1
C
C       CHECK IF ELEMENT IS AN ARRAY
C
        IF (IBRF .NE. 11) GOTO 1830
        NXC = NXC - 1
        CALL EXFLDS (CHARS(11),CHARS(12),0,1)
C
C       LOCATE END OF FIELD AND COUNT COMMAS, ADD A LEFT AND RIGHT PARAENTHESIS
C       TO STRING, CHANGE ALL COMMAS TO THE STRING ')*(' AND THEN
C       EVALUATE THE STRING TO DETERMINE THE SIZE OF THE ARRAY.
C
        ID = 0
        DO 1805 I=1,80
        J = I
        IF (FIELD(I) .EQ. CHARS(3)) GOTO 1810
        IF (FIELD(I) .EQ. CHARS(15)) ID = ID + 1
1805    CONTINUE
1810    CONTINUE
        K = (J + 2) + (2 * ID)
        FIELD(K) = CHARS(3)
        FIELD (K-1) = CHARS(12)
        J = J - 1
        K = K - 2
1815    CONTINUE
        IF (FIELD(J) .EQ. CHARS(15)) GOTO 1820
        FIELD(K) = FIELD(J)
        J = J - 1
        K = K - 1
        IF (J .NE. 0) GOTO 1815
        IF (K .NE. 1) GOTO 3030
        FIELD(1) = CHARS(11)
        GOTO 1825
1820    CONTINUE
        FIELD(K) = CHARS(11)
        FIELD(K-1) = CHARS(6)
        FIELD(K-2) = CHARS(12)
        K = K - 3
        J = J - 1
        GOTO 1815
C
C       NOW EVALUATE THE FIELD
C
1825    CONTINUE
        FLDFLG = 1
        CALL GVAL (0,EXTPTR)
        FLDFLG = 0
C
C       DETERMINE IF THERE IS AN ELEMENT TYPE SPEICIFICATION ALSO.
C
1830    CONTINUE
        IF (IBRF .EQ. 7) GOTO 1840
        ITYPE = IAND16 (IRSH16 (USRSYM (INDX1,5),3),7)
        IF (ITYPE .EQ. 1 .OR. ITYPE .EQ. 2 .OR.
     1  ITYPE .EQ. 4) GOTO 1860
        ITYPE = 1
        GOTO 1860
1840    CONTINUE
        CALL GSYM
        IF (SYM(1) .EQ. SI) GOTO 1850
        IF (SYM(1) .EQ. SR) GOTO 1855
        IF (SYM(1) .EQ. ST) GOTO 1857
        CALL ERRMES (45)
        GOTO 1880
1850    CONTINUE
        ITYPE = 1
        GOTO 1860
1855    CONTINUE
        ITYPE = 2
        GOTO 1860
1857    CONTINUE
        ITYPE = 4
C
C       ENTER INFO INTO SYMBOL TABLES AND UPDATE LINKED LIST STRUCTURE.
C
1860    CONTINUE
        USRSYM(INDX,5) = IOR16 (IAND16 (USRSYM(INDX,5),7),ILSH16
     1  (INDX1,3))
        IF (OLDTYP .EQ. ITYPE) GOTO 1870
        ELMCNT = ELMCNT + 1
        OLDTYP = ITYPE
1870    CONTINUE
        USRSYM(INDX1,4) = IVAL
        USRSYM(INDX1,5) = ITYPE
        INDX = INDX1
C
C       CHECK FOR MORE ELEMENTS
C
1880    CONTINUE
        IF (IBRF .NE. 15) GOTO 1910
1890    CONTINUE
        CALL GSYM
        IF (ALFLG) 1895,1775,1775
1895    CONTINUE
        IF ((IBRF .EQ. 3) .AND. (GLNFLG .EQ. 1)) GOTO 1900
        CALL ERRMES (30)
        GOTO 2010
1900    CONTINUE
C
C       GET NEXT LINE IF IT IS CONTINUED
C
        CALL GLINE
        GOTO 1890
C
C       OUTPUT COMMON ELEMENTS TO OBJECT MODULE
C
1910    CONTINUE
        ID = IAND16 (USRSYM(COMPTR,5),7)
        CALL ITAS (ELMCNT,ARRAY1,8)
        WRITE (OLUN,1920) (ARRAY1(J),J=1,6),
     1  (USRSYM(COMPTR,I),I=1,3),ID
1920    FORMAT ( 4X,2H10,1X,6A1,1X,3A2,I4,2X,7H***DBDB)
        I = USRSYM(COMPTR,4)
        J = IRSH16 (USRSYM(COMPTR,5),3)
        USRSYM (COMPTR,4) = 0
        USRSYM (COMPTR,5) = IOR16 (4,ILSH16 (I,8))
        INDX = 0
        ITYPE = 1
        OLDTYP = 0
        ELMCNT = 0
1930    CONTINUE
        INDX1 = IAND16 (USRSYM(J,5),7)
        K = J
        J = IRSH16 (USRSYM(K,5),3)
        IF (INDX1 .NE. OLDTYP) GOTO 1940
        ELMCNT = ELMCNT + USRSYM(K,4)
        GOTO 1970
1940    CONTINUE
        IF (ITYPE .EQ. 0) GOTO 1950
        ITYPE = 0
        GOTO 1960
1950    CONTINUE
        CALL ITAS (ELMCNT,ARRAY1,8)
        WRITE (OLUN,1955) OLDTYP,(ARRAY1(L),L=1,6)
1955    FORMAT ( I6,4X,6A1)
1960    CONTINUE
        ELMCNT = USRSYM(K,4)
        OLDTYP = INDX1
1970    CONTINUE
        ID = USRSYM(K,4)
        USRSYM(K,4) = INDX
        USRSYM(K,5) = IOR16 (IOR16 (ILSH16 (I,8),ILSH16 (INDX1,3)),3)
        INDX = INDX + ID
        IF (J .NE. 0) GOTO 1930
        CALL ITAS (ELMCNT,ARRAY1,8)
        WRITE (OLUN,1955) OLDTYP,(ARRAY1(L),L=1,6)
        GOTO 2010
C
C       BAD COMMON STATEMENT
C
1990    CONTINUE
        CALL ERRMES (22)
        GOTO 2010
C
C
C       ERRORS OCCURRED - COME HERE TO SEND ERROR MESSAGES
C
C
2000    CONTINUE
        CALL SNDMES
        GOTO 100
C
C
2010    CONTINUE
        CALL SNDMES
        GOTO 245
C
C       ERRORS
C
C       SYMBOL TABLE OVERFLOW
C
3000    CONTINUE
        CALL ERRMES (41)
        GOTO 2010
C
C       UNRECOGNIZED PSEUDO OP
C
3010    CONTINUE
        CALL ERRMES (40)
        GOTO 2010
C
C
C       BAD OR MISSING SYMBOL STRING
C
3030    CONTINUE
        CALL ERRMES (45)
        GOTO 2010
C
C       EXTRANEOUS BROUHAHA
C
3040    CONTINUE
        CALL ERRMES (30)
        GOTO 2010
C
C------ $COMIO
C
4000    CONTINUE
        IF (IBRF .EQ. 8) GOTO 4020
        IF (IBRF .NE. 0) GOTO 3040
4010    CONTINUE
        CALL GSYM
        IF ((IBRF .NE. 3) .AND. (ALFLG .NE. -1) .AND. (GLNFLG .NE. 1)
     1  ) GOTO 4020
C
C       GET NEXT LINE IF IT IS CONTINUED
C
        CALL GLINE
        GOTO 4010
4020    CONTINUE
        IF (IBRF .NE. 8) GOTO 4040
C
C       IF DOT WAS ENCOUNTERED, INSERT IT IN FRONT OF COMMON NAME
C
        CALL EXFLDS (CHARS(1),CHARS(1),1,1)
        IF (FIELD(6) .EQ. CHARS(3)) GOTO 4030
        GOTO 4060
4030    CONTINUE
        DO 4035 I = 1,5
        J = 7 - I
        FIELD(J) = FIELD(J-1)
4035    CONTINUE
        FIELD(1) = CHARS(8)
        CALL PACKS(6,FIELD)
C
C       GET OPTION
C
4040    CONTINUE
        CALL GNUM
C
C       ERROR IF COMMON NAME ALREADY DEFINED
C
        CALL FUSYM
        IF (TABPTR .NE. 0) GOTO 4060
C
C       INSERT COMMON NAME INTO SYMBOL TABLES
C
        NUSYM = NUSYM + 1
        IF (NUSYM .GT. USRMAX) GOTO 3000
        DO 4050 I=1,3
        USRSYM(NUSYM,I) = SYM(I)
4050    CONTINUE
C
C       MARK ENTRY AS OK (USRSYM(NUSYM,4) = 1) AND RETAIN OPTION IN
C       USRSYM(NUSYM,5)
C
        USRSYM(NUSYM,4) = 1
        USRSYM(NUSYM,5) = IVAL
C
C       IF FOLLOWED BY A COMMA, CONTINUE
C
        IF (IBRF .EQ. 15) GOTO 4010
        IF (IBRF .NE. 3) GOTO 4060
        GOTO 2010
C
C       COMIO STATEMENT OUT OF ORDER OR ILLFORMATED
C
4060    CONTINUE
        CALL ERRMES (42)
        GOTO 2010
C
C------ $PARAM
C
5000    CONTINUE
C
C       EXTRACT AND EVALUATE NUMBER OF PARAMATERS
C
        CALL EXFLDS (CHARS(15),CHARS(15),1,1)
        FLDFLG = 1
        CALL GVAL (0,EXTPTR)
        IF (IVAL .EQ. 0) GOTO 5300
        FLDFLG = 0
        COMPTR = -1
C
C       OUTPUT HEADER OF PARAM LOADER BLOCK
C
        CALL ITAS (IVAL,ARRAY1,8)
        WRITE (OLUN,5005) (ARRAY1(I),I=1,6)
5005    FORMAT ( 4X,2H12,1X,6A1,6X,5H***PB)
C
C       CHECK IF LOCAL COMMON BLOCK HAS BEEN DECLARED. IF GOT THEN SET UP
C       A LOCAL COMMON BLOCK AND ASSIGN A COMMON BLOCK ID NUMBER. OTHER-
C       WISE EXTRACT THE COMMON BLOCK ID NUMBER SO THAT ELEMENTS OF THE
C       LOCAL COMMON BLOCK CAN BE FOUND.
C
        DO 5010 I=1,3
        SYM(I) = LOCCMN(I)
5010    CONTINUE
        CALL FUSYM
        OLDTYP = 0
        IF (TABPTR .NE. 0) GOTO 5020
C
C       COMMON BLOCK WAS NOT FOUND
C
        OLDTYP = 1
        NUSYM = NUSYM + 1
        IF (NUSYM .GT. USRMAX) GOTO 3000
        DO 5015 I=1,3
        USRSYM(NUSYM,I) = LOCCMN(I)
5015    CONTINUE
C
C       INCREMENT COMMON BLOCK ID COUNTER (COMCNT)
C
        COMCNT = COMCNT + 1
C
C       SET USRSYM( ,4) TO ONE TO FLAG THIS AS A LEGITIMATE ENTRY, AND THE
C       UPPER 8 BITS OF USRSYM( ,5) TO THE COMMON BLOCK ID COUNTER.
C
        USRSYM(NUSYM,4) = 1
        USRSYM(NUSYM,5) = IOR16 (ILSH16 (COMCNT,8),7)
        TABPTR = NUSYM
5020    CONTINUE
        INDX1 = IRSH16 (USRSYM(TABPTR,5),8)
C
C       GET PARAMATER
C
5030    CONTINUE
        CALL GSYM
        IF (ALFLG .EQ. 0) GOTO 5050
        IF ((IBRF .NE. 3) .AND. (GLNFLG .NE. 1)) GOTO 3040
C
C       GET NEXT LINE IF CONTINUED
C
        CALL GLINE
        GOTO 5030
C
C       VERIFY THAT ELEMENTS OF PARAM STATEMENT CORRESPOND WITH ELEMENTS
C        OF LOCAL COMMON.
5050    CONTINUE
        COMPTR = COMPTR + 1
        CALL FUSYM
        IF (TABPTR .EQ. 0) GOTO 5070
        IF (OLDTYP .EQ. 1) GOTO 5060
        VAL1 = USRSYM(TABPTR,4)
        IF (COMPTR .NE. USRSYM(TABPTR,4)) GOTO 5300
        IF (IRSH16 (USRSYM(TABPTR,5),8) .NE. INDX1) GOTO 5300
        VAL2 = IOR16 (USRSYM(TABPTR,5),7)
        GOTO 5090
5060    CONTINUE
        VAL1 = COMPTR
        VAL2 = IOR16 (USRSYM(TABPTR,5),7)
        GOTO 5090
5070    CONTINUE
        NUSYM = NUSYM + 1
        IF (NUSYM .GT. USRMAX) GOTO 3000
        TABPTR = NUSYM
        DO 5075 I=1,3
        USRSYM(NUSYM,I) = SYM(I)
5075    CONTINUE
        VAL1 = COMPTR
        VAL2 = 7
5090    CONTINUE
C
C       CHECK IF PARAMATER IS AN ARRAY
C
        FIELD(1) = 0
        IF (IBRF .NE. 11) GOTO 5100
C
C       PLACE ARRAY PARAMATERS IN A BUFFER TO BE OUTPUT LATER
C
        NXC = NXC - 1
        CALL EXFLDS (CHARS(11),CHARS(12),1,1)
C
C       CHECK FOR FUTHER PARAMETERS- INTEGER/REAL DECLARATIONS,
C       INPUT/OUTPUT OPTIONS.
C
5100    CONTINUE
        IVAL = 0
        ITYPE = 0
        IF (IBRF .NE. 7) GOTO 5130
        CALL GSYM
        IF (SYM(1) .EQ. SI) ITYPE = 1
        IF (SYM(1) .EQ. SR) ITYPE = 2
        IF (SYM(1) .EQ. SIP) IVAL = 1
        IF (SYM(1) .EQ. SOP) IVAL = 2
5110    CONTINUE
        IF (IBRF .NE. 7) GOTO 5130
        CALL GSYM
        IF (IVAL .NE. 0) GOTO 5120
        IF (SYM(1) .EQ. SIP) IVAL = 1
        IF (SYM(1) .EQ. SOP) IVAL = 2
        IF (IVAL .EQ. 1 .OR. IVAL .EQ. 2) GOTO 5110
        CALL ERRMES (19)
        GOTO 5110
5120    CONTINUE
        IF ((SYM(1) .EQ. SIP) .AND. (IVAL .EQ. 2)) IVAL = 3
        IF ((SYM(1) .EQ. SOP) .AND. (IVAL .EQ. 1)) IVAL = 3
        IF (IVAL .NE. 3) CALL ERRMES (19)
C
C       SET DEFAULT VALUES FOR I/O AND INTEGER/REAL OPTIONS IF NECESARY.
C
5130    CONTINUE
        IF (IVAL .EQ. 0) IVAL = 3
        IF (IAND16 (IRSH16 (VAL2,3),7) .NE. 0) GOTO 5140
        IF (ITYPE .EQ. 0) ITYPE = 1
        VAL2 = IOR16 (IAND16 (VAL2,7),ILSH16 (ITYPE,3))
        USRSYM(TABPTR,4) = VAL1
        USRSYM(TABPTR,5) = VAL2
        GOTO 5150
5140    CONTINUE
        IF ((ITYPE .NE. IAND16 (IRSH16 (VAL2,3),7)) .AND.
     1  ITYPE .NE. 0) CALL ERRMES (19)
        ITYPE = IAND16 (IRSH16 (VAL2,3),7)
C
C       OUTPUT PARAMATER LOADER BLOCK
C
5150    CONTINUE
        I = 0
        IF (FIELD(1) .EQ. 0) GOTO 5210
        DO 5200 J=1,80
        IF (FIELD(J) .EQ. CHARS(15)) I = I + 1
        IF (FIELD(J) .EQ. CHARS(3)) GOTO 5205
5200    CONTINUE
5205    CONTINUE
        I = I + 1
5210    CONTINUE
        CALL ITAS (I,ARRAY1,8)
        WRITE (OLUN,5215) ITYPE,IVAL,(ARRAY1(X),X=1,6)
5215    FORMAT ( 2I6,6A1)
        IBRFSV = IBRF
        NXCSV = NXC
        IF (I .EQ. 0) GOTO 5270
        FLDFLG = 1
        ID = 0
        K = 0
5220    CONTINUE
        K = K + 1
        J = K
        IF (FIELD(K) .EQ. CHARS(1)) GOTO 5220
        INDX = 0
        IF (FIELD(K) .NE. CHARS(18)) GOTO 5230
        INDX = 1
        FIELD(K) = CHARS(1)
5230    CONTINUE
        DO 5260 I=K,80
        L = I
        IF (FIELD(I) .NE. CHARS(3)) GOTO 5235
        ID = 1
        GOTO 5237
5235    CONTINUE
        IF (FIELD(I) .NE. CHARS(15)) GOTO 5260
        FIELD(I) = CHARS(3)
5237    CONTINUE
        CALL GVAL (0,EXTPTR)
        CALL ITAS (IVAL,ARRAY1,8)
        WRITE (OLUN,5240) INDX,(ARRAY1(X),X=1,6)
5240    FORMAT ( I6,1X,6A1)
        IF (ID .EQ. 1) GOTO 5270
        DO 5245 M=K,L
        FIELD(M) = CHARS(1)
5245    CONTINUE
        K = L
        GOTO 5220
5260    CONTINUE
C
C       IF A COMMA IS NEXT CHARACTER PARSED, CONTINUE
C
5270    CONTINUE
        NXC = NXCSV
        IBRF = IBRFSV
        FLDFLG = 0
        IF (IBRF .EQ. 15) GOTO 5030
        IF (IBRF .NE. 3) GOTO 3040
        GOTO 2010
C
C       BAD PARAM STATEMENT
C
5300    CONTINUE
        CALL ERRMES (43)
        GOTO 2010
C
C
C------ $CALL
C
6000    CONTINUE
C
C       GET SUBROUTINE NAME
C
        CALL GSYM
C
C       VERIFY THAT SUBROUTINE NAME HAS BEEN DECLARED EXTERNAL
C
        CALL FUSYM
        IF (TABPTR .EQ. 0) GOTO 6500
        IF (IAND16 (USRSYM(TABPTR,5),7) .NE. 1) GOTO 6500
        DO 6010 I=1,3
        IBUF(I) = SYM(I)
6010    CONTINUE
C
C       CHECK FOR SUBROUTINE PARAMATERS
C
        INDX1 = 0
        IF (IBRF .NE. 11) GOTO 6300
C
C       OUTPUT FIRST LINE OF CODE
C
        WRITE (TLUN,6050) (SYM(I),I=1,3)
6050    FORMAT (1X, 10HLDMA; DB=#,3A2,
     1  32H-1     "BEGIN EXPANSION OF $CALL)
        LOCNT = LOCNT + 1
C
C       GET PARAMATER
C
6100    CONTINUE
        CALL EXFLDS (CHARS(15),CHARS(15),1,1)
        INDX1 = INDX1 + 1
        IF (IBRF .EQ. 3) GOTO 6200
        CALL PACKS (20,FIELD)
C
C       OUTPUT TWO LINES OF CODE FOR EACH PARAMATER.
C
        WRITE (TLUN,6150) (SYM(I),I=1,10)
6150    FORMAT (1X, 14HDPX(3)<DB; DB=,1X,10A2/
     1  1X, 16HINCMA; MI<DPX(3))
        LOCNT = LOCNT + 2
        GOTO 6100
C
C       REMOVE FINAL PARENTHISIS FROM STRING AND OUTPUT CODE FOR FINAL PARAMATER
C
6200    CONTINUE
        DO 6250 I=1,80
        J = I
        IF (FIELD(I) .EQ. CHARS(3)) GOTO 6275
6250    CONTINUE
6275    CONTINUE
        FIELD(J) = CHARS(1)
        FIELD(J-1) = CHARS(1)
        CALL PACKS(20,FIELD)
        WRITE (TLUN,6150) (SYM(I),I=1,10)
        LOCNT = LOCNT + 2
C
C       OUTPUT FINAL THREE LINES OF CODE
C
        WRITE (TLUN,6280) (IBUF(I),I=1,3)
6280    FORMAT (1X, 14HLDSPI 0; DB= # ,3A2)
        LOCNT = LOCNT + 1
6300    CONTINUE
        WRITE (TLUN,6400) INDX1,(IBUF(I),I=1,3)
6400    FORMAT (1X, 12HLDSPI 1; DB=,I6/1X, 4HJSR ,3A2,12X,
     1  23H"END EXPANSION OF $CALL)
        LOCNT = LOCNT + 2
        GOTO 2010
C
C       SUBROUTINE NAME MUST BE DECLARED EXTERNAL
C
6500    CONTINUE
        CALL ERRMES (44)
        GOTO 2010
C
C
C------ $TASK
C
7000    CONTINUE
        J = 0
        K = 0
        L = 0
C
C       DEFAULT PRIORTIY
C
        M = 100
        IF (IBRF .NE. 0) GOTO 7090
C
C       GET TASK ID
C
        CALL GNUM
        ID = IVAL
7020    CONTINUE
        IF (IBRF .EQ. 7) GOTO 7040
        IF (IBRF .EQ. 3) GOTO 7060
C
C       TASK PRIORITY
C
        CALL GNUM
        M = IVAL
        IF (IVAL .LT. 0 .OR. IVAL .GT. 255) GOTO 7090
        GOTO 7020
C
C       PICK UP OPTIONS
C
7040    CONTINUE
        CALL GSYM
        IF ((SYM(1) .NE. SM) .AND. (SYM(1) .NE. SI) .AND.
     1  (SYM(1) .NE. SS)) GOTO 7090
        IF (SYM(1) .EQ. SM) J = 1
        IF (SYM(1) .EQ. SI) K = 1
        IF (SYM(1) .EQ. SS) L = 1
        GOTO 7020
C
C       OUTPUT TASK BLOCK
C
7060    CONTINUE
        CALL ITAS (ID,ARRAY1,8)
        CALL ITAS (M,ARRAY2,8)
        WRITE (OLUN,7070) (ARRAY1(I),I=4,6),J,(ARRAY2(ID),ID=4,6),K,L
7070    FORMAT ( 4X,2H15,6X,7H***TASK/
     1   3A1,1X,I1,1X,3A1,2(1X,I1))
        GOTO 2010
C
C       BAD PARAMATER
C
7090    CONTINUE
        CALL ERRMES (34)
        GOTO 2010
C
C------ $ISR
C
8000    CONTINUE
        IF (IBRF .NE. 0) GOTO 7090
C
C       GET ISR INDEX
C
        CALL GNUM
        IF ((IVAL .LT. 1) .OR. (IVAL .GT. 15)) GOTO 7090
C
C       OUTPUT ISR BLOCK
C
        CALL ITAS (IVAL,ARRAY1,8)
        WRITE (OLUN,8050) (ARRAY1(I),I=1,6)
8050    FORMAT ( 4X,2H16,1X,6A1,6X,6H***ISR)
        GOTO 2010
        END
C+++    PASS2
C****** PASS2 = 2ND PASS OF ASSEMBLY = REL.  1.00 , 09/01/79
C
        SUBROUTINE PASS2
C
C
        INTEGER IWCT,J,ICHF,USPTRX,MLOC,ICOUN,I,J1
        INTEGER JX,JK,IORD,IRET,I2,K1,K,KCHAR,INDX,L,M
        INTEGER OLDVAL,IX,ELBFLG,ID,FLAG,EXTPTR,LINSV,LSTLEN
        INTEGER BOXFLG,IFFLG,ITYPE,RPCNT,NERR
        INTEGER FLDDES,ARG
        INTEGER ARRAY1(6),ARRAY2(6),ARRAY3(6),ARRAY4(6),ARRAY5(6)
        INTEGER IBRFSV,NXCSV,SIVAL,EXPNT,HMANT
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C       SECOND PASS BEGINS
C       RESET SOME CONSTANTS
         IPASS=2
        IORDF=-1
        IPTR=1
        IPTRX=0
        ELBFLG = 0
C       IWCT  --  WORD COUNT FOR THE CURRENT OUTPUT BLOCK
        IWCT=0
        LOCNT=-1
        LSTING = LSTFLG
        IFFLG = 0
        BOXFLG = 0
C
C----------------------------------------------------------C
C                                                          C
C                                                          C
C       HERE WE DO THE APPROPRIATE I/O ACTION TO GET       C
C         BACK TO THE BEGINNING OF THE FILE WHERE WE HAVE  C
C         BEEN SAVING THE INPUT SOURCE TEXT, I. E. WE MUST C
C         REWIND FILE "TLUN"                               C
        TLUN = TLUN - 7
        ID = INFILE (6,TFILE,TLUN)
        TLUN = TLUN + 7
C                                                          C
C                                                          C
C----------------------------------------------------------C
C
C
C       INCREMENT TO NEXT LOCATION
100      LOCNT=LOCNT+1
        LSTLEN = 1
C       CLEAR CURRENT INSTRUCTION AND MASKS
110     DO 120 J=1,5
        CODE(J)=0
120     CODMSK(J)=0
130     CONTINUE
135     CONTINUE
        CALL GLINE
        IF (BOXFLG .NE. 0) GOTO 1550
        IF ((GLNFLG .NE. -1) .AND. (LIN(NXC) .NE. CHARS(36))) GOTO 180
C
C       EOF ENCOUNTERED.
C
136     CONTINUE
        IF (INSFG2 .NE. 1) GOTO 5500
        LINNUM = LINSV
        INSFG2 = 0
        ID = IOPTR - 1
        IF (ID .LE. 0) ID = 1
        LINES = LINES + 1
        IF (LINES .GT. 54) CALL HEADER
        CALL PNUM (LINNUM,ID,1)
        WRITE (LLUN,137) (IOLIN(I,ID),I=1,5)
137     FORMAT (1X, 1X,5A1,16X,12H END $INSERT)
        IOPTR = IOPTR - 1
        GOTO 135
C
C
C
C       REAL LINE
C
180     CONTINUE
        IF (IFFLG .EQ. 1) GOTO 1350
        CALL GSYM
C       IS BREAK CHAR A COLON
C       IF SO, SYMBOL ALREADY DEFINED TO LOC ON FIRST PASS
        IF (IBRF-16) 220,210,220
C       PAST LABEL, GET NEXT SYMBOL
210     CALL GSYM
C       READY TO PROCESS NEXT SYMBOL, PAST LABEL
220     CONTINUE
C
C       CHECK IF PSEUDO OP
C
        IF (ALFLG .GE. 0) GOTO 230
        IF (IBRF .EQ. 9) GOTO 400
C
C       NOT A PSEUDO OP, FIRST TOKEN MUST BE ALPHA-NUMERIC, SO CHECK
C       BREAK CHARACTER AND DETERMINE IF =,$EQU, OR MICRO-CODE.
C
230     CONTINUE
        IF ((ALFLG .LT. 0) .AND. (IBRF .EQ. 3)) GOTO 110
        IF (ALFLG .LT. 0) GOTO 240
        IF (IBRF .EQ. 10) GOTO 1020
        IF (IBRF .EQ. 9) GOTO 1000
        GOTO 4000
C
C       UNRECOGNIZED STATEMENT
C
240     CONTINUE
        CALL ERRMES (20)
        GOTO 5200
C
C------ IS THIS A PSEUDO OP-CODE NEEDING SPECIAL HANDLING
C
400     CONTINUE
        CALL GSYM
402     CONTINUE
        DO 410 I=1,31
        DO 405 J=1,3
        IF (SYM(J) .NE. PSUSYM(J,I)) GOTO 410
405     CONTINUE
        INDX = I
        GOTO 420
410     CONTINUE
420     CONTINUE
C
C       TITLE,ENTRY,VAL,BAD EQU,LOC,FP,END,EXT,INSERT
C       IF,ENDIF,BOX,ENDBOX,LIB,ENDLIB,RADIX,PAGE,LIST,NOLIST
C       INTEGER,REAL,COMMON,DATA,COMIO,SUBR,PARAM,CALL,GLOBAL
C       TRIPLE(FPS100),TASK(FPS100),ISR(FPS100)
C
        GOTO (600,700,800,130,500,900,5500,5300,1100,1300,
     1  1370,1500,5460,5460,1700,1200,1400,1600,1650,
     2  5300,5300,5300,1800,5300,702,5300,5450,701
     3  ,5300,650,650),INDX
C
C------ PROCESS LOC, REQUIRES SETTING UP NEW BLOCK OF CODE
C
500     CALL GVAL(0,EXTPTR)
        IF(GVLFLG)510,520,520
510     CALL ERRMES (21)
        GOTO 5400
C       WERE ANY WORDS WRITTEN IN OLD BLOCK
C       NO, SET NEW LOCATION AND CONTINUE
C       YES, STORE NUMBER OF AP WORDS WRITTEN
520     CONTINUE
        LOCNT = IVAL
        IF(IWCT)5400,5400,540
540     CONTINUE
        MCPTR=MCPTR-1
        CALL ITAS (IWCT,ARRAY1,8)
        CALL ITAS (MLOC,ARRAY2,8)
        WRITE(OLUN,6000) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6)
        DO 550 ID = 1,MCPTR,5
        CALL ITAS (COD(ID),ARRAY1,8)
        CALL ITAS (COD(ID+1),ARRAY2,8)
        CALL ITAS (COD(ID+2),ARRAY3,8)
        CALL ITAS (COD(ID+3),ARRAY4,8)
        IF (COD(ID+4) .NE. 0) GOTO 545
        WRITE (OLUN,6050) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  (ARRAY3(K),K=1,6),(ARRAY4(L),L=1,6)
        GOTO 550
C
C       ADD RELOCATION TRIPLET IF THERE IS ONE. TRIPLET FORMAT:
C       (BITS 0-2)=TYPE, (3-7)=FLDDES, (8-15)=ARG.
545     CONTINUE
C
        FLDDES = IRSH16 (IAND16 (COD(ID+4),248),3)
        ITYPE = IAND16 (COD(ID+4),7)
        ARG = IRSH16 (IAND16 (COD(ID+4),IP16(-256)),8)
        CALL ITAS (ARG,ARRAY5,8)
        WRITE (OLUN,6055) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  (ARRAY3(K),K=1,6),(ARRAY4(L),L=1,6),FLDDES,ITYPE,
     2  (ARRAY5(M),M=1,6)
550     CONTINUE
        IWCT=0
        GOTO 5400
C
C
C------ $TITLE
C
C       CHECK ORDERING OF CODE
600     CONTINUE
        IF(IORDF) 620,620,610
610     CALL ERRMES (32)
        GO TO 5200
620     CONTINUE
        IORDF=1
        GOTO 5400
C
C------ $TASK OR $ISR
C
650     CONTINUE
C
C       CHECK ORDERING OF CODE
C
        IF (IORDF) 660,610,610
660     CONTINUE
        IORDF = 0
        GOTO 5400
C
C------ $ENTRY
C
700     CONTINUE
        FLAG = 0
        GOTO 705
C
C------ $GLOBAL
C
701     CONTINUE
        FLAG = 2
        GOTO 705
C
C------ $SUBR
C
702     CONTINUE
        FLAG = 1
C
705     CONTINUE
        IF (IORDF.GE.2) GO TO 610
C       GET THE SYMBOL
        CALL GSYM
        IF (ALFLG.LT.0) GO TO 790
C       LOOK UP THE SYMBOL
        CALL FUSYM
        IF (TABPTR.GT.0) GO TO 710
C       ERROR UNDEFINED ENTRY SYMBOL
        CALL ERRMES (35)
        GO TO 5200
C       MAKE SURE SYMBOL IS INTERNAL SYMBOL
710     IF (USRSYM(TABPTR,5).EQ.0) GO TO 720
C       SYMBOL IS NOT OK
        CALL ERRMES (33)
        GO TO 5200
C       SET IN THE SYMBOL TABLE THAT THE SYMBOL IS AN ENTRY
720     USRSYM(TABPTR,5)=2
        IVAL = 0
C       SEE IF WE HAVE A PARAMETER COUNT?????
C       IF THE NAME IS NOT FOLLOWED BY A COMMA, THEN WE DON'T HAVE A
C       PARAMETER COUNT. SPAD PARAMATER RANGE IS 0 - 15 FOR ENTRY
C       PSEUDO OPS.  PARAMATER RANGE IS INFINITE FOR SUBR PSEUDO OPS
C       AND THERE IS NO PARAMATER RANGE FOR GLOBAL PSEUDO OPS.
C
        IF (FLAG .EQ. 2) GOTO 760
        IF (IBRF .EQ. 3 .AND. FLAG .EQ. 0) GOTO 740
        IF (IBRF .EQ. 3 .AND. FLAG .EQ. 1) GOTO 750
        IF (IBRF.NE.15) GO TO 795
C       GET A VALUE
        I=TABPTR
        CALL GVAL(0,EXTPTR)
        TABPTR=I
        IF (GVLFLG.GE.0) GO TO 730
C       MISSING PARAMETER VALUE, ERROR #9 (MISSING VALUE)
        CALL ERRMES (9)
        GO TO 5200
730     CONTINUE
        IF (FLAG .EQ. 1) GOTO 750
        IF (IVAL .GT. 15 .OR. IVAL .LT. 0) GOTO 795
C
C       WRITE A LOADER AENTRY RECORD
C
740     CONTINUE
        CALL ITAS (USRSYM(TABPTR,4),ARRAY1,8)
        CALL ITAS (IVAL,ARRAY2,8)
        WRITE (OLUN,741) SYM(1),SYM(2),SYM(3),(ARRAY1(I),I=1,6),
     1  (ARRAY2(J),J=1,6)
741     FORMAT ( 4X,2H13,6X,1H1,6X,9H***AENTRY/ 3A2,1X,6A1,
     1  6X,1H2,1X,6A1)
        IF (IBRF .NE. 3) GOTO 705
        GOTO 5400
C
C------ WRITE A LOADER ENTRY RECORD
C
750     CONTINUE
        ID = 1
        GOTO 770
C
C------ WRITE A LOADER GLOBAL RECORD
C
760     CONTINUE
        ID = 0
770     CONTINUE
        CALL ITAS (USRSYM(TABPTR,4),ARRAY1,8)
        CALL ITAS (IVAL,ARRAY2,8)
        WRITE (OLUN,771) SYM(1),SYM(2),SYM(3),(ARRAY1(I),I=1,6),
     1  ID,(ARRAY2(J),J=1,6)
771     FORMAT ( 5X,1H4,6X,1H1,6X,8H***ENTRY/
     1   3A2,1X,6A1,1X,I6,1X,6A1)
        IF (IBRF .NE. 3) GOTO 705
        GOTO 5400
C
C       UNRECOGNIZED STATEMENT
C
790     CONTINUE
        CALL ERRMES (20)
        GOTO 5200
C
C       BAD $ENTRY OR $SUBR
C
795     CONTINUE
        CALL ERRMES (20)
        GOTO 5200
C
C------ $VAL
C
C       $VAL PSEUDO-OP, READ IN UP TO FOUR EXPRESSIONS WHOSE
C       VALUES ARE MERGED SUCCESSIVELY INTO THE MACHINE
C       4 16 BITS OF AP WORD
C
800     CONTINUE
        IF (IBRF .NE. 0) NXC = NXC - 1
        DO 860 IX=1,3
        CALL GVAL(0,EXTPTR)
        IF (GVLFLG) 870,810,810
810     CONTINUE
        CODE(IX)=IVAL
C
C       CALL GFIELD TO PROCESS 4TH VALUE AND THUS ALLOW EXTERNALS.
C
860     CONTINUE
        CALL GFIELD (5,IRET)
C
C       IF FOLLOWED BY CRT OR ; THEN DONE
C       IF FOLLWED BY COMMA OR SPACE, CONTINUE
C       OTHERWISE ERROR
C
        GOTO (5010,880,880),IRET
C
C       BAD OR MISSING EXPRESSION
C
870     CONTINUE
        CALL ERRMES (9)
        GOTO 5200
C
C       EXTRANEOUS BROUHAHA
C
880     CONTINUE
        CALL ERRMES (20)
        GOTO 5200
C
C------ $FP PSEUDO-OP, PUT A FLOATING POINT NUMBER INTO A P.S.WORD
C
900     CONTINUE
        IF (IBRF .NE. 0) NXC = NXC - 1
        CALL FPGET (ID)
        GO TO 5010
C
C------ $EQU OR =
C
1000    CONTINUE
C
C       CHECK IF TRUELY $EQU
C
        CALL FUSYM
        CALL GSYM
        IF (SYM(1) .NE. PSUSYM(1,4)) GOTO 402
        IF (SYM(2) .NE. PSUSYM(2,4)) GOTO 402
        IF (SYM(3) .NE. PSUSYM(3,4)) GOTO 402
        GOTO 1030
C
C
C       CHECK IF DB=
C
1020    CONTINUE
        IF (SYM(1) .NE. OPSYM(1,196)) GOTO 1025
        IF (SYM(2) .NE. OPSYM(2,196)) GOTO 1025
        IF (SYM(3) .NE. OPSYM(3,196)) GOTO 1025
        GOTO 4000
1025    CONTINUE
        CALL FUSYM
1030    CONTINUE
C
C       FIND SYMBOL IN USRSYM TABLES AND SEND VALUE TO LISTING
C       IF TABPTR RETURN 0 THIS IS FAILURE TO FIND USER SYMBOL
C
        USPTRX = 0
        IF (TABPTR .LE. 0) GOTO 1096
        USPTRX=TABPTR
C
C       SECOND PASS ON ASSIGNMENT EQU OR =
C       PRINT VALUE OF SYMBOL WITH STATEMENT
C       CHECK IF GOOD USER SYMBOL WAS FOUND
C
        IF (LSTING) 1090,1090,1050
1050    IF (USPTRX) 110,110,1060
1060    CONTINUE
        CALL PNUM(USRSYM(USPTRX,4),1,15)
        LINES = LINES + 1
        CALL WLIN
        WRITE (LLUN,1080)
1080    FORMAT (/1X)
1090    CONTINUE
        CALL SNDMES
        GOTO 130
C
C       UNDEFINED OP-CODE
C
1096    CONTINUE
        CALL ERRMES (15)
        GOTO 5200
C
C------ $INSERT
C
C       IF NESTED $INSERT ERROR MESSAGE WAS SENT IN PASS 1, ELSE SAVE THE
C       CURRENT LINE NUMBER AND SET THE FLAG.
C
1100    CONTINUE
        IF (INSFG2 .EQ. 1) GOTO 130
        IF (LSTING .NE. 0) CALL WLIN
        LINSV = LINNUM
        LINNUM = 0
        INSFG2 = 1
        GOTO 5400
C
C------ RADIX
C
C       ANY ERRORS WERE FLAGGED DURING PASS1
C
1200    CONTINUE
        ID = NRADIX
        NRADIX = 10
        CALL GVAL(0,EXTPTR)
        NRADIX = ID
        IF (GVLFLG .LT. 0) GOTO 5450
        IF (IVAL .NE. 8 .AND. IVAL .NE. 10 .AND. IVAL .NE. 16)
     1  GOTO 5450
        NRADIX = IVAL
        GOTO 5450
C
C------ $IF
C
C       IF THE FOLLOWING EXPRESSION EVALUATES TO 0 DON'T ASSEMBLE ANYTHING
C       MORE UNTIL A $ENDIF (SET IFFLG=1)
C
1300    CONTINUE
        IF (IFFLG .NE. 0) GOTO 5450
        CALL GVAL(0,EXTPTR)
        IF (GVLFLG .LT. 0) GOTO 5450
        IF (IVAL .EQ. 0) IFFLG = 1
        GOTO 5450
C
C------ $END-$IF PROCESSING
C
C       CONTROL COMES HERE FOR EVERY LINE WHEN IFFLG=1.  THE LINES ARE TREATED
C       AS COMMENTS EXCEPT THAT WE MUST LOOK FOR A $ENDIF.
C
1350    CONTINUE
        CALL GSYM
        IF (IBRF .NE. 9) GOTO 5450
        CALL GSYM
        IF (SYM(1) .NE. PSUSYM(1,11)) GOTO 5450
        IF (SYM(2) .NE. PSUSYM(2,11)) GOTO 5450
        IF (SYM(3) .NE. PSUSYM(3,11)) GOTO 5450
C
C------ $ENDIF
C
1370    CONTINUE
        IFFLG = 0
        GOTO 5450
C
C------ $PAGE
C
C       DO A FORM FEED IF WE ARE LISTING
C
1400    CONTINUE
        IF (LSTING .EQ. 0) GOTO 110
        IOPTR = IOPTR - 1
        IF (IOPTR .GE. 1) CALL WLIN
        WRITE (LLUN,1410)
1410    FORMAT (1H1)
        GOTO 5470
C
C------ $BOX
C
C       SET BOXFLG=1 SO ALL FOLLOWING LINES WILL BE COMMENTS (UNTIL $ENDBOX)
C       IF WE ARE LISTING BUILD AND WRITE THE TOP LINE OF STARS.
C
1500    CONTINUE
        BOXFLG = 1
        IF (LSTING .EQ. 0) GOTO 5470
C
C       DECREASE IOPTR SO THAT THE $BOX STATEMENT IS NOT PRINTED
C
        IOPTR = IOPTR - 1
        IF (IOPTR .GE. 1) CALL WLIN
C
C       OUTPUT A LINE OF STARS.
C
        LINES = LINES + 1
        IF (LINES .GT. 54) CALL HEADER
        CALL PNUM (LINNUM,1,1)
        WRITE (LLUN,1510) (IOLIN(I,1),I=1,5)
1510    FORMAT (1X, 1X,5A1,16X,79(1H*))
        GOTO 5470
C
C------ $ENDBOX - $BOX PROCESSING
C
C       CONTROL WILL COME HERE FOR EVERY LINE AFTER A $BOX (BOXFLG=1).  IF
C       THE LINE IS $ENDBOX, RESET THE FLAG AND BUILD THE BOTTOM LINE OF STARS,
C       ELSE TREAT THE LINE AS A COMMENT.
C
1550    CONTINUE
        CALL GSYM
        IF (IBRF .NE. 9) GOTO 1570
        CALL GSYM
        IF (SYM(1) .NE. PSUSYM(1,13)) GOTO 1570
        IF (SYM(2) .NE. PSUSYM(2,13)) GOTO 1570
        IF (SYM(3) .NE. PSUSYM(3,13)) GOTO 1570
        BOXFLG = 0
        IF (LSTING .EQ. 0) GOTO 5470
C
C       OUTPUT BOTTOM LINE OF STARS
C
        IOPTR = IOPTR - 1
        IF (IOPTR .GE. 1) CALL WLIN
        CALL PNUM (LINNUM,1,1)
        WRITE (LLUN,1510) (IOLIN(I,1),I=1,5)
        GOTO 5470
C
C       PLACE BOX STARS INTO SOURCE LINE AND LIST IT
C
1570    CONTINUE
        IF (LSTING .EQ. 0) GOTO 110
        IOLIN(22,IOPTR) = CHARS(6)
        IOLIN(100,IOPTR) = CHARS(6)
        CALL WLIN
        GOTO 110
C
C------ $LIST
C
C       TURN THE LIST FLAG BACK ON (LSTING = 1) UNLESS THE GLOBAL
C       LIST FLAG IS OFF (LSTFLG = 0)
C
1600    CONTINUE
        IF (LSTFLG .EQ. 0) GOTO 110
        LSTING = 1
        GOTO 5460
C
C------ $NOLIST
C
1650    CONTINUE
        LSTING = 0
        CALL WLIN
        GOTO 110
C
C------ $ENDLIB
C
C       HANDLE JUST LIKE $END BUT SET ELBFLG = 1 TO SAY CAME FROM $ENDLIB
C
1700    CONTINUE
        ELBFLG = 1
        GOTO 5500
C
C------ $DATA
C
1800    CONTINUE
C
        DLIM = 0
C       OUTPUT HEADER BLOCK FOR EACH ELEMENT OF DBIB.
C       CHECK FOR CONTINUED LINE.
C
        IF ((GLNFLG .NE. 1) .OR. (IBRF .NE.3)) GOTO 1820
        CALL GLINE
1820    CONTINUE
        CALL GSYM
        IF (ALFLG .NE. 0) GOTO 1890
        WRITE (OLUN,1830)
1830    FORMAT ( 4X,2H11,6X,1H1,6X,7H***DBIB)
C
C       EXTRACT ELEMENT FROM TABLES
C
        CALL FUSYM
        INDX = TABPTR
        IF (TABPTR .EQ. 0) GOTO 1890
C
C       GET COMMON ID NUMBER.
C
        ID = IRSH16 (USRSYM (TABPTR,5),8)
C
C       GET VALUE TYPE (INTEGER/REAL/TRIPLE)
C
        ITYPE = IAND16 (IRSH16 (USRSYM(TABPTR,5),3),7)
C
C       CHECK IF INDEX IS SPECIFIED.
C
        IVAL = USRSYM(TABPTR,4)
        IF (IBRF .NE. 11) GOTO 1840
C
C       EXTRACT AND EVALUATE INDEX FIELD.
C
        NXC = NXC - 1
        CALL EXFLDS (CHARS(11),CHARS(12),0,1)
        FLDFLG = 1
        CALL GVAL (0,EXTPTR)
        FLDFLG = 0
        IVAL = (IVAL + USRSYM(INDX,4)) - 1
C
C       CHECK FOR REPEAT COUNT.
C
1840    CONTINUE
        INDX = IVAL
        RPCNT = 1
        IF (IBRF .NE. 7) GOTO 1850
C
C       EXTRACT REPEAT COUNT.
C
        CALL GNUM
        RPCNT = IVAL
C
C       EXTRACT VALUE OF ELEMENT, DETERMINE IF ELEMENT IS INTEGER,REAL,
C       OR TRIPLE AND EVALUATE THE VALUE ACCORDINGLY.
C
1850    CONTINUE
        IF (IBRF .NE. 0) NXC = NXC - 1
        CALL EXFLDS (CHARS(15),CHARS(15),1,1)
        IBRFSV = IBRF
        NXCSV = NXC
        CALL ITAS (ID,ARRAY1,8)
        CALL ITAS (INDX,ARRAY2,8)
        CALL ITAS (RPCNT,ARRAY3,8)
        CALL ITAS (ITYPE,ARRAY4,8)
C
        IF (ITYPE .EQ. 4) GOTO 1856
        IF (ITYPE .EQ. 1) GOTO 1860
        CALL RTOE
C
C       OUTPUT THE DATA RECORD FOR THE DBIB.
C
        WRITE (OLUN,1855) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  ITYPE,(ARRAY3(K),K=1,6),(FIELD(L),L=1,16)
1855    FORMAT ( 2(6A1),I6,6A1,5X,16A1)
        GOTO 1880
C
C       PICK UP TRIPLE
C
1856    CONTINUE
C
C       GET EXPONENT
C
        FLDFLG = 1
        CALL GVAL (0,EXTPTR)
        FLDFLG = 0
        IF (IVAL .LE. 1023) GOTO 1857
C
C       NUMBER TO LARGE, TRUNCATED.
C
        CALL ERRMES (28)
        IVAL = IAND16 (IVAL,1023)
1857    CONTINUE
        SIVAL = ILSH16 (IAND16 (IVAL,15),12)
        EXPNT = IRSH16 (IVAL,4)
C
C       GET HIGH MANTISSA.
C
        CALL EXFLDS (CHARS(15),CHARS(15),1,1)
        FLDFLG = 1
        CALL GVAL (0,EXTPTR)
        FLDFLG = 0
        IF (IVAL .LE. 4095) GOTO 1858
C
C       NUMBER TO LARGE,TRUNCATED.
C
        CALL ERRMES (28)
        IVAL = IAND16 (IVAL,4095)
1858    CONTINUE
        HMANT = IOR16 (SIVAL,IVAL)
C
C       GET LOW MANTISSA.
C
        CALL EXFLDS (CHARS(15),CHARS(15),1,1)
        NXCSV = NXC
        IBRFSV = IBRF
1860    CONTINUE
        FLDFLG = 1
        NXC = 1
C
C       LOCATE NEXT CHARACTER IN FIELD
C
1861    CONTINUE
        IF (FIELD(NXC) .NE. CHARS(1)) GOTO 1862
        IF (FIELD(NXC) .EQ. CHARS(3)) GOTO 1890
        NXC = NXC + 1
        GOTO 1861
C
C       CHECK IF NUMERAL
C
1862    CONTINUE
        IF ((FIELD(NXC) .EQ. CHARS(4)) .OR. (FIELD(NXC) .EQ.
     1  CHARS(5))) GOTO 1867
        IF (FIELD(NXC) - CHARS(32)) 1864,1867,1863
1863    CONTINUE
        IF (FIELD(NXC) - CHARS(33)) 1867,1867,1864
C
C       CHECK IF ALPHANUMERIC
C
1864    CONTINUE
        IF (FIELD(NXC) - CHARS(34)) 1890,1866,1865
1865    CONTINUE
        IF (FIELD(NXC) - CHARS(35)) 1866,1866,1890
1866    CONTINUE
        CALL GSYM
        CALL FUSYM
        IF (TABPTR .EQ. 0) GOTO 1890
        ID = IAND16 (USRSYM(TABPTR,5),7)
        IF ((ID .EQ. 1) .OR. (ID .EQ. 3) .OR.
     1  (ID .EQ. 4)) GOTO 1868
1867    CONTINUE
C
C       THIS IS NOT A RELOCATABLE EXPRESSION
C
        CALL GVAL (0,EXTPTR)
        GOTO 1869
C
C       PROCESS A COMMON RELOCATABLE EXPRESSION
C
1868    CONTINUE
        CALL GFIELD (6,ID)
        IF (ID .EQ. 2) GOTO 1890
        ITYPE = ITYPE + 16
        CALL ITAS (ITYPE,ARRAY4,8)
        IVAL = CODE(4)
1869    CONTINUE
        NXC = NXCSV
        IBRF = IBRFSV
        FLDDES = IRSH16 (IAND16 (CODE(5),248),3)
        ID = IAND16 (CODE(5),7)
        ARG = IRSH16 (IAND16 (CODE(5),IP16(-256)),8)
        CALL ITAS (ARG,ARRAY5,8)
        FLDFLG = 0
C
C       OUTPUT THE DATA RECORD FOR THE DBIB.
C
        IF ((ITYPE .EQ. 4) .OR. (ITYPE .EQ. 20)) GOTO 1875
        IF (CODE(5) .NE. 0) GOTO 1871
        WRITE (OLUN,1870) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  (ARRAY4(L),L=1,6),(ARRAY3(K),K=1,6),IVAL
1870    FORMAT ( 4(6A1),4X,I6)
        GOTO 1880
1871    CONTINUE
        WRITE (OLUN,1872) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  (ARRAY4(L),L=1,6),(ARRAY3(K),K=1,6),IVAL,FLDDES,ID,
     2  (ARRAY5(M),M=1,6)
1872    FORMAT ( 4(6A1),4X,3(I6,1X),6A1)
        GOTO 1880
1875    CONTINUE
        IF (CODE(5) .NE. 0) GOTO 1877
        WRITE (OLUN,1876) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  (ARRAY4(L),L=1,6),(ARRAY3(K),K=1,6),EXPNT,HMANT,IVAL
1876    FORMAT ( 4(6A1),I4,I6,4X,I6)
        GOTO 1880
1877    CONTINUE
        WRITE (OLUN,1878) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  (ARRAY4(L),L=1,6),(ARRAY3(K),K=1,6),EXPNT,HMANT,IVAL,
     2  FLDDES,ID,(ARRAY5(M),M=1,6)
1878    FORMAT ( 4(6A1),I4,I6,4X,3(I6,1X),6A1)
C
C       END OF ELEMENT, SEE IF ANOTHER.
C
1880    CONTINUE
        IF (IBRF .EQ. 15) GOTO 1800
        IF (DLIM .EQ. 1) GOTO 1800
        IF (IBRF .NE. 3) GOTO 1890
        GOTO 5450
C
C       BAD DATA STSTEMENT
C
1890    CONTINUE
        FLDFLG = 0
        CALL ERRMES (25)
        GOTO 5300
C
C------ MICRO OPERATION
C
C       REGULAR PROCESSING WITH BITS AND MASKS
C       CHECK MASK AGAINST ALREADY ENTERED FIELDS
C
4000    CONTINUE
        CALL FSYM
        IF (TABPTR .LE. 0) GOTO 4200
        IORDF=2
        IF(MSKTYP) 4010,4040,4010
4010    DO 4030 J1=1,4
        JX=IAND16(MASKTB(MSKTYP,J1),CODMSK(J1))
        IF(JX) 4020,4030,4020
C       ERROR, CONFLICTING OP-CODES
4020    CALL ERRMES (3)
        GOTO 5200
4030    CONTINUE
C       OKAY FOR CURRENT OP-CODE, SO MERGE IN MASK BITS IN MASK
C       AND MERGE BITS INTO MACHINE WORD BUILDING
4040    DO 4070 J1=1,4
        IF(MSKTYP) 4050,4060,4050
4050    CODMSK(J1)=IOR16(MASKTB(MSKTYP,J1),CODMSK(J1))
4060    JK=J1+3
        CODE(J1)=IOR16(OPSYM(JK,TABPTR),CODE(J1))
4070    CONTINUE
        IORD=3
C
C----------------------------------------------------------------
C       THIS CHANGE CAUSES A FMUL WHICH IS A PUSHER TO ACTUALLY
C       BE A FMUL TM,MD INSTEAD OF A FMUL FM,FA AS IT PREVIOUSLY
C       WAS. THIS WILL HELP ELIMINATE THE POSSIBILITY OF AN OVERFLOW
C       OR UNDERFLOW CONDITION WHICH MAY OCCUR IN SOME LOOPS.
C                       M.T.C. 6/6/79
C
        IF ((TABPTR .EQ. 197) .AND. ((IBRF .EQ. 3) .OR.
     1  (IBRF .EQ. 14))) CODE(4) = IOR16 (CODE(4),7936)
C
C----------------------------------------------------------------
C       NOW BRANCH FOR APPROPRIATE PROCESSING FROM HERE
C       SPECIAL CHECK FOR FADD AND FMUL GROUPS WITH NO ARGS
        IF (IARG-7) 4080,4090,4080
4080    IF(IARG-9) 4110,4090,4110
4090    IF(IBRF-14)4100,5000,4100
4100    IF(IBRF-3)4110,5000,4110
C
C
C       COME HERE IF THE FIELD NEEDS AN ARGUMENT
4110    CALL GFIELD(IARG,IRET)
C       SEE WHERE TO GO NEXT
        GO TO (5000,5200,5010),IRET
C
C       UNDEFINED OP-CODE
C
4200    CONTINUE
        CALL ERRMES (15)
        GOTO 5200
C
C
C       END OF CURRENT FIELD, SHOULD BE AT ; OR CRT
C       SUCCESSFUL PROCESSING SO FAR
C       IF AT CRT END LINE
C       IF AT ; CONTINUE
C       IF NEITHER, ASSUME ; AND CONTINUE
C
C       IS BREAK CHAR A CRT
5000    IF(IBRF-3) 5005,5010,5005
C       IF NOT CRT, RETURN FOR NEXT OP-CODE
5005    CONTINUE
        CALL GSYM
        IF ((IBRF .EQ. 3).AND.(ALFLG .LT. 0).AND.
     1  (GLNFLG .EQ. 1)) GOTO 135
        GOTO 4000
C
C       AT END OF LINE, STORE CODE AND RETURN FOR NEXT LINE
C       ARE WE AT BEGINNING OF BLOCK
5010    IF(IWCT) 5020,5020,5030
C       BEGINNING OF BLOCK, STORE PROLOGUE TO BLOCK
5020    MLOC = LOCNT
        MCPTR=1
C       STORE CURRENT AP CODE WORD
5030    DO 5040 I=1,5
        I2=MCPTR+I-1
        COD(I2)=CODE(I)
5040    CONTINUE
        MCPTR=MCPTR+5
        IWCT=IWCT+1
C       MAXIMUM BLOCK SIZE = 128 16-BIT INTEGERS = 32 AP WORDS
        IF(MCPTR.LT.161)GOTO 5050
        MCPTR=MCPTR-1
        CALL ITAS (IWCT,ARRAY1,8)
        CALL ITAS (MLOC,ARRAY2,8)
        WRITE(OLUN,6000) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6)
        DO 5045 ID = 1,MCPTR,5
        CALL ITAS (COD(ID),ARRAY1,8)
        CALL ITAS (COD(ID+1),ARRAY2,8)
        CALL ITAS (COD(ID+2),ARRAY3,8)
        CALL ITAS (COD(ID+3),ARRAY4,8)
        IF (COD(ID+4) .NE. 0) GOTO 5042
        WRITE (OLUN,6050) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  (ARRAY3(K),K=1,6),(ARRAY4(L),L=1,6)
        GOTO 5045
C
C       ADD RELOCATION TRIPLET IF THERE IS ONE. TRIPLET FORMAT:
C       (BITS 0-2)=TYPE, (3-7)=FLDDES, (8-15)=ARG.
C
5042    CONTINUE
        FLDDES = IRSH16 (IAND16 (COD(ID+4),248),3)
        ITYPE = IAND16 (COD(ID+4),7)
        ARG = IRSH16 (IAND16 (COD(ID+4),IP16(-256)),8)
        CALL ITAS (ARG,ARRAY5,8)
        WRITE (OLUN,6055) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  (ARRAY3(K),K=1,6),(ARRAY4(L),L=1,6),FLDDES,ITYPE,
     2  (ARRAY5(M),M=1,6)
5045    CONTINUE
        IWCT=0
5050    IF (LSTING) 5120,5120,5060
C       WORK INTO TEXT THE LOCATION AND THE FOUR 16 BIT AP WORDS
5060    CONTINUE
        CALL PNUM(LOCNT,1,7)
        DO 5100 I=1,4
        CALL PNUM(CODE(I),I,15)
5100     CONTINUE
        IF (IOPTR .LT. 5) IOPTR = 5
        CALL WLIN
5120    CONTINUE
        IOPTR = 0
        CALL SNDMES
        GOTO 100
C
C
C
C       HAVE SEEN ERROR IN CURRENT LINE, GOTO SEMICOLON OR CRT
C       AND CONTINUE, WANT CLEAN PLACE TO PICK UP PROCESSING
5200    IF(IBRF-3) 5210,5010,5210
5210    IF(IBRF-14) 5220,210,5220
5220    KCHAR=LIN(NXC)
        NXC=NXC+1
        IF(KCHAR-CHARS(3)) 5230,5010,5230
5230    IF(KCHAR-CHARS(14)) 5220,210,5220
C
C       PSEUDO OPS WHICH REQUIRE NO PROCESSING IN PASS2 BUT POSSIBLY
C       HAVE CONTINUED LINES OF CODE COME HERE. CHECK ORDERING, ELSE
C       NIX TO DO.
C
5300    CONTINUE
        IF (GLNFLG)136,5450,5350
5350    CONTINUE
        CALL GLINE
        GOTO 5300
C
C       COME HERE ON EXIT FROOM PSEUDO-OP ON SECOND PASS
C       IF CRT, DONE WITH LINE
C       IF COMMA, POSSIBLE ERROR CONDITION
C
C       IS BREAK OTHER THAN A CRT
5400    IF(IBRF-3) 5410,5450,5410
C       IS BREAK A COMMA
5410    IF(IBRF-14) 5420,5440,5420
C       OTHERWISE, EAT CHARS UP TO CRT OR COMMA
5420    KCHAR=LIN(NXC)
        NXC=NXC+1
        IF(KCHAR-CHARS(3)) 5430,5450,5430
5430    IF(KCHAR-CHARS(14)) 5420,5440,5420
5440    CONTINUE
        NXC = NXC + 1
        KCHAR = LIN(NXC)
        IF (KCHAR .NE. CHARS(3)) GOTO 5420
C
C       ERROR - EXTRANENOUS BROUHAHA
C
        CALL ERRMES (30)
        CALL GLINE
        GOTO 5420
C       DONE WITH LINE, RETURN FOR NEW LINE
C       PRINT LINE BEFORE RETURNING
5450    IF (LSTING) 5470,5470,5460
5460    CALL WLIN
5470    CONTINUE
        IOPTR = 0
        IF (ERRCNT) 110,110,5480
5480    CONTINUE
        CALL SNDMES
        GOTO 110
C
C------ $END
C
C       END STATEMENT SEEN, COMPLETE LAST BLOCK
C       FIRST PRINT LAST LINE
5500    IF(LSTING) 5520,5520,5510
5510    CALL WLIN
5520    IF(IWCT) 5540,5540,5530
5530    MCPTR=MCPTR-1
        CALL ITAS (IWCT,ARRAY1,8)
        CALL ITAS (MLOC,ARRAY2,8)
        WRITE(OLUN,6000) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6)
        DO 5535 ID = 1,MCPTR,5
        CALL ITAS (COD(ID),ARRAY1,8)
        CALL ITAS (COD(ID+1),ARRAY2,8)
        CALL ITAS (COD(ID+2),ARRAY3,8)
        CALL ITAS (COD(ID+3),ARRAY4,8)
        IF (COD(ID+4) .NE. 0) GOTO 5532
        WRITE (OLUN,6050) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  (ARRAY3(K),K=1,6),(ARRAY4(L),L=1,6)
        GOTO 5535
C
C       ADD RELOCATION TRIPLET IF THERE IS ONE. TRIPLET FORMAT:
C       (BITS 0-2)=TYPE, (3-7)=FLDDES, (8-15)=ARG.
C
5532    CONTINUE
        FLDDES = IRSH16 (IAND16 (COD(ID+4),248),3)
        ITYPE = IAND16 (COD(ID+4),7)
        ARG = IRSH16 (IAND16 (COD(ID+4),IP16(-256)),8)
        CALL ITAS (ARG,ARRAY5,8)
        WRITE (OLUN,6055) (ARRAY1(I),I=1,6),(ARRAY2(J),J=1,6),
     1  (ARRAY3(K),K=1,6),(ARRAY4(L),L=1,6),FLDDES,ITYPE,
     2  (ARRAY5(M),M=1,6)
5535    CONTINUE
C
C       PUT OUT EXTERNAL SYMBOL BLOCK
C       SEE IF ANY
5540    IF (EXTNUM .EQ. 0 ) GO TO 5572
C       PUT OUT HEADER OF BLOCK
        CALL ITAS (EXTNUM,ARRAY1,8)
        WRITE(OLUN,6300) (ARRAY1(I),I=1,6)
C
C       NOW PUT OUT THE INDIVIDUAL EXTERNALS
C
        OLDVAL = -1
        DO 5570 I=1,NUSYM
        IF (IAND16 (USRSYM(I,5),7) .NE. 1) GOTO 5570
C       EXTERNAL ENCOUNTERED,
        IF (OLDVAL .GE. IRSH16 (USRSYM(I,5),8)) GOTO 5570
        OLDVAL = IRSH16 (USRSYM(I,5),8)
        WRITE(OLUN,6400) (USRSYM(I,J),J=1,3)
5570    CONTINUE
5572    CONTINUE
C
        IF (ELBFLG .NE. 1) GOTO 5580
C
C       $ENDLIB SEEN
C
        WRITE (OLUN,5575)
5575    FORMAT ( 5X,1H7,6X,6H***LEB)
        RETURN
C
C       PUT OUT END BLOCK
5580    WRITE(OLUN,6100) TI(1),TI(2),TI(3)
C
C       SEND ERROR COUNT
C
        LINES = LINES + 2
        WRITE (LLUN,5590) ERRTOT,TI(1),TI(2),TI(3)
        WRITE(ITTO,5590) ERRTOT,TI(1),TI(2),TI(3)
5590    FORMAT (/1X, 1X,I4,14H ERROR(S) FOR ,3A2)
C
C       PRINT USER SYMBOL TABLE
C       FIRST SYMBOL IS PREDEFINED ZERO, OMIT IT
        IF (LSTFLG.NE.1) RETURN
        LINES = LINES + 5
        IF (LINES .GT. 54) CALL HEADER
        WRITE (LLUN,5600)
5600    FORMAT (1X, 1X,//,14H SYMBOL  VALUE,//1X)
C       CHECK IF ANY USER SYMBOLS
        IF (NUSYM.LT.ISUSYM) RETURN
        IOLIN(7,1)=CHARS(1)
        IOLIN(8,1)=CHARS(1)
        DO 5645 I=ISUSYM,NUSYM
        IOPTR = 1
        DO 5605 II=1,3
        IOLIN(2*II-1,1)=USRSYM(I,II)
        IOLIN(2*II,1)=IRSH16 (USRSYM(I,II),8)
5605    CONTINUE
        CALL PNUM(USRSYM(I,4),1,8)
C       PRINT "EXT" IF EXTERNAL, "ENT" IF ENTRY
        IF (IAND16 (USRSYM(I,5),7) .NE. 1) GOTO 5620
C       EXTERNAL
        IOLIN(17,1)=CHARS(28)
        GO TO 5630
C       ENTRY
5620    CONTINUE
        IF (IAND16 (USRSYM (I,5),7) .NE. 2) GOTO 5640
        IOLIN(17,1)=CHARS(30)
5630    CONTINUE
        IOLIN(16,1)=CHARS(27)
        IOLIN(18,1)=CHARS(29)
5640    CONTINUE
        CALL WLIN
5645    CONTINUE
        RETURN
C
C
C----------------------------------------------------------C
C       THESE FORMATS ARE USED TO MAKE BINARY OUTPUT FOR   C
C         THE LINKER.  THEY ASSUME THAT A FORMATTED WRITE  C
C         TO A STORAGE DEVICE (NOT A PRINTER) WILL NOT!!!!!C
C         USE THE FIRST CHARACTER OF A LINE AS A CARRIAGE  C
C         CONTROL CHARACTER                                C
C
C
6000    FORMAT ( 5X,1H0,1X,6A1,1X,6A1,6X,7H***CODE)
6050    FORMAT ( 2X,4(6A1,1X))
6055    FORMAT ( 2H* ,4(6A1,1X),I6,1X,I6,1X,6A1)
6100    FORMAT ( 5X,1H1,6X,6H***END/ 3A2)
6300    FORMAT ( 5X,2H5 ,6A1,6X,6H***EXT)
6400    FORMAT ( 3A2)
C
        END
C+++    TABLES
C****** TABLES = APAL SYMBOL TABLE BLOCK DATA = REL.  1.00 , 09/01/79
C
        SUBROUTINE TABLES
C       DEFINES "CHARS","DIGITS","BLANK","ARGSYM","PSUSYM",
C       "USRMAX"
C
        INTEGER EXPRMX,EXPRTB
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
        COMMON /EXPRST/ EXPRMX,EXPRTB(12,3)
C
C
C       USRMAX IS SET TO THE MAXIMUN NUMBER OF ALLOWABLE ENTRIES
C       INTO THE USRSYM TABLE.
C
        DATA USRMAX /200/
C
C
C       **** EXPRTB (12,3)
C
C       THIS ARRAY CONTAINS INFO USED BY THE EXPR. EVALUATOR.
C
C       ENTRY 1 = OPERATOR SYMBOL "+","*" ETC.
C       ENTRY 2 = OPERATOR PRECEDENCE
C       ENTRY 3 = ID CODE
C
C       ALSO, THE FIRST 4 ENTRIES CONTAIN THE RADIX DEFINITION CHARACTERS.
C
        DATA EXPRMX/12/
C
        DATA EXPRTB(1,1),EXPRTB(1,2),EXPRTB(1,3)/2H+ ,5,1/
        DATA EXPRTB(2,1),EXPRTB(2,2),EXPRTB(2,3)/2H- ,5,2/
        DATA EXPRTB(3,1),EXPRTB(3,2),EXPRTB(3,3)/2H* ,7,3/
        DATA EXPRTB(4,1),EXPRTB(4,2),EXPRTB(4,3)/2H/ ,7,4/
        DATA EXPRTB(5,1),EXPRTB(5,2),EXPRTB(5,3)/2H( ,2,0/
        DATA EXPRTB(6,1),EXPRTB(6,2),EXPRTB(6,3)/2H) ,1,0/
        DATA EXPRTB(7,1),EXPRTB(7,2),EXPRTB(7,3)/2H& ,3,7/
        DATA EXPRTB(8,1),EXPRTB(8,2),EXPRTB(8,3)/2H% ,3,8/
        DATA EXPRTB(9,1),EXPRTB(9,2),EXPRTB(9,3)/2H= ,3,9/
        DATA EXPRTB(10,1),EXPRTB(10,2),EXPRTB(10,3)/2H> ,3,10/
        DATA EXPRTB(11,1),EXPRTB(11,2),EXPRTB(11,3)/2H< ,3,11/
        DATA EXPRTB(12,1),EXPRTB(12,2),EXPRTB(12,3)/2H' ,9,12/
C
C
C
C       "CHARS" IS A TABLE OF VARIOUS 'BREAK' CHARACTERS
C
        DATA CHARMX,BRKMX/37, 23/
C
        DATA CHARS(1),CHARS(2),CHARS(3),CHARS(4),CHARS(5)
     1  /      2H  ,    0,      0,      2H+ ,     2H- /
C
        DATA CHARS(6),CHARS(7),CHARS(8),CHARS(9),CHARS(10)
     1  /      2H* ,    2H/ ,    2H. ,    2H$ ,    2H= /
C
        DATA CHARS(11),CHARS(12),CHARS(13),CHARS(14),CHARS(15)
     1  /      2H( ,     2H) ,     2H< ,     2H; ,     2H, /
C
        DATA CHARS(16),CHARS(17),CHARS(18),CHARS(19),CHARS(20)
     1  /      2H: ,     2H" ,     2H# ,     2H& ,     2H% /
C
        DATA CHARS(21),CHARS(22),CHARS(23),CHARS(24),CHARS(25)
     1  /      2H' ,     2H> ,     2H@ ,     2H! ,     2HK /
C
        DATA CHARS(26),CHARS(27),CHARS(28),CHARS(29),CHARS(30)
     1  /      2HB ,     2HE ,     2HX ,     2HT ,     2HN /
C
        DATA CHARS(31),CHARS(32),CHARS(33),CHARS(34),CHARS(35)
     1  /      2HH ,     2H0 ,     2H9 ,     2HA ,   2HZ /
C
        DATA CHARS(36),CHARS(37)/0, 2H[ /
C
C
C       "DIGITS" IS A TABLE OF THE DIGITS 0 TO 9 AND A TO F
         DATA DIGITS(1),DIGITS(2),DIGITS(3),DIGITS(4),DIGITS(5),
     1DIGITS(6),DIGITS(7),DIGITS(8),DIGITS(9),DIGITS(10),DIGITS(11),
     2DIGITS(12),DIGITS(13),DIGITS(14),DIGITS(15),DIGITS(16)/
     3 2H0 ,2H1 ,2H2 ,2H3 ,2H4 ,2H5 ,2H6 ,2H7 ,2H8 ,2H9 ,
     4 2HA ,2HB ,2HC ,2HD ,2HE ,2HF /
C
C       "MASKTB" IS A TABLE OF 'MASKS' FOR DETECTING OP-CODE CONFLICTS
        DATA MASKTB(1,1),MASKTB(2,1),MASKTB(3,1),MASKTB(4,1),
     1MASKTB(5,1),MASKTB(6,1),MASKTB(7,1),MASKTB(8,1),
     2MASKTB(9,1),MASKTB(10,1),MASKTB(11,1),MASKTB(12,1),
     3MASKTB(13,1),MASKTB(14,1),MASKTB(1,2),MASKTB(2,2),
     4MASKTB(3,2),MASKTB(4,2),MASKTB(5,2),MASKTB(6,2),
     5MASKTB(7,2),MASKTB(8,2),MASKTB(9,2),MASKTB(10,2),
     6MASKTB(11,2),MASKTB(12,2),MASKTB(13,2),MASKTB(14,2)/
     7-4,-4,-64,-4,3,0,0,0,0,0,0,0,0,0,
     80,480,0,0,-512,480,0,0,0,0,0,0,0,0/
C
        DATA MASKTB(1,3),MASKTB(2,3),MASKTB(3,3),MASKTB(4,3),
     1MASKTB(5,3),MASKTB(6,3),MASKTB(7,3),MASKTB(8,3),
     2MASKTB(9,3),MASKTB(10,3),MASKTB(11,3),MASKTB(12,3),
     3MASKTB(13,3),MASKTB(14,3),MASKTB(1,4),MASKTB(2,4),
     4MASKTB(3,4),MASKTB(4,4),MASKTB(5,4),MASKTB(6,4),
     5MASKTB(7,4),MASKTB(8,4),MASKTB(9,4),MASKTB(10,4),
     6MASKTB(11,4),MASKTB(12,4),MASKTB(13,4),MASKTB(14,4)/
     70,0,0,0,0,0,-16384,12288,3584,0,0,0,0,0,
     80,0,0, 0,0,0,0, 0   ,0,7936,192,48,3,12/
C
        DATA BLANK /2H  /
C
C
C       "ARGSYM" IS A TABLE OF THE ALLOWABLE ARGUEMENTS FOR THE VARIOUS
C         OP-CODES WHICH TAKE ARGUEMENTS
C
        DATA ARGSYM(1,1),ARGSYM(2,1),ARGSYM(3,1),ARGSYM(4,1)
     1   /2HNC,2H  ,0,0/
        DATA ARGSYM(1,2),ARGSYM(2,2),ARGSYM(3,2),ARGSYM(4,2)
     1   /2HFM,2H  ,1,0/
        DATA ARGSYM(1,3),ARGSYM(2,3),ARGSYM(3,3),ARGSYM(4,3)
     1   /2HDP,2HX ,2,2/
        DATA ARGSYM(1,4),ARGSYM(2,4),ARGSYM(3,4),ARGSYM(4,4)
     1   /2HDP,2HY ,3,1/
        DATA ARGSYM(1,5),ARGSYM(2,5),ARGSYM(3,5),ARGSYM(4,5)
     1   /2HTM,2H  ,4,0/
        DATA ARGSYM(1,6),ARGSYM(2,6),ARGSYM(3,6),ARGSYM(4,6)
     1   /2HZE,2HRO,5,0/
        DATA ARGSYM(1,7),ARGSYM(2,7),ARGSYM(3,7),ARGSYM(4,7)
     1   /2HNC,2H  ,0,0/
        DATA ARGSYM(1,8),ARGSYM(2,8),ARGSYM(3,8),ARGSYM(4,8)
     1   /2HFA,2H  ,1,0/
        DATA ARGSYM(1,9),ARGSYM(2,9),ARGSYM(3,9),ARGSYM(4,9)
     1   /2HDP,2HX ,2,2/
        DATA ARGSYM(1,10),ARGSYM(2,10),ARGSYM(3,10),ARGSYM(4,10)
     1   /2HDP,2HY ,3,1/
        DATA ARGSYM(1,11),ARGSYM(2,11),ARGSYM(3,11),ARGSYM(4,11)
     1   /2HMD,2H  ,4,0/
        DATA ARGSYM(1,12),ARGSYM(2,12),ARGSYM(3,12),ARGSYM(4,12)
     1   /2HZE,2HRO,5,0/
        DATA ARGSYM(1,13),ARGSYM(2,13),ARGSYM(3,13),ARGSYM(4,13)
     1   /2HMD,2HPX,6,2/
        DATA ARGSYM(1,14),ARGSYM(2,14),ARGSYM(3,14),ARGSYM(4,14)
     1   /2HED,2HPX,7,2/
        DATA ARGSYM(1,15),ARGSYM(2,15),ARGSYM(3,15),ARGSYM(4,15)
     1   /2HFM,2H  ,0,0/
        DATA ARGSYM(1,16),ARGSYM(2,16),ARGSYM(3,16),ARGSYM(4,16)
     1   /2HDP,2HX ,1,2/
        DATA ARGSYM(1,17),ARGSYM(2,17),ARGSYM(3,17),ARGSYM(4,17)
     1   /2HDP,2HY ,2,1/
        DATA ARGSYM(1,18),ARGSYM(2,18),ARGSYM(3,18),ARGSYM(4,18)
     1   /2HTM,2H  ,3,0/
        DATA ARGSYM(1,19),ARGSYM(2,19),ARGSYM(3,19),ARGSYM(4,19)
     1   /2HFA,2H  ,0,0/
        DATA ARGSYM(1,20),ARGSYM(2,20),ARGSYM(3,20),ARGSYM(4,20)
     1   /2HDP,2HX ,1,2/
        DATA ARGSYM(1,21),ARGSYM(2,21),ARGSYM(3,21),ARGSYM(4,21)
     1   /2HDP,2HY ,2,1/
        DATA ARGSYM(1,22),ARGSYM(2,22),ARGSYM(3,22),ARGSYM(4,22)
     1   /2HMD,2H  ,3,0/
        DATA ARGSYM(1,23),ARGSYM(2,23),ARGSYM(3,23),ARGSYM(4,23)
     1   /2HZE,2HRO,0,0/
        DATA ARGSYM(1,24),ARGSYM(2,24),ARGSYM(3,24),ARGSYM(4,24)
     1   /2HIN,2HBS,1,0/
        DATA ARGSYM(1,25),ARGSYM(2,25),ARGSYM(3,25),ARGSYM(4,25)
     1   /2HDP,2HX ,3,2/
        DATA ARGSYM(1,26),ARGSYM(2,26),ARGSYM(3,26),ARGSYM(4,26)
     1   /2HDP,2HY ,4,1/
        DATA ARGSYM(1,27),ARGSYM(2,27),ARGSYM(3,27),ARGSYM(4,27)
     1   /2HMD,2H  ,5,0/
        DATA ARGSYM(1,28),ARGSYM(2,28),ARGSYM(3,28),ARGSYM(4,28)
     1   /2HSP,2HFN,6,0/
        DATA ARGSYM(1,29),ARGSYM(2,29),ARGSYM(3,29),ARGSYM(4,29)
     1   /2HTM,2H  ,7,0/
        DATA ARGSYM(1,30),ARGSYM(2,30),ARGSYM(3,30),ARGSYM(4,30)
     1   /2HDB,2H  ,1,0/
        DATA ARGSYM(1,31),ARGSYM(2,31),ARGSYM(3,31),ARGSYM(4,31)
     1   /2HFA,2H  ,2,0/
        DATA ARGSYM(1,32),ARGSYM(2,32),ARGSYM(3,32),ARGSYM(4,32)
     1   /2HFM,2H  ,3,0/
        DATA ARGSYM(1,33),ARGSYM(2,33),ARGSYM(3,33),ARGSYM(4,33)
     1   /2HFA,2H  ,1,0/
        DATA ARGSYM(1,34),ARGSYM(2,34),ARGSYM(3,34),ARGSYM(4,34)
     1   /2HFM,2H  ,2,0/
        DATA ARGSYM(1,35),ARGSYM(2,35),ARGSYM(3,35),ARGSYM(4,35)
     1   /2HDB,2H  ,3,0/
C       APSY2  -  PART #2 OF THE SYMBOL TABLES FOR APAL
C
C
C       THE FOLLOWING IS THE PSEUDO OP-CODE TABLE
C
C       $TITLE
C
        DATA PSUSYM(1,1),PSUSYM(2,1),PSUSYM(3,1)
     1  /2HTI,2HTL,2HE /
C
C       $ENTRY
C
        DATA PSUSYM(1,2),PSUSYM(2,2),PSUSYM(3,2)
     1  /2HEN,2HTR,2HY /
C
C       $VAL
C
        DATA PSUSYM(1,3),PSUSYM(2,3),PSUSYM(3,3)
     1  /2HVA,2HL ,2H  /
C
C       $EQU
C
        DATA PSUSYM(1,4),PSUSYM(2,4),PSUSYM(3,4)
     1  /2HEQ,2HU ,2H  /
C
C       $LOC
C
        DATA PSUSYM(1,5),PSUSYM(2,5),PSUSYM(3,5)
     1  /2HLO,2HC ,2H  /
C
C       $FP
C
        DATA PSUSYM(1,6),PSUSYM(2,6),PSUSYM(3,6)
     1  /2HFP,2H  ,2H  /
C
C       $END
C
        DATA PSUSYM(1,7),PSUSYM(2,7),PSUSYM(3,7)
     1  /2HEN,2HD ,2H  /
C
C       $EXT
C
        DATA PSUSYM(1,8),PSUSYM(2,8),PSUSYM(3,8)
     1  /2HEX,2HT ,2H  /
C
C       $INSERT
C
        DATA PSUSYM(1,9),PSUSYM(2,9),PSUSYM(3,9)
     1  /2HIN,2HSE,2HRT/
C
C       $IF
C
        DATA PSUSYM(1,10),PSUSYM(2,10),PSUSYM(3,10)
     1  /2HIF,2H  ,2H  /
C
C       $ENDIF
C
        DATA PSUSYM(1,11),PSUSYM(2,11),PSUSYM(3,11)
     1  /2HEN,2HDI,2HF /
C
C       $BOX
C
        DATA PSUSYM(1,12),PSUSYM(2,12),PSUSYM(3,12)
     1  /2HBO,2HX ,2H  /
C
C       $ENDBOX
C
        DATA PSUSYM(1,13),PSUSYM(2,13),PSUSYM(3,13)
     1  /2HEN,2HDB,2HOX/
C
C       $LIB
C
        DATA PSUSYM(1,14),PSUSYM(2,14),PSUSYM(3,14)
     1  /2HLI,2HB ,2H  /
C
C       $ENDLIB
C
        DATA PSUSYM(1,15),PSUSYM(2,15),PSUSYM(3,15)
     1  /2HEN,2HDL,2HIB/
C
C       $RADIX
C
        DATA PSUSYM(1,16),PSUSYM(2,16),PSUSYM(3,16)
     1  /2HRA,2HDI,2HX /
C
C       $PAGE
C
        DATA PSUSYM(1,17),PSUSYM(2,17),PSUSYM(3,17)
     1  /2HPA,2HGE,2H  /
C
C       $LIST
C
        DATA PSUSYM(1,18),PSUSYM(2,18),PSUSYM(3,18)
     1  /2HLI,2HST,2H  /
C
C       $NOLIST
C
        DATA PSUSYM(1,19),PSUSYM(2,19),PSUSYM(3,19)
     1  /2HNO,2HLI,2HST/
C
C       $INTEGER
C
        DATA PSUSYM(1,20),PSUSYM(2,20),PSUSYM(3,20)
     1  /2HIN,2HTE,2HGE/
C
C       $REAL
C
        DATA PSUSYM(1,21),PSUSYM(2,21),PSUSYM(3,21)
     1  /2HRE,2HAL,2H  /
C
C       $COMMON
C
        DATA PSUSYM(1,22),PSUSYM(2,22),PSUSYM(3,22)
     1  /2HCO,2HMM,2HON/
C
C       $DATA
C
        DATA PSUSYM(1,23),PSUSYM(2,23),PSUSYM(3,23)
     1  /2HDA,2HTA,2H  /
C
C       $COMIO
C
        DATA PSUSYM(1,24),PSUSYM(2,24),PSUSYM(3,24)
     1  /2HCO,2HMI,2HO /
C
C       $SUBR
C
        DATA PSUSYM(1,25),PSUSYM(2,25),PSUSYM(3,25)
     1  /2HSU,2HBR,2H  /
C
C       $PARAM
C
        DATA PSUSYM(1,26),PSUSYM(2,26),PSUSYM(3,26)
     1  /2HPA,2HRA,2HM /
C
C       $CALL
C
        DATA PSUSYM(1,27),PSUSYM(2,27),PSUSYM(3,27)
     1  /2HCA,2HLL,2H  /
C
C       $GLOBAL
C
        DATA PSUSYM(1,28),PSUSYM(2,28),PSUSYM(3,28)
     1  /2HGL,2HOB,2HAL/
C
C       $TRIPLE
C
        DATA PSUSYM(1,29),PSUSYM(2,29),PSUSYM(3,29)
     1  /2HTR,2HIP,2HLE/
C
C       $TASK
C
        DATA PSUSYM(1,30),PSUSYM(2,30),PSUSYM(3,30)
     1  /2HTA,2HSK,2H  /
C
C       $ISR
C
        DATA PSUSYM(1,31),PSUSYM(2,31),PSUSYM(3,31)
     1  /2HIS,2HR ,2H  /
C
        END
C+++    OPTAB
C****** OPTAB = OP-CODE SYMBOL TABLES = &REV
C
        SUBROUTINE OPTAB
C
C       DEFINES THE OP-CODE SYMBOLS, THEIR BIT VALUES, AND MASKS.
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
C       HERE FOLLOWS THE OP-CODE SYMBOL TABLE
C
C       NOP
C
        DATA OPSYM(1,1),OPSYM(2,1),OPSYM(3,1),OPSYM(4,1),
     1  OPSYM(5,1),OPSYM(6,1),OPSYM(7,1),OPSYM(8,1)
     2  /2HNO,2HP ,2H  ,0,0,0,0,256/
C
C       ADD
C
        DATA OPSYM(1,2),OPSYM(2,2),OPSYM(3,2),OPSYM(4,2),
     1  OPSYM(5,2),OPSYM(6,2),OPSYM(7,2),OPSYM(8,2)
     2  /2HAD,2HD ,2H  ,8192,0,0,0,513/
C
C       ADDL
C
        DATA OPSYM(1,3),OPSYM(2,3),OPSYM(3,3),OPSYM(4,3),
     1  OPSYM(5,3),OPSYM(6,3),OPSYM(7,3),OPSYM(8,3)
     2  /2HAD,2HDL,2H  ,9216,0,0,0,513/
C
C       ADDRR
C
        DATA OPSYM(1,4),OPSYM(2,4),OPSYM(3,4),OPSYM(4,4),
     1  OPSYM(5,4),OPSYM(6,4),OPSYM(7,4),OPSYM(8,4)
     2  /2HAD,2HDR,2HR ,10240,0,0,0,513/
C
C       ADDR
C
        DATA OPSYM(1,5),OPSYM(2,5),OPSYM(3,5),OPSYM(4,5),
     1  OPSYM(5,5),OPSYM(6,5),OPSYM(7,5),OPSYM(8,5)
     2  /2HAD,2HDR,2H  ,11264,0,0,0,513/
C
C       SUB
C
        DATA OPSYM(1,6),OPSYM(2,6),OPSYM(3,6),OPSYM(4,6),
     1  OPSYM(5,6),OPSYM(6,6),OPSYM(7,6),OPSYM(8,6)
     2  /2HSU,2HB ,2H  ,12288,0,0,0,513/
C
C       SUBL
C
        DATA OPSYM(1,7),OPSYM(2,7),OPSYM(3,7),OPSYM(4,7),
     1  OPSYM(5,7),OPSYM(6,7),OPSYM(7,7),OPSYM(8,7)
     2  /2HSU,2HBL,2H  ,13312,0,0,0,513/
C
C       SUBRR
C
        DATA OPSYM(1,8),OPSYM(2,8),OPSYM(3,8),OPSYM(4,8),
     1  OPSYM(5,8),OPSYM(6,8),OPSYM(7,8),OPSYM(8,8)
     2  /2HSU,2HBR,2HR ,14336,0,0,0,513/
C
C       SUBR
C
        DATA OPSYM(1,9),OPSYM(2,9),OPSYM(3,9),OPSYM(4,9),
     1  OPSYM(5,9),OPSYM(6,9),OPSYM(7,9),OPSYM(8,9)
     2  /2HSU,2HBR,2H  ,15360,0,0,0,513/
C
C       MOV
C
        DATA OPSYM(1,10),OPSYM(2,10),OPSYM(3,10),OPSYM(4,10),
     1  OPSYM(5,10),OPSYM(6,10),OPSYM(7,10),OPSYM(8,10)
     2  /2HMO,2HV ,2H  ,16384,0,0,0,513/
C
C       MOVL
C
        DATA OPSYM(1,11),OPSYM(2,11),OPSYM(3,11),OPSYM(4,11),
     1  OPSYM(5,11),OPSYM(6,11),OPSYM(7,11),OPSYM(8,11)
     2  /2HMO,2HVL,2H  ,17408,0,0,0,513/
C
C       MOVRR
C
        DATA OPSYM(1,12),OPSYM(2,12),OPSYM(3,12),OPSYM(4,12),
     1  OPSYM(5,12),OPSYM(6,12),OPSYM(7,12),OPSYM(8,12)
     2  /2HMO,2HVR,2HR ,18432,0,0,0,513/
C
C       MOVR
C
        DATA OPSYM(1,13),OPSYM(2,13),OPSYM(3,13),OPSYM(4,13),
     1  OPSYM(5,13),OPSYM(6,13),OPSYM(7,13),OPSYM(8,13)
     2  /2HMO,2HVR,2H  ,19456,0,0,0,513/
C
C       AND
C
        DATA OPSYM(1,14),OPSYM(2,14),OPSYM(3,14),OPSYM(4,14),
     1  OPSYM(5,14),OPSYM(6,14),OPSYM(7,14),OPSYM(8,14)
     2  /2HAN,2HD ,2H  ,20480,0,0,0,513/
C
C       ANDL
C
        DATA OPSYM(1,15),OPSYM(2,15),OPSYM(3,15),OPSYM(4,15),
     1  OPSYM(5,15),OPSYM(6,15),OPSYM(7,15),OPSYM(8,15)
     2  /2HAN,2HDL,2H  ,21504,0,0,0,513/
C
C       ANDRR
C
        DATA OPSYM(1,16),OPSYM(2,16),OPSYM(3,16),OPSYM(4,16),
     1  OPSYM(5,16),OPSYM(6,16),OPSYM(7,16),OPSYM(8,16)
     2  /2HAN,2HDR,2HR ,22528,0,0,0,513/
C
C       ANDR
C
        DATA OPSYM(1,17),OPSYM(2,17),OPSYM(3,17),OPSYM(4,17),
     1  OPSYM(5,17),OPSYM(6,17),OPSYM(7,17),OPSYM(8,17)
     2  /2HAN,2HDR,2H  ,23552,0,0,0,513/
C
C       OR
C
        DATA OPSYM(1,18),OPSYM(2,18),OPSYM(3,18),OPSYM(4,18),
     1  OPSYM(5,18),OPSYM(6,18),OPSYM(7,18),OPSYM(8,18)
     2  /2HOR,2H  ,2H  ,24576,0,0,0,513/
C
C       ORL
C
        DATA OPSYM(1,19),OPSYM(2,19),OPSYM(3,19),OPSYM(4,19),
     1  OPSYM(5,19),OPSYM(6,19),OPSYM(7,19),OPSYM(8,19)
     2  /2HOR,2HL ,2H  ,25600,0,0,0,513/
C
C       ORRR
C
        DATA OPSYM(1,20),OPSYM(2,20),OPSYM(3,20),OPSYM(4,20),
     1  OPSYM(5,20),OPSYM(6,20),OPSYM(7,20),OPSYM(8,20)
     2  /2HOR,2HRR,2H  ,26624,0,0,0,513/
C
C       ORR
C
        DATA OPSYM(1,21),OPSYM(2,21),OPSYM(3,21),OPSYM(4,21),
     1  OPSYM(5,21),OPSYM(6,21),OPSYM(7,21),OPSYM(8,21)
     2  /2HOR,2HR ,2H  ,27648,0,0,0,513/
C
C       EQV
C
        DATA OPSYM(1,22),OPSYM(2,22),OPSYM(3,22),OPSYM(4,22),
     1  OPSYM(5,22),OPSYM(6,22),OPSYM(7,22),OPSYM(8,22)
     2  /2HEQ,2HV ,2H  ,28672,0,0,0,513/
C
C       EQVL
C
        DATA OPSYM(1,23),OPSYM(2,23),OPSYM(3,23),OPSYM(4,23),
     1  OPSYM(5,23),OPSYM(6,23),OPSYM(7,23),OPSYM(8,23)
     2  /2HEQ,2HVL,2H  ,29696,0,0,0,513/
C
C       EQVRR
C
        DATA OPSYM(1,24),OPSYM(2,24),OPSYM(3,24),OPSYM(4,24),
     1  OPSYM(5,24),OPSYM(6,24),OPSYM(7,24),OPSYM(8,24)
     2  /2HEQ,2HVR,2HR ,30720,0,0,0,513/
C
C       EQVR
C
        DATA OPSYM(1,25),OPSYM(2,25),OPSYM(3,25),OPSYM(4,25),
     1  OPSYM(5,25),OPSYM(6,25),OPSYM(7,25),OPSYM(8,25)
     2  /2HEQ,2HVR,2H  ,31744,0,0,0,513/
C
C       WRTEXP
C
        DATA OPSYM(1,26),OPSYM(2,26),OPSYM(3,26),OPSYM(4,26),
     1  OPSYM(5,26),OPSYM(6,26),OPSYM(7,26),OPSYM(8,26)
     2  /2HWR,2HTE,2HXP,64,0,0,0,259/
C
C       WRTHMN
C
        DATA OPSYM(1,27),OPSYM(2,27),OPSYM(3,27),OPSYM(4,27),
     1  OPSYM(5,27),OPSYM(6,27),OPSYM(7,27),OPSYM(8,27)
     2  /2HWR,2HTH,2HMN,128,0,0,0,259/
C
C       WRTLMN
C
        DATA OPSYM(1,28),OPSYM(2,28),OPSYM(3,28),OPSYM(4,28),
     1  OPSYM(5,28),OPSYM(6,28),OPSYM(7,28),OPSYM(8,28)
     2  /2HWR,2HTL,2HMN,192,0,0,0,259/
C
C       CLR
C
        DATA OPSYM(1,29),OPSYM(2,29),OPSYM(3,29),OPSYM(4,29),
     1  OPSYM(5,29),OPSYM(6,29),OPSYM(7,29),OPSYM(8,29)
     2  /2HCL,2HR ,2H  ,512,0,0,0,769/
C
C       CLRL
C
        DATA OPSYM(1,30),OPSYM(2,30),OPSYM(3,30),OPSYM(4,30),
     1  OPSYM(5,30),OPSYM(6,30),OPSYM(7,30),OPSYM(8,30)
     2  /2HCL,2HRL,2H  ,1536,0,0,0,769/
C
C       CLRRR
C
        DATA OPSYM(1,31),OPSYM(2,31),OPSYM(3,31),OPSYM(4,31),
     1  OPSYM(5,31),OPSYM(6,31),OPSYM(7,31),OPSYM(8,31)
     2  /2HCL,2HRR,2HR ,2560,0,0,0,769/
C
C       CLRR
C
        DATA OPSYM(1,32),OPSYM(2,32),OPSYM(3,32),OPSYM(4,32),
     1  OPSYM(5,32),OPSYM(6,32),OPSYM(7,32),OPSYM(8,32)
     2  /2HCL,2HRR,2H  ,3584,0,0,0,769/
C
C       INC
C
        DATA OPSYM(1,33),OPSYM(2,33),OPSYM(3,33),OPSYM(4,33),
     1  OPSYM(5,33),OPSYM(6,33),OPSYM(7,33),OPSYM(8,33)
     2  /2HIN,2HC ,2H  ,576,0,0,0,769/
C
C       INCL
C
        DATA OPSYM(1,34),OPSYM(2,34),OPSYM(3,34),OPSYM(4,34),
     1  OPSYM(5,34),OPSYM(6,34),OPSYM(7,34),OPSYM(8,34)
     2  /2HIN,2HCL,2H  ,1600,0,0,0,769/
C
C       INCRR
C
        DATA OPSYM(1,35),OPSYM(2,35),OPSYM(3,35),OPSYM(4,35),
     1  OPSYM(5,35),OPSYM(6,35),OPSYM(7,35),OPSYM(8,35)
     2  /2HIN,2HCR,2HR ,2624,0,0,0,769/
C
C       INCR
C
        DATA OPSYM(1,36),OPSYM(2,36),OPSYM(3,36),OPSYM(4,36),
     1  OPSYM(5,36),OPSYM(6,36),OPSYM(7,36),OPSYM(8,36)
     2  /2HIN,2HCR,2H  ,3648,0,0,0,769/
C
C       DEC
C
        DATA OPSYM(1,37),OPSYM(2,37),OPSYM(3,37),OPSYM(4,37),
     1  OPSYM(5,37),OPSYM(6,37),OPSYM(7,37),OPSYM(8,37)
     2  /2HDE,2HC ,2H  ,640,0,0,0,769/
C
C       DECL
C
        DATA OPSYM(1,38),OPSYM(2,38),OPSYM(3,38),OPSYM(4,38),
     1  OPSYM(5,38),OPSYM(6,38),OPSYM(7,38),OPSYM(8,38)
     2  /2HDE,2HCL,2H  ,1664,0,0,0,769/
C
C       DECRR
C
        DATA OPSYM(1,39),OPSYM(2,39),OPSYM(3,39),OPSYM(4,39),
     1  OPSYM(5,39),OPSYM(6,39),OPSYM(7,39),OPSYM(8,39)
     2  /2HDE,2HCR,2HR ,2688,0,0,0,769/
C
C       DECR
C
        DATA OPSYM(1,40),OPSYM(2,40),OPSYM(3,40),OPSYM(4,40),
     1  OPSYM(5,40),OPSYM(6,40),OPSYM(7,40),OPSYM(8,40)
     2  /2HDE,2HCR,2H  ,3712,0,0,0,769/
C
C       COM
C
        DATA OPSYM(1,41),OPSYM(2,41),OPSYM(3,41),OPSYM(4,41),
     1  OPSYM(5,41),OPSYM(6,41),OPSYM(7,41),OPSYM(8,41)
     2  /2HCO,2HM ,2H  ,704,0,0,0,769/
C
C       COML
C
        DATA OPSYM(1,42),OPSYM(2,42),OPSYM(3,42),OPSYM(4,42),
     1  OPSYM(5,42),OPSYM(6,42),OPSYM(7,42),OPSYM(8,42)
     2  /2HCO,2HML,2H  ,1728,0,0,0,769/
C
C       COMRR
C
        DATA OPSYM(1,43),OPSYM(2,43),OPSYM(3,43),OPSYM(4,43),
     1  OPSYM(5,43),OPSYM(6,43),OPSYM(7,43),OPSYM(8,43)
     2  /2HCO,2HMR,2HR ,2752,0,0,0,769/
C
C       COMR
C
        DATA OPSYM(1,44),OPSYM(2,44),OPSYM(3,44),OPSYM(4,44),
     1  OPSYM(5,44),OPSYM(6,44),OPSYM(7,44),OPSYM(8,44)
     2  /2HCO,2HMR,2H  ,3776,0,0,0,769/
C
C       LDSPNL
C
        DATA OPSYM(1,45),OPSYM(2,45),OPSYM(3,45),OPSYM(4,45),
     1  OPSYM(5,45),OPSYM(6,45),OPSYM(7,45),OPSYM(8,45)
     2  /2HLD,2HSP,2HNL,768,0,0,0,769/
C
C       LDSPE
C
        DATA OPSYM(1,46),OPSYM(2,46),OPSYM(3,46),OPSYM(4,46),
     1  OPSYM(5,46),OPSYM(6,46),OPSYM(7,46),OPSYM(8,46)
     2  /2HLD,2HSP,2HE ,832,0,0,0,769/
C
C       LDSPT
C
        DATA OPSYM(1,47),OPSYM(2,47),OPSYM(3,47),OPSYM(4,47),
     1  OPSYM(5,47),OPSYM(6,47),OPSYM(7,47),OPSYM(8,47)
     2  /2HLD,2HSP,2HT ,960,0,0,0,769/
C
C       BFLT
C
        DATA OPSYM(1,48),OPSYM(2,48),OPSYM(3,48),OPSYM(4,48),
     1  OPSYM(5,48),OPSYM(6,48),OPSYM(7,48),OPSYM(8,48)
     2  /2HBF,2HLT,2H  ,4096,0,0,0,1025/
C
C       BLT
C
        DATA OPSYM(1,49),OPSYM(2,49),OPSYM(3,49),OPSYM(4,49),
     1  OPSYM(5,49),OPSYM(6,49),OPSYM(7,49),OPSYM(8,49)
     2  /2HBL,2HT ,2H  ,4100,0,0,0,1025/
C
C       BNC
C
        DATA OPSYM(1,50),OPSYM(2,50),OPSYM(3,50),OPSYM(4,50),
     1  OPSYM(5,50),OPSYM(6,50),OPSYM(7,50),OPSYM(8,50)
     2  /2HBN,2HC ,2H  ,4104,0,0,0,1025/
C
C       BZC
C
        DATA OPSYM(1,51),OPSYM(2,51),OPSYM(3,51),OPSYM(4,51),
     1  OPSYM(5,51),OPSYM(6,51),OPSYM(7,51),OPSYM(8,51)
     2  /2HBZ,2HC ,2H  ,4108,0,0,0,1025/
C
C       BDBN
C
        DATA OPSYM(1,52),OPSYM(2,52),OPSYM(3,52),OPSYM(4,52),
     1  OPSYM(5,52),OPSYM(6,52),OPSYM(7,52),OPSYM(8,52)
     2  /2HBD,2HBN,2H  ,4112,0,0,0,1025/
C
C       BDBZ
C
        DATA OPSYM(1,53),OPSYM(2,53),OPSYM(3,53),OPSYM(4,53),
     1  OPSYM(5,53),OPSYM(6,53),OPSYM(7,53),OPSYM(8,53)
     2  /2HBD,2HBZ,2H  ,4116,0,0,0,1025/
C
C       BIFN
C
        DATA OPSYM(1,54),OPSYM(2,54),OPSYM(3,54),OPSYM(4,54),
     1  OPSYM(5,54),OPSYM(6,54),OPSYM(7,54),OPSYM(8,54)
     2  /2HBI,2HFN,2H  ,4120,0,0,0,1025/
C
C       BIFZ
C
        DATA OPSYM(1,55),OPSYM(2,55),OPSYM(3,55),OPSYM(4,55),
     1  OPSYM(5,55),OPSYM(6,55),OPSYM(7,55),OPSYM(8,55)
     2  /2HBI,2HFZ,2H  ,4124,0,0,0,1025/
C
C       REXIT
C
        DATA OPSYM(1,56),OPSYM(2,56),OPSYM(3,56),OPSYM(4,56),
     1  OPSYM(5,56),OPSYM(6,56),OPSYM(7,56),OPSYM(8,56)
     2  /2HRE,2HXI,2HT ,3,-20480,0,0,261/
C
C       BFL0
C
        DATA OPSYM(1,57),OPSYM(2,57),OPSYM(3,57),OPSYM(4,57),
     1  OPSYM(5,57),OPSYM(6,57),OPSYM(7,57),OPSYM(8,57)
     2  /2HBF,2HL0,2H  ,4144,0,0,0,1025/
C
C       BFL1
C
        DATA OPSYM(1,58),OPSYM(2,58),OPSYM(3,58),OPSYM(4,58),
     1  OPSYM(5,58),OPSYM(6,58),OPSYM(7,58),OPSYM(8,58)
     2  /2HBF,2HL1,2H  ,4148,0,0,0,1025/
C
C       BFL2
C
        DATA OPSYM(1,59),OPSYM(2,59),OPSYM(3,59),OPSYM(4,59),
     1  OPSYM(5,59),OPSYM(6,59),OPSYM(7,59),OPSYM(8,59)
     2  /2HBF,2HL2,2H  ,4152,0,0,0,1025/
C
C       BFL3
C
        DATA OPSYM(1,60),OPSYM(2,60),OPSYM(3,60),OPSYM(4,60),
     1  OPSYM(5,60),OPSYM(6,60),OPSYM(7,60),OPSYM(8,60)
     2  /2HBF,2HL3,2H  ,4156,0,0,0,1025/
C
C       PNLLIT
C
        DATA OPSYM(1,61),OPSYM(2,61),OPSYM(3,61),OPSYM(4,61),
     1  OPSYM(5,61),OPSYM(6,61),OPSYM(7,61),OPSYM(8,61)
     2  /2HPN,2HLL,2HIT,4160,0,0,0,257/
C
C       DBELIT
C
        DATA OPSYM(1,62),OPSYM(2,62),OPSYM(3,62),OPSYM(4,62),
     1  OPSYM(5,62),OPSYM(6,62),OPSYM(7,62),OPSYM(8,62)
     2  /2HDB,2HEL,2HIT,4164,0,0,0,257/
C
C       DBHLIT
C
        DATA OPSYM(1,63),OPSYM(2,63),OPSYM(3,63),OPSYM(4,63),
     1  OPSYM(5,63),OPSYM(6,63),OPSYM(7,63),OPSYM(8,63)
     2  /2HDB,2HHL,2HIT,4168,0,0,0,257/
C
C       DBLLIT
C
        DATA OPSYM(1,64),OPSYM(2,64),OPSYM(3,64),OPSYM(4,64),
     1  OPSYM(5,64),OPSYM(6,64),OPSYM(7,64),OPSYM(8,64)
     2  /2HDB,2HLL,2HIT,4172,0,0,0,257/
C
C       SWDB
C
        DATA OPSYM(1,65),OPSYM(2,65),OPSYM(3,65),OPSYM(4,65),
     1  OPSYM(5,65),OPSYM(6,65),OPSYM(7,65),OPSYM(8,65)
     2  /2HSW,2HDB,2H  ,4192,0,0,0,257/
C
C       SWDBE
C
        DATA OPSYM(1,66),OPSYM(2,66),OPSYM(3,66),OPSYM(4,66),
     1  OPSYM(5,66),OPSYM(6,66),OPSYM(7,66),OPSYM(8,66)
     2  /2HSW,2HDB,2HE ,4196,0,0,0,257/
C
C       SWDBH
C
        DATA OPSYM(1,67),OPSYM(2,67),OPSYM(3,67),OPSYM(4,67),
     1  OPSYM(5,67),OPSYM(6,67),OPSYM(7,67),OPSYM(8,67)
     2  /2HSW,2HDB,2HH ,4200,0,0,0,257/
C
C       SWDBL
C
        DATA OPSYM(1,68),OPSYM(2,68),OPSYM(3,68),OPSYM(4,68),
     1  OPSYM(5,68),OPSYM(6,68),OPSYM(7,68),OPSYM(8,68)
     2  /2HSW,2HDB,2HL ,4204,0,0,0,257/
C
C       SPMDA
C
        DATA OPSYM(1,69),OPSYM(2,69),OPSYM(3,69),OPSYM(4,69),
     1  OPSYM(5,69),OPSYM(6,69),OPSYM(7,69),OPSYM(8,69)
     2  /2HSP,2HMD,2HA ,4224,0,0,0,257/
C
C       JMPA
C
        DATA OPSYM(1,70),OPSYM(2,70),OPSYM(3,70),OPSYM(4,70),
     1  OPSYM(5,70),OPSYM(6,70),OPSYM(7,70),OPSYM(8,70)
     2  /2HJM,2HPA,2H  ,4608,0,0,0,1284/
C
C       JSRA
C
        DATA OPSYM(1,71),OPSYM(2,71),OPSYM(3,71),OPSYM(4,71),
     1  OPSYM(5,71),OPSYM(6,71),OPSYM(7,71),OPSYM(8,71)
     2  /2HJS,2HRA,2H  ,4612,0,0,0,1284/
C
C       JMP
C
        DATA OPSYM(1,72),OPSYM(2,72),OPSYM(3,72),OPSYM(4,72),
     1  OPSYM(5,72),OPSYM(6,72),OPSYM(7,72),OPSYM(8,72)
     2  /2HJM,2HP ,2H  ,4616,0,0,0,1540/
C
C       JSR
C
        DATA OPSYM(1,73),OPSYM(2,73),OPSYM(3,73),OPSYM(4,73),
     1  OPSYM(5,73),OPSYM(6,73),OPSYM(7,73),OPSYM(8,73)
     2  /2HJS,2HR ,2H  ,4620,0,0,0,1540/
C
C       JMPT
C
        DATA OPSYM(1,74),OPSYM(2,74),OPSYM(3,74),OPSYM(4,74),
     1  OPSYM(5,74),OPSYM(6,74),OPSYM(7,74),OPSYM(8,74)
     2  /2HJM,2HPT,2H  ,4624,0,0,0,257/
C
C       JSRT
C
        DATA OPSYM(1,75),OPSYM(2,75),OPSYM(3,75),OPSYM(4,75),
     1  OPSYM(5,75),OPSYM(6,75),OPSYM(7,75),OPSYM(8,75)
     2  /2HJS,2HRT,2H  ,4628,0,0,0,257/
C
C       JMPP
C
        DATA OPSYM(1,76),OPSYM(2,76),OPSYM(3,76),OPSYM(4,76),
     1  OPSYM(5,76),OPSYM(6,76),OPSYM(7,76),OPSYM(8,76)
     2  /2HJM,2HPP,2H  ,4632,0,0,0,257/
C
C       JSRP
C
        DATA OPSYM(1,77),OPSYM(2,77),OPSYM(3,77),OPSYM(4,77),
     1  OPSYM(5,77),OPSYM(6,77),OPSYM(7,77),OPSYM(8,77)
     2  /2HJS,2HRP,2H  ,4636,0,0,0,257/
C
C       RPS0A
C
        DATA OPSYM(1,78),OPSYM(2,78),OPSYM(3,78),OPSYM(4,78),
     1  OPSYM(5,78),OPSYM(6,78),OPSYM(7,78),OPSYM(8,78)
     2  /2HRP,2HS0,2HA ,4672,0,0,0,1284/
C
C       RPS2A
C
        DATA OPSYM(1,79),OPSYM(2,79),OPSYM(3,79),OPSYM(4,79),
     1  OPSYM(5,79),OPSYM(6,79),OPSYM(7,79),OPSYM(8,79)
     2  /2HRP,2HS2,2HA ,4676,0,0,0,1284/
C
C       RPS0
C
        DATA OPSYM(1,80),OPSYM(2,80),OPSYM(3,80),OPSYM(4,80),
     1  OPSYM(5,80),OPSYM(6,80),OPSYM(7,80),OPSYM(8,80)
     2  /2HRP,2HS0,2H  ,4680,0,0,0,1540/
C
C       RPS2
C
        DATA OPSYM(1,81),OPSYM(2,81),OPSYM(3,81),OPSYM(4,81),
     1  OPSYM(5,81),OPSYM(6,81),OPSYM(7,81),OPSYM(8,81)
     2  /2HRP,2HS2,2H  ,4684,0,0,0,1540/
C
C       RPS0T
C
        DATA OPSYM(1,82),OPSYM(2,82),OPSYM(3,82),OPSYM(4,82),
     1  OPSYM(5,82),OPSYM(6,82),OPSYM(7,82),OPSYM(8,82)
     2  /2HRP,2HS0,2HT ,4688,0,0,0,257/
C
C       RPS2T
C
        DATA OPSYM(1,83),OPSYM(2,83),OPSYM(3,83),OPSYM(4,83),
     1  OPSYM(5,83),OPSYM(6,83),OPSYM(7,83),OPSYM(8,83)
     2  /2HRP,2HS2,2HT ,4692,0,0,0,257/
C
C       WPS0A
C
        DATA OPSYM(1,84),OPSYM(2,84),OPSYM(3,84),OPSYM(4,84),
     1  OPSYM(5,84),OPSYM(6,84),OPSYM(7,84),OPSYM(8,84)
     2  /2HWP,2HS0,2HA ,4704,0,0,0,1284/
C
C       WPS2A
C
        DATA OPSYM(1,85),OPSYM(2,85),OPSYM(3,85),OPSYM(4,85),
     1  OPSYM(5,85),OPSYM(6,85),OPSYM(7,85),OPSYM(8,85)
     2  /2HWP,2HS2,2HA ,4708,0,0,0,1284/
C
C       WPS0
C
        DATA OPSYM(1,86),OPSYM(2,86),OPSYM(3,86),OPSYM(4,86),
     1  OPSYM(5,86),OPSYM(6,86),OPSYM(7,86),OPSYM(8,86)
     2  /2HWP,2HS0,2H  ,4712,0,0,0,1540/
C
C       WPS0T
C
        DATA OPSYM(1,87),OPSYM(2,87),OPSYM(3,87),OPSYM(4,87),
     1  OPSYM(5,87),OPSYM(6,87),OPSYM(7,87),OPSYM(8,87)
     2  /2HWP,2HS0,2HT ,4720,0,0,0,257/
C
C       WPS2T
C
        DATA OPSYM(1,88),OPSYM(2,88),OPSYM(3,88),OPSYM(4,88),
     1  OPSYM(5,88),OPSYM(6,88),OPSYM(7,88),OPSYM(8,88)
     2  /2HWP,2HS2,2HT ,4724,0,0,0,257/
C
C       RPS1A
C
        DATA OPSYM(1,89),OPSYM(2,89),OPSYM(3,89),OPSYM(4,89),
     1  OPSYM(5,89),OPSYM(6,89),OPSYM(7,89),OPSYM(8,89)
     2  /2HRP,2HS1,2HA ,4736,0,0,0,1284/
C
C       RPS3A
C
        DATA OPSYM(1,90),OPSYM(2,90),OPSYM(3,90),OPSYM(4,90),
     1  OPSYM(5,90),OPSYM(6,90),OPSYM(7,90),OPSYM(8,90)
     2  /2HRP,2HS3,2HA ,4740,0,0,0,1284/
C
C       RPS1
C
        DATA OPSYM(1,91),OPSYM(2,91),OPSYM(3,91),OPSYM(4,91),
     1  OPSYM(5,91),OPSYM(6,91),OPSYM(7,91),OPSYM(8,91)
     2  /2HRP,2HS1,2H  ,4744,0,0,0,1540/
C
C       RPS3
C
        DATA OPSYM(1,92),OPSYM(2,92),OPSYM(3,92),OPSYM(4,92),
     1  OPSYM(5,92),OPSYM(6,92),OPSYM(7,92),OPSYM(8,92)
     2  /2HRP,2HS3,2H  ,4748,0,0,0,1540/
C
C       RPS1T
C
        DATA OPSYM(1,93),OPSYM(2,93),OPSYM(3,93),OPSYM(4,93),
     1  OPSYM(5,93),OPSYM(6,93),OPSYM(7,93),OPSYM(8,93)
     2  /2HRP,2HS1,2HT ,4752,0,0,0,257/
C
C       RPS3T
C
        DATA OPSYM(1,94),OPSYM(2,94),OPSYM(3,94),OPSYM(4,94),
     1  OPSYM(5,94),OPSYM(6,94),OPSYM(7,94),OPSYM(8,94)
     2  /2HRP,2HS3,2HT ,4756,0,0,0,257/
C
C       WPS1A
C
        DATA OPSYM(1,95),OPSYM(2,95),OPSYM(3,95),OPSYM(4,95),
     1  OPSYM(5,95),OPSYM(6,95),OPSYM(7,95),OPSYM(8,95)
     2  /2HWP,2HS1,2HA ,4768,0,0,0,1284/
C
C       WPS3A
C
        DATA OPSYM(1,96),OPSYM(2,96),OPSYM(3,96),OPSYM(4,96),
     1  OPSYM(5,96),OPSYM(6,96),OPSYM(7,96),OPSYM(8,96)
     2  /2HWP,2HS3,2HA ,4772,0,0,0,1284/
C
C       WPS1
C
        DATA OPSYM(1,97),OPSYM(2,97),OPSYM(3,97),OPSYM(4,97),
     1  OPSYM(5,97),OPSYM(6,97),OPSYM(7,97),OPSYM(8,97)
     2  /2HWP,2HS1,2H  ,4776,0,0,0,1540/
C
C       WPS3
C
        DATA OPSYM(1,98),OPSYM(2,98),OPSYM(3,98),OPSYM(4,98),
     1  OPSYM(5,98),OPSYM(6,98),OPSYM(7,98),OPSYM(8,98)
     2  /2HWP,2HS3,2H  ,4780,0,0,0,1540/
C
C       WPS1T
C
        DATA OPSYM(1,99),OPSYM(2,99),OPSYM(3,99),OPSYM(4,99),
     1  OPSYM(5,99),OPSYM(6,99),OPSYM(7,99),OPSYM(8,99)
     2  /2HWP,2HS1,2HT ,4784,0,0,0,257/
C
C       WPS3T
C
        DATA OPSYM(1,100),OPSYM(2,100),OPSYM(3,100),OPSYM(4,100),
     1  OPSYM(5,100),OPSYM(6,100),OPSYM(7,100),OPSYM(8,100)
     2  /2HWP,2HS3,2HT ,4788,0,0,0,257/
C
C       RPSLA
C
        DATA OPSYM(1,101),OPSYM(2,101),OPSYM(3,101),OPSYM(4,101),
     1  OPSYM(5,101),OPSYM(6,101),OPSYM(7,101),OPSYM(8,101)
     2  /2HRP,2HSL,2HA ,4800,0,0,0,1284/
C
C       RPSFA
C
        DATA OPSYM(1,102),OPSYM(2,102),OPSYM(3,102),OPSYM(4,102),
     1  OPSYM(5,102),OPSYM(6,102),OPSYM(7,102),OPSYM(8,102)
     2  /2HRP,2HSF,2HA ,4804,0,0,0,1284/
C
C       RPSL
C
        DATA OPSYM(1,103),OPSYM(2,103),OPSYM(3,103),OPSYM(4,103),
     1  OPSYM(5,103),OPSYM(6,103),OPSYM(7,103),OPSYM(8,103)
     2  /2HRP,2HSL,2H  ,4808,0,0,0,1540/
C
C       RPSF
C
        DATA OPSYM(1,104),OPSYM(2,104),OPSYM(3,104),OPSYM(4,104),
     1  OPSYM(5,104),OPSYM(6,104),OPSYM(7,104),OPSYM(8,104)
     2  /2HRP,2HSF,2H  ,4812,0,0,0,1540/
C
C       RPSLT
C
        DATA OPSYM(1,105),OPSYM(2,105),OPSYM(3,105),OPSYM(4,105),
     1  OPSYM(5,105),OPSYM(6,105),OPSYM(7,105),OPSYM(8,105)
     2  /2HRP,2HSL,2HT ,4816,0,0,0,257/
C
C       RPSFT
C
        DATA OPSYM(1,106),OPSYM(2,106),OPSYM(3,106),OPSYM(4,106),
     1  OPSYM(5,106),OPSYM(6,106),OPSYM(7,106),OPSYM(8,106)
     2  /2HRP,2HSF,2HT ,4820,0,0,0,257/
C
C       RPSLP
C
        DATA OPSYM(1,107),OPSYM(2,107),OPSYM(3,107),OPSYM(4,107),
     1  OPSYM(5,107),OPSYM(6,107),OPSYM(7,107),OPSYM(8,107)
     2  /2HRP,2HSL,2HP ,4824,0,0,0,257/
C
C       RPSFP
C
        DATA OPSYM(1,108),OPSYM(2,108),OPSYM(3,108),OPSYM(4,108),
     1  OPSYM(5,108),OPSYM(6,108),OPSYM(7,108),OPSYM(8,108)
     2  /2HRP,2HSF,2HP ,4828,0,0,0,257/
C
C       LPSLA
C
        DATA OPSYM(1,109),OPSYM(2,109),OPSYM(3,109),OPSYM(4,109),
     1  OPSYM(5,109),OPSYM(6,109),OPSYM(7,109),OPSYM(8,109)
     2  /2HLP,2HSL,2HA ,4832,0,0,0,1284/
C
C       LPSRA
C
        DATA OPSYM(1,110),OPSYM(2,110),OPSYM(3,110),OPSYM(4,110),
     1  OPSYM(5,110),OPSYM(6,110),OPSYM(7,110),OPSYM(8,110)
     2  /2HLP,2HSR,2HA ,4836,0,0,0,1284/
C
C       LPSL
C
        DATA OPSYM(1,111),OPSYM(2,111),OPSYM(3,111),OPSYM(4,111),
     1  OPSYM(5,111),OPSYM(6,111),OPSYM(7,111),OPSYM(8,111)
     2  /2HLP,2HSL,2H  ,4840,0,0,0,1540/
C
C       LPSR
C
        DATA OPSYM(1,112),OPSYM(2,112),OPSYM(3,112),OPSYM(4,112),
     1  OPSYM(5,112),OPSYM(6,112),OPSYM(7,112),OPSYM(8,112)
     2  /2HLP,2HSR,2H  ,4844,0,0,0,1540/
C
C       LPSLT
C
        DATA OPSYM(1,113),OPSYM(2,113),OPSYM(3,113),OPSYM(4,113),
     1  OPSYM(5,113),OPSYM(6,113),OPSYM(7,113),OPSYM(8,113)
     2  /2HLP,2HSL,2HT ,4848,0,0,0,257/
C
C       LPSRT
C
        DATA OPSYM(1,114),OPSYM(2,114),OPSYM(3,114),OPSYM(4,114),
     1  OPSYM(5,114),OPSYM(6,114),OPSYM(7,114),OPSYM(8,114)
     2  /2HLP,2HSR,2HT ,4852,0,0,0,257/
C
C       LPSLP
C
        DATA OPSYM(1,115),OPSYM(2,115),OPSYM(3,115),OPSYM(4,115),
     1  OPSYM(5,115),OPSYM(6,115),OPSYM(7,115),OPSYM(8,115)
     2  /2HLP,2HSL,2HP ,4856,0,0,0,257/
C
C       LPSRP
C
        DATA OPSYM(1,116),OPSYM(2,116),OPSYM(3,116),OPSYM(4,116),
     1  OPSYM(5,116),OPSYM(6,116),OPSYM(7,116),OPSYM(8,116)
     2  /2HLP,2HSR,2HP ,4860,0,0,0,257/
C
C       SETEXA
C
        DATA OPSYM(1,117),OPSYM(2,117),OPSYM(3,117),OPSYM(4,117),
     1  OPSYM(5,117),OPSYM(6,117),OPSYM(7,117),OPSYM(8,117)
     2  /2HSE,2HTE,2HXA,4868,0,0,0,1284/
C
C       SETEX
C
        DATA OPSYM(1,118),OPSYM(2,118),OPSYM(3,118),OPSYM(4,118),
     1  OPSYM(5,118),OPSYM(6,118),OPSYM(7,118),OPSYM(8,118)
     2  /2HSE,2HTE,2HX ,4876,0,0,0,1540/
C
C       SETEXT
C
        DATA OPSYM(1,119),OPSYM(2,119),OPSYM(3,119),OPSYM(4,119),
     1  OPSYM(5,119),OPSYM(6,119),OPSYM(7,119),OPSYM(8,119)
     2  /2HSE,2HTE,2HXT,4884,0,0,0,257/
C
C       SETEXP
C
        DATA OPSYM(1,120),OPSYM(2,120),OPSYM(3,120),OPSYM(4,120),
     1  OPSYM(5,120),OPSYM(6,120),OPSYM(7,120),OPSYM(8,120)
     2  /2HSE,2HTE,2HXP,4892,0,0,0,257/
C
C       FSUBR
C
        DATA OPSYM(1,121),OPSYM(2,121),OPSYM(3,121),OPSYM(4,121),
     1  OPSYM(5,121),OPSYM(6,121),OPSYM(7,121),OPSYM(8,121)
     2  /2HFS,2HUB,2HR ,0,0     ,0,0,1797/
C
C       FSUB
C
        DATA OPSYM(1,122),OPSYM(2,122),OPSYM(3,122),OPSYM(4,122),
     1  OPSYM(5,122),OPSYM(6,122),OPSYM(7,122),OPSYM(8,122)
     2  /2HFS,2HUB,2H  ,1,0,0,0,1797/
C
C       FADD
C
        DATA OPSYM(1,123),OPSYM(2,123),OPSYM(3,123),OPSYM(4,123),
     1  OPSYM(5,123),OPSYM(6,123),OPSYM(7,123),OPSYM(8,123)
     2  /2HFA,2HDD,2H  ,1,0     ,0,0,1797/
C
C       FEQV
C
        DATA OPSYM(1,124),OPSYM(2,124),OPSYM(3,124),OPSYM(4,124),
     1  OPSYM(5,124),OPSYM(6,124),OPSYM(7,124),OPSYM(8,124)
     2  /2HFE,2HQV,2H  ,2,0,0,0,1797/
C
C       FAND
C
        DATA OPSYM(1,125),OPSYM(2,125),OPSYM(3,125),OPSYM(4,125),
     1  OPSYM(5,125),OPSYM(6,125),OPSYM(7,125),OPSYM(8,125)
     2  /2HFA,2HND,2H  ,2,0     ,0,0,1797/
C
C       FOR
C
        DATA OPSYM(1,126),OPSYM(2,126),OPSYM(3,126),OPSYM(4,126),
     1  OPSYM(5,126),OPSYM(6,126),OPSYM(7,126),OPSYM(8,126)
     2  /2HFO,2HR ,2H  ,3,0,0,0,1797/
C
C       FIX
C
        DATA OPSYM(1,127),OPSYM(2,127),OPSYM(3,127),OPSYM(4,127),
     1  OPSYM(5,127),OPSYM(6,127),OPSYM(7,127),OPSYM(8,127)
     2  /2HFI,2HX ,2H  ,0,4096,0,0,2053/
C
C       FIXT
C
        DATA OPSYM(1,128),OPSYM(2,128),OPSYM(3,128),OPSYM(4,128),
     1  OPSYM(5,128),OPSYM(6,128),OPSYM(7,128),OPSYM(8,128)
     2  /2HFI,2HXT,2H  ,0,8192,0,0,2053/
C
C       FSCLT
C
        DATA OPSYM(1,129),OPSYM(2,129),OPSYM(3,129),OPSYM(4,129),
     1  OPSYM(5,129),OPSYM(6,129),OPSYM(7,129),OPSYM(8,129)
     2  /2HFS,2HCL,2HT ,0,12288,0,0,2053/
C
C       FSM2C
C
        DATA OPSYM(1,130),OPSYM(2,130),OPSYM(3,130),OPSYM(4,130),
     1  OPSYM(5,130),OPSYM(6,130),OPSYM(7,130),OPSYM(8,130)
     2  /2HFS,2HM2,2HC ,0,16384,0,0,2053/
C
C       F2CSM
C
        DATA OPSYM(1,131),OPSYM(2,131),OPSYM(3,131),OPSYM(4,131),
     1  OPSYM(5,131),OPSYM(6,131),OPSYM(7,131),OPSYM(8,131)
     2  /2HF2,2HCS,2HM ,0,20480,0,0,2053/
C
C       FABS
C
        DATA OPSYM(1,132),OPSYM(2,132),OPSYM(3,132),OPSYM(4,132),
     1  OPSYM(5,132),OPSYM(6,132),OPSYM(7,132),OPSYM(8,132)
     2  /2HFA,2HBS,2H  ,0,28672,0,0,2053/
C
C       LDSPD
C
        DATA OPSYM(1,133),OPSYM(2,133),OPSYM(3,133),OPSYM(4,133),
     1  OPSYM(5,133),OPSYM(6,133),OPSYM(7,133),OPSYM(8,133)
     2  /2HLD,2HSP,2HD ,3,-32256,0,0,261/
C
C       LDMA
C
        DATA OPSYM(1,134),OPSYM(2,134),OPSYM(3,134),OPSYM(4,134),
     1  OPSYM(5,134),OPSYM(6,134),OPSYM(7,134),OPSYM(8,134)
     2  /2HLD,2HMA,2H  ,3,-31744,0,0,261/
C
C       LDTMA
C
        DATA OPSYM(1,135),OPSYM(2,135),OPSYM(3,135),OPSYM(4,135),
     1  OPSYM(5,135),OPSYM(6,135),OPSYM(7,135),OPSYM(8,135)
     2  /2HLD,2HTM,2HA ,3,-31232,0,0,261/
C
C       LDDPA
C
        DATA OPSYM(1,136),OPSYM(2,136),OPSYM(3,136),OPSYM(4,136),
     1  OPSYM(5,136),OPSYM(6,136),OPSYM(7,136),OPSYM(8,136)
     2  /2HLD,2HDP,2HA ,3,-30720,0,0,261/
C
C       LDSP
C
        DATA OPSYM(1,137),OPSYM(2,137),OPSYM(3,137),OPSYM(4,137),
     1  OPSYM(5,137),OPSYM(6,137),OPSYM(7,137),OPSYM(8,137)
     2  /2HLD,2HSP,2H  ,3,-30208,0,0,261/
C
C       LDAPS
C
        DATA OPSYM(1,138),OPSYM(2,138),OPSYM(3,138),OPSYM(4,138),
     1  OPSYM(5,138),OPSYM(6,138),OPSYM(7,138),OPSYM(8,138)
     2  /2HLD,2HAP,2HS ,3,-29696,0,0,261/
C
C       LDDA
C
        DATA OPSYM(1,139),OPSYM(2,139),OPSYM(3,139),OPSYM(4,139),
     1  OPSYM(5,139),OPSYM(6,139),OPSYM(7,139),OPSYM(8,139)
     2  /2HLD,2HDA,2H  ,3,-29184,0,0,261/
C
C       RPSA
C
        DATA OPSYM(1,140),OPSYM(2,140),OPSYM(3,140),OPSYM(4,140),
     1  OPSYM(5,140),OPSYM(6,140),OPSYM(7,140),OPSYM(8,140)
     2  /2HRP,2HSA,2H  ,3,-28672,0,0,261/
C
C       RSPD
C
        DATA OPSYM(1,141),OPSYM(2,141),OPSYM(3,141),OPSYM(4,141),
     1  OPSYM(5,141),OPSYM(6,141),OPSYM(7,141),OPSYM(8,141)
     2  /2HRS,2HPD,2H  ,3,-28160,0,0,261/
C
C       RMA
C
        DATA OPSYM(1,142),OPSYM(2,142),OPSYM(3,142),OPSYM(4,142),
     1  OPSYM(5,142),OPSYM(6,142),OPSYM(7,142),OPSYM(8,142)
     2  /2HRM,2HA ,2H  ,3,-27648,0,0,261/
C
C       RTMA
C
        DATA OPSYM(1,143),OPSYM(2,143),OPSYM(3,143),OPSYM(4,143),
     1  OPSYM(5,143),OPSYM(6,143),OPSYM(7,143),OPSYM(8,143)
     2  /2HRT,2HMA,2H  ,3,-27136,0,0,261/
C
C       RDPA
C
        DATA OPSYM(1,144),OPSYM(2,144),OPSYM(3,144),OPSYM(4,144),
     1  OPSYM(5,144),OPSYM(6,144),OPSYM(7,144),OPSYM(8,144)
     2  /2HRD,2HPA,2H  ,3,-26624,0,0,261/
C
C       RSPFN
C
        DATA OPSYM(1,145),OPSYM(2,145),OPSYM(3,145),OPSYM(4,145),
     1  OPSYM(5,145),OPSYM(6,145),OPSYM(7,145),OPSYM(8,145)
     2  /2HRS,2HPF,2HN ,3,-26112,0,0,261/
C
C       RAPS
C
        DATA OPSYM(1,146),OPSYM(2,146),OPSYM(3,146),OPSYM(4,146),
     1  OPSYM(5,146),OPSYM(6,146),OPSYM(7,146),OPSYM(8,146)
     2  /2HRA,2HPS,2H  ,3,-25600,0,0,261/
C
C       RDA
C
        DATA OPSYM(1,147),OPSYM(2,147),OPSYM(3,147),OPSYM(4,147),
     1  OPSYM(5,147),OPSYM(6,147),OPSYM(7,147),OPSYM(8,147)
     2  /2HRD,2HA ,2H  ,3,-25088,0,0,261/
C
C       SPMDAV
C
        DATA OPSYM(1,148),OPSYM(2,148),OPSYM(3,148),OPSYM(4,148),
     1  OPSYM(5,148),OPSYM(6,148),OPSYM(7,148),OPSYM(8,148)
     2  /2HSP,2HMD,2HAV,3,-24576,0,0,261/
C
C       OUT
C
        DATA OPSYM(1,149),OPSYM(2,149),OPSYM(3,149),OPSYM(4,149),
     1  OPSYM(5,149),OPSYM(6,149),OPSYM(7,149),OPSYM(8,149)
     2  /2HOU,2HT ,2H  ,3,-16384,0,0,261/
C
C       SPNOUT
C
        DATA OPSYM(1,150),OPSYM(2,150),OPSYM(3,150),OPSYM(4,150),
     1  OPSYM(5,150),OPSYM(6,150),OPSYM(7,150),OPSYM(8,150)
     2  /2HSP,2HNO,2HUT,3,-15872,0,0,261/
C
C       OUTDA
C
        DATA OPSYM(1,151),OPSYM(2,151),OPSYM(3,151),OPSYM(4,151),
     1  OPSYM(5,151),OPSYM(6,151),OPSYM(7,151),OPSYM(8,151)
     2  /2HOU,2HTD,2HA ,3,-15360,0,0,261/
C
C       SPOTDA
C
        DATA OPSYM(1,152),OPSYM(2,152),OPSYM(3,152),OPSYM(4,152),
     1  OPSYM(5,152),OPSYM(6,152),OPSYM(7,152),OPSYM(8,152)
     2  /2HSP,2HOT,2HDA,3,-14848,0,0,261/
C
C       IN
C
        DATA OPSYM(1,153),OPSYM(2,153),OPSYM(3,153),OPSYM(4,153),
     1  OPSYM(5,153),OPSYM(6,153),OPSYM(7,153),OPSYM(8,153)
     2  /2HIN,2H  ,2H  ,3,-14336,0,0,261/
C
C       SPININ
C
        DATA OPSYM(1,154),OPSYM(2,154),OPSYM(3,154),OPSYM(4,154),
     1  OPSYM(5,154),OPSYM(6,154),OPSYM(7,154),OPSYM(8,154)
     2  /2HSP,2HIN,2HIN,3,-13824,0,0,261/
C
C       INDA
C
        DATA OPSYM(1,155),OPSYM(2,155),OPSYM(3,155),OPSYM(4,155),
     1  OPSYM(5,155),OPSYM(6,155),OPSYM(7,155),OPSYM(8,155)
     2  /2HIN,2HDA,2H  ,3,-13312,0,0,261/
C
C       SPINDA
C
        DATA OPSYM(1,156),OPSYM(2,156),OPSYM(3,156),OPSYM(4,156),
     1  OPSYM(5,156),OPSYM(6,156),OPSYM(7,156),OPSYM(8,156)
     2  /2HSP,2HIN,2HDA,3,-12800,0,0,261/
C
C       SNSA
C
        DATA OPSYM(1,157),OPSYM(2,157),OPSYM(3,157),OPSYM(4,157),
     1  OPSYM(5,157),OPSYM(6,157),OPSYM(7,157),OPSYM(8,157)
     2  /2HSN,2HSA,2H  ,3,-12288,0,0,261/
C
C       SPINA
C
        DATA OPSYM(1,158),OPSYM(2,158),OPSYM(3,158),OPSYM(4,158),
     1  OPSYM(5,158),OPSYM(6,158),OPSYM(7,158),OPSYM(8,158)
     2  /2HSP,2HIN,2HA ,3,-11776,0,0,261/
C
C       SNSADA
C
        DATA OPSYM(1,159),OPSYM(2,159),OPSYM(3,159),OPSYM(4,159),
     1  OPSYM(5,159),OPSYM(6,159),OPSYM(7,159),OPSYM(8,159)
     2  /2HSN,2HSA,2HDA,3,-11264,0,0,261/
C
C       SPNADA
C
        DATA OPSYM(1,160),OPSYM(2,160),OPSYM(3,160),OPSYM(4,160),
     1  OPSYM(5,160),OPSYM(6,160),OPSYM(7,160),OPSYM(8,160)
     2  /2HSP,2HNA,2HDA,3,-10752,0,0,261/
C
C       SNSB
C
        DATA OPSYM(1,161),OPSYM(2,161),OPSYM(3,161),OPSYM(4,161),
     1  OPSYM(5,161),OPSYM(6,161),OPSYM(7,161),OPSYM(8,161)
     2  /2HSN,2HSB,2H  ,3,-10240,0,0,261/
C
C       SPINB
C
        DATA OPSYM(1,162),OPSYM(2,162),OPSYM(3,162),OPSYM(4,162),
     1  OPSYM(5,162),OPSYM(6,162),OPSYM(7,162),OPSYM(8,162)
     2  /2HSP,2HIN,2HB ,3,-9728,0,0,261/
C
C       SNSBDA
C
        DATA OPSYM(1,163),OPSYM(2,163),OPSYM(3,163),OPSYM(4,163),
     1  OPSYM(5,163),OPSYM(6,163),OPSYM(7,163),OPSYM(8,163)
     2  /2HSN,2HSB,2HDA,3,-9216,0,0,261/
C
C       SPNBDA
C
        DATA OPSYM(1,164),OPSYM(2,164),OPSYM(3,164),OPSYM(4,164),
     1  OPSYM(5,164),OPSYM(6,164),OPSYM(7,164),OPSYM(8,164)
     2  /2HSP,2HNB,2HDA,3,-8704,0,0,261/
C
C       SFL0
C
        DATA OPSYM(1,165),OPSYM(2,165),OPSYM(3,165),OPSYM(4,165),
     1  OPSYM(5,165),OPSYM(6,165),OPSYM(7,165),OPSYM(8,165)
     2  /2HSF,2HL0,2H  ,3,-8192,0,0,261/
C
C       SFL1
C
        DATA OPSYM(1,166),OPSYM(2,166),OPSYM(3,166),OPSYM(4,166),
     1  OPSYM(5,166),OPSYM(6,166),OPSYM(7,166),OPSYM(8,166)
     2  /2HSF,2HL1,2H  ,3,-7680,0,0,261/
C
C       SFL2
C
        DATA OPSYM(1,167),OPSYM(2,167),OPSYM(3,167),OPSYM(4,167),
     1  OPSYM(5,167),OPSYM(6,167),OPSYM(7,167),OPSYM(8,167)
     2  /2HSF,2HL2,2H  ,3,-7168,0,0,261/
C
C       SFL3
C
        DATA OPSYM(1,168),OPSYM(2,168),OPSYM(3,168),OPSYM(4,168),
     1  OPSYM(5,168),OPSYM(6,168),OPSYM(7,168),OPSYM(8,168)
     2  /2HSF,2HL3,2H  ,3,-6656,0,0,261/
C
C       CFL0
C
        DATA OPSYM(1,169),OPSYM(2,169),OPSYM(3,169),OPSYM(4,169),
     1  OPSYM(5,169),OPSYM(6,169),OPSYM(7,169),OPSYM(8,169)
     2  /2HCF,2HL0,2H  ,3,-6144,0,0,261/
C
C       CFL1
C
        DATA OPSYM(1,170),OPSYM(2,170),OPSYM(3,170),OPSYM(4,170),
     1  OPSYM(5,170),OPSYM(6,170),OPSYM(7,170),OPSYM(8,170)
     2  /2HCF,2HL1,2H  ,3,-5632,0,0,261/
C
C       CFL2
C
        DATA OPSYM(1,171),OPSYM(2,171),OPSYM(3,171),OPSYM(4,171),
     1  OPSYM(5,171),OPSYM(6,171),OPSYM(7,171),OPSYM(8,171)
     2  /2HCF,2HL2,2H  ,3,-5120,0,0,261/
C
C       CFL3
C
        DATA OPSYM(1,172),OPSYM(2,172),OPSYM(3,172),OPSYM(4,172),
     1  OPSYM(5,172),OPSYM(6,172),OPSYM(7,172),OPSYM(8,172)
     2  /2HCF,2HL3,2H  ,3,-4608,0,0,261/
C
C       HALT
C
        DATA OPSYM(1,173),OPSYM(2,173),OPSYM(3,173),OPSYM(4,173),
     1  OPSYM(5,173),OPSYM(6,173),OPSYM(7,173),OPSYM(8,173)
     2  /2HHA,2HLT,2H  ,3,-4096,0,0,261/
C
C       IORST
C
        DATA OPSYM(1,174),OPSYM(2,174),OPSYM(3,174),OPSYM(4,174),
     1  OPSYM(5,174),OPSYM(6,174),OPSYM(7,174),OPSYM(8,174)
     2  /2HIO,2HRS,2HT ,3,-3584,0,0,261/
C
C       INTEN
C
        DATA OPSYM(1,175),OPSYM(2,175),OPSYM(3,175),OPSYM(4,175),
     1  OPSYM(5,175),OPSYM(6,175),OPSYM(7,175),OPSYM(8,175)
     2  /2HIN,2HTE,2HN ,3,-3072,0,0,261/
C
C       INTA
C
        DATA OPSYM(1,176),OPSYM(2,176),OPSYM(3,176),OPSYM(4,176),
     1  OPSYM(5,176),OPSYM(6,176),OPSYM(7,176),OPSYM(8,176)
     2  /2HIN,2HTA,2H  ,3,-2560,0,0,261/
C
C       REFR
C
        DATA OPSYM(1,177),OPSYM(2,177),OPSYM(3,177),OPSYM(4,177),
     1  OPSYM(5,177),OPSYM(6,177),OPSYM(7,177),OPSYM(8,177)
     2  /2HRE,2HFR,2H  ,3,-2048,0,0,261/
C
C       WRTEX
C
        DATA OPSYM(1,178),OPSYM(2,178),OPSYM(3,178),OPSYM(4,178),
     1  OPSYM(5,178),OPSYM(6,178),OPSYM(7,178),OPSYM(8,178)
     2  /2HWR,2HTE,2HX ,3,-1536,0,0,261/
C
C       WRTMAN
C
        DATA OPSYM(1,179),OPSYM(2,179),OPSYM(3,179),OPSYM(4,179),
     1  OPSYM(5,179),OPSYM(6,179),OPSYM(7,179),OPSYM(8,179)
     2  /2HWR,2HTM,2HAN,3,-1024,0,0,261/
C
C       BR
C
        DATA OPSYM(1,180),OPSYM(2,180),OPSYM(3,180),OPSYM(4,180),
     1  OPSYM(5,180),OPSYM(6,180),OPSYM(7,180),OPSYM(8,180)
     2  /2HBR,2H  ,2H  ,0,64,0,0,1030/
C
C       BINTRQ
C
        DATA OPSYM(1,181),OPSYM(2,181),OPSYM(3,181),OPSYM(4,181),
     1  OPSYM(5,181),OPSYM(6,181),OPSYM(7,181),OPSYM(8,181)
     2  /2HBI,2HNT,2HRQ,0,96,0,0,1030/
C
C       BION
C
        DATA OPSYM(1,182),OPSYM(2,182),OPSYM(3,182),OPSYM(4,182),
     1  OPSYM(5,182),OPSYM(6,182),OPSYM(7,182),OPSYM(8,182)
     2  /2HBI,2HON,2H  ,0,128,0,0,1030/
C
C       BIOZ
C
        DATA OPSYM(1,183),OPSYM(2,183),OPSYM(3,183),OPSYM(4,183),
     1  OPSYM(5,183),OPSYM(6,183),OPSYM(7,183),OPSYM(8,183)
     2  /2HBI,2HOZ,2H  ,0,160,0,0,1030/
C
C       BFPE
C
        DATA OPSYM(1,184),OPSYM(2,184),OPSYM(3,184),OPSYM(4,184),
     1  OPSYM(5,184),OPSYM(6,184),OPSYM(7,184),OPSYM(8,184)
     2  /2HBF,2HPE,2H  ,0,192,0,0,1030/
C
C       RETURN
C
        DATA OPSYM(1,185),OPSYM(2,185),OPSYM(3,185),OPSYM(4,185),
     1  OPSYM(5,185),OPSYM(6,185),OPSYM(7,185),OPSYM(8,185)
     2  /2HRE,2HTU,2HRN,0,224,0,0,262/
C
C       BFEQ
C
        DATA OPSYM(1,186),OPSYM(2,186),OPSYM(3,186),OPSYM(4,186),
     1  OPSYM(5,186),OPSYM(6,186),OPSYM(7,186),OPSYM(8,186)
     2  /2HBF,2HEQ,2H  ,0,256,0,0,1030/
C
C       BFNE
C
        DATA OPSYM(1,187),OPSYM(2,187),OPSYM(3,187),OPSYM(4,187),
     1  OPSYM(5,187),OPSYM(6,187),OPSYM(7,187),OPSYM(8,187)
     2  /2HBF,2HNE,2H  ,0,288,0,0,1030/
C
C       BFGE
C
        DATA OPSYM(1,188),OPSYM(2,188),OPSYM(3,188),OPSYM(4,188),
     1  OPSYM(5,188),OPSYM(6,188),OPSYM(7,188),OPSYM(8,188)
     2  /2HBF,2HGE,2H  ,0,320,0,0,1030/
C
C       BFGT
C
        DATA OPSYM(1,189),OPSYM(2,189),OPSYM(3,189),OPSYM(4,189),
     1  OPSYM(5,189),OPSYM(6,189),OPSYM(7,189),OPSYM(8,189)
     2  /2HBF,2HGT,2H  ,0,352,0,0,1030/
C
C       BEQ
C
        DATA OPSYM(1,190),OPSYM(2,190),OPSYM(3,190),OPSYM(4,190),
     1  OPSYM(5,190),OPSYM(6,190),OPSYM(7,190),OPSYM(8,190)
     2  /2HBE,2HQ ,2H  ,0,384,0,0,1030/
C
C       BNE
C
        DATA OPSYM(1,191),OPSYM(2,191),OPSYM(3,191),OPSYM(4,191),
     1  OPSYM(5,191),OPSYM(6,191),OPSYM(7,191),OPSYM(8,191)
     2  /2HBN,2HE ,2H  ,0,416,0,0,1030/
C
C       BGE
C
        DATA OPSYM(1,192),OPSYM(2,192),OPSYM(3,192),OPSYM(4,192),
     1  OPSYM(5,192),OPSYM(6,192),OPSYM(7,192),OPSYM(8,192)
     2  /2HBG,2HE ,2H  ,0,448,0,0,1030/
C
C       BGT
C
        DATA OPSYM(1,193),OPSYM(2,193),OPSYM(3,193),OPSYM(4,193),
     1  OPSYM(5,193),OPSYM(6,193),OPSYM(7,193),OPSYM(8,193)
     2  /2HBG,2HT ,2H  ,0,480,0,0,1030/
C
C       DPX
C
        DATA OPSYM(1,194),OPSYM(2,194),OPSYM(3,194),OPSYM(4,194),
     1  OPSYM(5,194),OPSYM(6,194),OPSYM(7,194),OPSYM(8,194)
     2  /2HDP,2HX ,2H  ,0,0,0,0,3079/
C
C       DPY
C
        DATA OPSYM(1,195),OPSYM(2,195),OPSYM(3,195),OPSYM(4,195),
     1  OPSYM(5,195),OPSYM(6,195),OPSYM(7,195),OPSYM(8,195)
     2  /2HDP,2HY ,2H  ,0,0,0,0,3336/
C
C       DB
C
        DATA OPSYM(1,196),OPSYM(2,196),OPSYM(3,196),OPSYM(4,196),
     1  OPSYM(5,196),OPSYM(6,196),OPSYM(7,196),OPSYM(8,196)
     2  /2HDB,2H  ,2H  ,0,0,0,0,2560/
C
C       FMUL
C
        DATA OPSYM(1,197),OPSYM(2,197),OPSYM(3,197),OPSYM(4,197),
     1  OPSYM(5,197),OPSYM(6,197),OPSYM(7,197),OPSYM(8,197)
     2  /2HFM,2HUL,2H  ,0,0,0,4096,2314/
C
C       MI
C
        DATA OPSYM(1,198),OPSYM(2,198),OPSYM(3,198),OPSYM(4,198),
     1  OPSYM(5,198),OPSYM(6,198),OPSYM(7,198),OPSYM(8,198)
     2  /2HMI,2H  ,2H  ,0,0,0,0,3851/
C
C       WPS2
C
        DATA OPSYM(1,199),OPSYM(2,199),OPSYM(3,199),OPSYM(4,199),
     1  OPSYM(5,199),OPSYM(6,199),OPSYM(7,199),OPSYM(8,199)
     2  /2HWP,2HS2,2H  ,4716,0,0,0,1540/
C
C       INCMA
C
        DATA OPSYM(1,200),OPSYM(2,200),OPSYM(3,200),OPSYM(4,200),
     1  OPSYM(5,200),OPSYM(6,200),OPSYM(7,200),OPSYM(8,200)
     2  /2HIN,2HCM,2HA ,0,0,0,16,268/
C
C       DECMA
C
        DATA OPSYM(1,201),OPSYM(2,201),OPSYM(3,201),OPSYM(4,201),
     1  OPSYM(5,201),OPSYM(6,201),OPSYM(7,201),OPSYM(8,201)
     2  /2HDE,2HCM,2HA ,0,0,0,32,268/
C
C       SETMA
C
        DATA OPSYM(1,202),OPSYM(2,202),OPSYM(3,202),OPSYM(4,202),
     1  OPSYM(5,202),OPSYM(6,202),OPSYM(7,202),OPSYM(8,202)
     2  /2HSE,2HTM,2HA ,0,0,0,48,268/
C
C       INCTMA
C
        DATA OPSYM(1,203),OPSYM(2,203),OPSYM(3,203),OPSYM(4,203),
     1  OPSYM(5,203),OPSYM(6,203),OPSYM(7,203),OPSYM(8,203)
     2  /2HIN,2HCT,2HMA,0,0,0,1,269/
C
C       DECTMA
C
        DATA OPSYM(1,204),OPSYM(2,204),OPSYM(3,204),OPSYM(4,204),
     1  OPSYM(5,204),OPSYM(6,204),OPSYM(7,204),OPSYM(8,204)
     2  /2HDE,2HCT,2HMA,0,0,0,2,269/
C
C       SETTMA
C
        DATA OPSYM(1,205),OPSYM(2,205),OPSYM(3,205),OPSYM(4,205),
     1  OPSYM(5,205),OPSYM(6,205),OPSYM(7,205),OPSYM(8,205)
     2  /2HSE,2HTT,2HMA,0,0,0,3,269/
C
C       INCDPA
C
        DATA OPSYM(1,206),OPSYM(2,206),OPSYM(3,206),OPSYM(4,206),
     1  OPSYM(5,206),OPSYM(6,206),OPSYM(7,206),OPSYM(8,206)
     2  /2HIN,2HCD,2HPA,0,0,0,4,270/
C
C       DECDPA
C
        DATA OPSYM(1,207),OPSYM(2,207),OPSYM(3,207),OPSYM(4,207),
     1  OPSYM(5,207),OPSYM(6,207),OPSYM(7,207),OPSYM(8,207)
     2  /2HDE,2HCD,2HPA,0,0,0,8,270/
C
C       SETDPA
C
        DATA OPSYM(1,208),OPSYM(2,208),OPSYM(3,208),OPSYM(4,208),
     1  OPSYM(5,208),OPSYM(6,208),OPSYM(7,208),OPSYM(8,208)
     2  /2HSE,2HTD,2HPA,0,0,0,12,270/
C
C       LDSPI
C
        DATA OPSYM(1,209),OPSYM(2,209),OPSYM(3,209),OPSYM(4,209),
     1  OPSYM(5,209),OPSYM(6,209),OPSYM(7,209),OPSYM(8,209)
     2  /2HLD,2HSP,2HI ,896,0,0,0,769/
C
C       WRTHM
C
        DATA OPSYM(1,210),OPSYM(2,210),OPSYM(3,210),OPSYM(4,210),
     1  OPSYM(5,210),OPSYM(6,210),OPSYM(7,210),OPSYM(8,210)
     2  /2HWR,2HTH,2HM ,3,-1024,0,0,261/
C
C       FSCALE
C
        DATA OPSYM(1,211),OPSYM(2,211),OPSYM(3,211),OPSYM(4,211),
     1  OPSYM(5,211),OPSYM(6,211),OPSYM(7,211),OPSYM(8,211)
     2  /2HFS,2HCA,2HLE,0,24576,0,0,2053/
C
C       RDPI
C
        DATA OPSYM(1,212),OPSYM(2,212),OPSYM(3,212),OPSYM(4,212),
     1  OPSYM(5,212),OPSYM(6,212),OPSYM(7,212),OPSYM(8,212)
     2  /2HRD,2HPI,2H  ,4388,0,0,0,257/
C
C
C
        DATA OPSYM(1,213),OPSYM(2,213),OPSYM(3,213),OPSYM(4,213),
     1  OPSYM(5,213),OPSYM(6,213),OPSYM(7,213),OPSYM(8,213)
     2  /0,0,0,0,0,0,0,0/
C
C       STATMA
C
        DATA OPSYM(1,214),OPSYM(2,214),OPSYM(3,214),OPSYM(4,214),
     1  OPSYM(5,214),OPSYM(6,214),OPSYM(7,214),OPSYM(8,214)
     2  /2HST,2HAT,2HMA,3,-19968,0,0,261/
C
C       CLRMOD
C
        DATA OPSYM(1,215),OPSYM(2,215),OPSYM(3,215),OPSYM(4,215),
     1  OPSYM(5,215),OPSYM(6,215),OPSYM(7,215),OPSYM(8,215)
     2  /2HCL,2HRM,2HOD,4364,0,0,0,257/
C
C       DBLSW
C
        DATA OPSYM(1,216),OPSYM(2,216),OPSYM(3,216),OPSYM(4,216),
     1  OPSYM(5,216),OPSYM(6,216),OPSYM(7,216),OPSYM(8,216)
     2  /2HDB,2HLS,2HW ,4396,0,0,0,257/
C
C       ENTINT
C
        DATA OPSYM(1,217),OPSYM(2,217),OPSYM(3,217),OPSYM(4,217),
     1  OPSYM(5,217),OPSYM(6,217),OPSYM(7,217),OPSYM(8,217)
     2  /2HEN,2HTI,2HNT,4376,0,0,0,257/
C
C       EXINT
C
        DATA OPSYM(1,218),OPSYM(2,218),OPSYM(3,218),OPSYM(4,218),
     1  OPSYM(5,218),OPSYM(6,218),OPSYM(7,218),OPSYM(8,218)
     2  /2HEX,2HIN,2HT ,4412,0,0,0,257/
C
C       FPA1
C
        DATA OPSYM(1,219),OPSYM(2,219),OPSYM(3,219),OPSYM(4,219),
     1  OPSYM(5,219),OPSYM(6,219),OPSYM(7,219),OPSYM(8,219)
     2  /2HFP,2HA1,2H  ,1,24576,0,0,4101/
C
C       FPA2
C
        DATA OPSYM(1,220),OPSYM(2,220),OPSYM(3,220),OPSYM(4,220),
     1  OPSYM(5,220),OPSYM(6,220),OPSYM(7,220),OPSYM(8,220)
     2  /2HFP,2HA2,2H  ,1,28672,0,0,4101/
C
C       IOFF
C
        DATA OPSYM(1,221),OPSYM(2,221),OPSYM(3,221),OPSYM(4,221),
     1  OPSYM(5,221),OPSYM(6,221),OPSYM(7,221),OPSYM(8,221)
     2  /2HIO,2HFF,2H  ,4356,0,0,0,257/
C
C       IOINTA
C
        DATA OPSYM(1,222),OPSYM(2,222),OPSYM(3,222),OPSYM(4,222),
     1  OPSYM(5,222),OPSYM(6,222),OPSYM(7,222),OPSYM(8,222)
     2  /2HIO,2HIN,2HTA,3,-512,0,0,261/
C
C       ION
C
        DATA OPSYM(1,223),OPSYM(2,223),OPSYM(3,223),OPSYM(4,223),
     1  OPSYM(5,223),OPSYM(6,223),OPSYM(7,223),OPSYM(8,223)
     2  /2HIO,2HN ,2H  ,4352,0,0,0,257/
C
C       LDOMA
C
        DATA OPSYM(1,224),OPSYM(2,224),OPSYM(3,224),OPSYM(4,224),
     1  OPSYM(5,224),OPSYM(6,224),OPSYM(7,224),OPSYM(8,224)
     2  /2HLD,2HOM,2HA ,3,-19456,0,0,261/
C
C       PN2DBL
C
        DATA OPSYM(1,225),OPSYM(2,225),OPSYM(3,225),OPSYM(4,225),
     1  OPSYM(5,225),OPSYM(6,225),OPSYM(7,225),OPSYM(8,225)
     2  /2HPN,2H2D,2HBL,4400,0,0,0,257/
C
C       ROMA
C
        DATA OPSYM(1,226),OPSYM(2,226),OPSYM(3,226),OPSYM(4,226),
     1  OPSYM(5,226),OPSYM(6,226),OPSYM(7,226),OPSYM(8,226)
     2  /2HRO,2HMA,2H  ,3,-18944,0,0,261/
C
C       SELMA
C
        DATA OPSYM(1,227),OPSYM(2,227),OPSYM(3,227),OPSYM(4,227),
     1  OPSYM(5,227),OPSYM(6,227),OPSYM(7,227),OPSYM(8,227)
     2  /2HSE,2HLM,2HA ,4368,0,0,0,257/
C
C       SELSMA
C
        DATA OPSYM(1,228),OPSYM(2,228),OPSYM(3,228),OPSYM(4,228),
     1  OPSYM(5,228),OPSYM(6,228),OPSYM(7,228),OPSYM(8,228)
     2  /2HSE,2HLS,2HMA,4372,0,0,0,257/
C
C       SETMOD
C
        DATA OPSYM(1,229),OPSYM(2,229),OPSYM(3,229),OPSYM(4,229),
     1  OPSYM(5,229),OPSYM(6,229),OPSYM(7,229),OPSYM(8,229)
     2  /2HSE,2HTM,2HOD,4360,0,0,0,257/
C
C       TRAP
C
        DATA OPSYM(1,230),OPSYM(2,230),OPSYM(3,230),OPSYM(4,230),
     1  OPSYM(5,230),OPSYM(6,230),OPSYM(7,230),OPSYM(8,230)
     2  /2HTR,2HAP,2H  ,4384,0,0,0,257/
C
C       WDPI
C
        DATA OPSYM(1,231),OPSYM(2,231),OPSYM(3,231),OPSYM(4,231),
     1  OPSYM(5,231),OPSYM(6,231),OPSYM(7,231),OPSYM(8,231)
     2  /2HWD,2HPI,2H  ,4392,0,0,0,257/
        END
C+++    ERRMES
C****** ERRMES = ADD ERR MESS. NUMBER TO LIST = REL.  1.00 , 09/01/79
C
        SUBROUTINE ERRMES (MESNUM)
C
        INTEGER MESNUM
C
C       THIS ROUTINE SAVES UP TO 12 ERROR MESSAGE NUMBERS FOR
C       LATER OUTPUT BY THE SNDMES ROUTINE.
C
C       CALL:   MESNUM = NO. SPEC'ING A MESSAGE
C
C       RETURNS:  ERRCNT=ERRCNT+1
C
C       VARIABLES:
C
C       ERNUMS(12,2) = ERROR MESSAGE DESIGNATORS ARE STORED HERE TILL PRINT TIME
C                      THE FIRST ELEMENT IS THE MESS. NUMBER, THE SECOND IS THE
C                      LINE NUMBER THAT CONTAINED THE ERROR.
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
        IF (ERRCNT .EQ. 12) RETURN
        ERRCNT=ERRCNT+1
        ERNUMS(ERRCNT,1)=MESNUM
        ERNUMS(ERRCNT,2)=LINNUM
        RETURN
        END
C+++    FPGET
C****** FPGET = GET A FLOATING POINT NUMBER = REL.  1.00 , 09/01/79
C
        SUBROUTINE FPGET (NERR)
C
C       GETS A FLOATING POINT NUMBER FROM A SOURCE LINE
C         AND PUTS IT RIGHT JUSTIFIED INTO A PROGRAM WORD SO IT CAN
C         BE READ BY A "RPSF" INSTRUCTION
C
        DOUBLE PRECISION ACCUM,DIG,PTEN
C
        INTEGER IEXP,KTW,IPAR1,IPAR2,IPAR3,IPAR4,I2,NERR,L1
        INTEGER KTX
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
        ACCUM=0.0D0
        IEXP=0
        KTW=0
        KTX=0
        NERR = 0
C       GET FIRST CHAR
        L1=LIN(NXC)
        NXC=NXC+1
C       IS CHARACTER A PLUS, IF SO IGNORE
        IF (L1.EQ.CHARS(4)) GO TO 200
C       IS CHAR A MINUS
        IF (L1-CHARS(5)) 400,100,400
C       MINUS FOUND, STORE FLAG
100     KTW=1
C       SKIP ANY BLANK WHICH FOLLOWS
200     L1=LIN(NXC)
        NXC=NXC+1
        IF (L1-CHARS(1)) 400,300,400
C       GET NEXT DIGIT
300     L1=LIN(NXC)
        NXC=NXC+1
C       IS CHAR A DIGIT
400     IF (L1-CHARS(32)) 700,600,500
500     IF (L1-CHARS(33)) 600,600,700
C       GOT ANOTHER DIGIT, ADD IT ONTO ACCUM
600     CONTINUE
        DIG=L1-CHARS(32)
        ACCUM=ACCUM*10.D0+DIG
        GOTO 300
C
C       CHAR NOT A DIGIT, CHECK FOR DECIMAL, E, OR CRT
700     IF (L1-CHARS(8)) 800,1100,800
800     IF(L1-CHARS(27)) 900,1500,900
900     IF(L1-CHARS(3)) 1000,2500,1000
1000    CALL ERRMES (31)
        NERR = 1
        GOTO 2500
C
C       PERIOD FOUND, START PROCESSING FRACTIONAL PART
1100    PTEN=1.0D0
C       GET NEXT CHAR
1200    L1=LIN(NXC)
        NXC=NXC+1
C       IS CHAR A DIGIT
        IF (L1-CHARS(32)) 800,1400,1300
1300    IF (L1-CHARS(33)) 1400,1400,800
C       ADD THIS VALUE TO ACCUM
1400    PTEN=PTEN/10.0D0
        DIG=L1-CHARS(32)
        ACCUM=ACCUM+PTEN*DIG
        GOTO 1200
C
C
C       E READ, GET EXPONENT VALUE
1500    L1=LIN(NXC)
        NXC=NXC+1
        IF(L1-CHARS(1)) 1600,1500,1600
C       CHECK FOR PLUS
1600    IF (L1.EQ.CHARS(4)) GO TO 1800
C       CHECK FOR MINUS
        IF (L1-CHARS(5)) 1900,1700,1900
1700    KTX=1
1800    L1=LIN(NXC)
        NXC=NXC+1
C       IS IT A DIGIT
1900    IF (L1-CHARS(32)) 2200,2100,2000
2000    IF (L1-CHARS(33)) 2100,2100,2200
C       YES, A DIGIT
2100    CONTINUE
        DIG = L1-CHARS(32)
        IEXP=IEXP*10+DIG
        GOTO 1800
C       NOT NUMBER SHOULD BE A CRT
2200    IF (L1-CHARS(3)) 2300,2400,2300
2300    CALL ERRMES (31)
        NERR = 1
2400    IF (KTX.EQ.1) IEXP=-IEXP
        ACCUM=ACCUM*10.0D0**IEXP
2500    CONTINUE
C
C       KTW STILL CONTAINS SIGN OF NUMBER
C       VALUE IN ACCUM, PROCESS TO AP FORMAT
C       CHECK FOR ZERO
        IF (ACCUM) 5000,6500,5000
C       MULTIPLY BY POWERS OF 2 UNTIL ACCUM VALUE BETWEEN
C               0.5 AND 0.99999999
5000    IEXP=512
5100    IF (ACCUM.GE.1.0D0) GOTO 5300
5200    IF (ACCUM.GE.0.5D0) GOTO 5400
C       MUST MAKE THINGS LARGER
        ACCUM=ACCUM*2.0D0
        IEXP=IEXP-1
        GOTO 5200
C       WE MUST MAKE THINGS SMALLER
5300    ACCUM=ACCUM/2.0D0
        IEXP=IEXP+1
        GOTO 5100
C
C       EXPONENT PART COMPLETE, NOW WORK ON THE MANTISSA
C       28 BITS OF 2'S COMPLEMENT
C
C       NOW PROCEED WITH BREAKING UP FOR AP WORD
C       SHIFT OUT ELEVEN BITS
5400    ACCUM=ACCUM*2048.0D0
        IPAR1=ACCUM
        DIG=IPAR1
C       SHIFT OUT 1 BIT
        ACCUM=(ACCUM-DIG)*2.0D0
        IPAR2=ACCUM
        DIG=IPAR2
C       SHIFT OUT 15 BITS
        ACCUM=(ACCUM-DIG)*32768.0D0
        IPAR3=ACCUM
        DIG=IPAR3
C       NOW GET 14 MORE BITS FOR ROUNDING PURPOSES
        IPAR4=(ACCUM-DIG)*16384.0D0
C       HERE WE DO A CONVERGENT ROUND, I.E. A REMAINDER OF EXACTLY 0.5
C       ROUNDS DOWN
C       FIRST, WE SEE IF THERE IS ANY CARRY OUT OF THE REMAINDER
        I2=(IPAR4+8191)/16384
C       IF IPAR3 IS 32767 AND WE HAVE A CARRY FROM THE REMAINDER, THEN
C       WE PROPIGATE THE CARRY INTO IPAR2
        IF (I2.EQ.1.AND.IPAR3.EQ.32767) GO TO 5500
C       OTHERWISE WE ADD THE CARRY TO IPAR3
        IPAR3=IPAR3+I2
        GO TO 5600
C       ADD THE CARRY FROM IPAR3 INTO IPAR2
5500    IPAR3=0
        I2=(IPAR2+1)/2
        IPAR2=MOD(IPAR2+1,2)
C       ADD ANY CARRY FROM IPAR2 INTO IPAR1
        IPAR1=IPAR1+I2
C       IF IPAR1 OVERFLOWS, SET THE MANTISSA TO 0.5 AND INCREMENT THE
C         EXPONENT
        IF (IPAR1.NE.2048) GO TO 5600
        IPAR2=0
        IPAR1=1024
        IEXP=IEXP+1
5600    CONTINUE
C       NOW THAT WE HAVE BOTH THE EXPONENT AND THE MANTISSA, WE CAN
C         MERGE THEM TOGETHER INTO THE RIGHT MOST 38 BITS OF A PROGRAM
C         SOURCE WORD
C       MERGE IN EXPONENT VALUE
C       SHIFT OUT SIX BITS FOR 2ND WORD
        CODE(2)=IEXP/16
        I2=MOD(IEXP,16)
        IF (I2.LT.8) GOTO 5700
        CODE(3)=ISBT
        I2=MOD(IEXP,8)
C       NOW SHIFT INTO POSITION AND MERGE
C       SHIFT TWELVE PLACES
5700    I2=I2*4096
        CODE(3)=IOR16(CODE(3),I2)
C
C       TEST SIGN OF NUMBER, IF POSITIVE, MERGE BITS AND EXIT
        IF (KTW) 5800,5800,6100
5800    CODE(3)=IOR16(CODE(3),IPAR1)
        IF (IPAR2) 6000,6000,5900
5900    CODE(4)=IOR16(CODE(4),ISBT)
6000    CODE(4)=IOR16(CODE(4),IPAR3)
        GOTO 6500
C
C       CHANGE SIGN OF MANTISSA AND EXIT
C       WE HAVE TO TWO'S COMPLEMENT THE COMBINED (IPAR1,IPAR2,IPAR3)
C       TEST LOW PART FOR ZERO
6100    IF (IPAR3.NE.0) GO TO 6400
C       LOW PART ZERO, TEST MIDDLE BIT FOR ZERO
        IF (IPAR2.EQ.0) GO TO 6300
C       LOW PART ZERO, MIDDLE BIT A ONE, LEAVE IT AND ONE'S COMPLEMENT
C         UPPER PART
        CODE(4)=ISBT
6200    IPAR1=IPAR1+1
C       ONLY UPPER PART NON ZERO, TWO'S COMPLEMENT IT
6300    CODE(3)=IOR16(CODE(3),4096-IPAR1)
        GO TO 6500
C
C       LOW PART IS NON-ZERO, TWO'S COMPLEMENT IT, ONE'S COMPLEMENT
C         MIDDLE BIT AND UPPER PART
6400    CODE(4)=32767-IPAR3+1
        IF (IPAR2.EQ.0) CODE(4)=IOR16(CODE(4),ISBT)
        GO TO 6200
C
C
6500    RETURN
        END
C+++    RTOE
C****** RTOE = CONVERTS REAL NUMBER FORMAT = REL.  1.00 , 09/01/79
C
        SUBROUTINE RTOE
C
C       THIS ROUTINE CONVERTS A VARIABLE INPUT FORMAT FOR A FLOATING
C       POINT NUMBER TO A STANDARD FORM FOR THE OBJECT MODULE.
C
C
        INTEGER I,SGN,IEXP,RES,POSIT,IPOSIT,ID,CHR,TEMP(6),NUM,ZFLAG
        INTEGER BUF(16)
        INTEGER TYPCHR
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
C       INITIALIZE SOME CONSTANTS
C
        ZFLAG = 0
        SGN = 1
        IEXP = 0
        RES = 0
C
C       BLANK OUT BUFFER
C
        DO 10 I=1,16
        BUF(I) = CHARS(1)
10      CONTINUE
C
C       GET SIGN OF NUMBER AND PLACE IN BUFFER
C
        BUF(1) = CHARS(4)
        POSIT = 0
20      CONTINUE
        POSIT = POSIT + 1
        CHR = FIELD(POSIT)
        IF (CHR .EQ. CHARS(1)) GOTO 20
        ID = TYPCHR (CHR)
        IF ((ID .EQ. -1) .OR. (ID .EQ. -2)) GOTO 30
        IF ((CHR .NE. CHARS(4)) .AND. (CHR .NE. CHARS(5))) GOTO 30
        BUF(1) = CHR
        POSIT = POSIT + 1
C
C       INITIALIZE BUFFER AND POINTERS
C
30      CONTINUE
        BUF(2) = CHARS(32)
        IPOSIT = 2
        CHR = FIELD(POSIT)
        POSIT = POSIT + 1
        IF (CHR .EQ. CHARS(1)) GOTO 30
C
C       DELETE LEADING ZEROS.
C
40      CONTINUE
        IF (CHR .NE. CHARS(32)) GOTO 50
42      CONTINUE
        CHR = FIELD(POSIT)
        IF (CHR .EQ. CHARS(3)) GOTO 205
        POSIT = POSIT + 1
        IF (CHR .EQ. CHARS(1)) GOTO 42
        IF (TYPCHR (CHR) .NE. -2) GOTO 100
        GOTO 40
C
C       DO WE HAVE A DIGIT?
C
50      CONTINUE
        IF (TYPCHR (CHR) .NE. -2) GOTO 100
C
C       PROCESS INTEGER PART OF NUMBER
C
        ZFLAG = 1
        BUF(IPOSIT) = CHR
        IPOSIT = IPOSIT + 1
        IF (IPOSIT .LE. 11) GOTO 70
        CALL ERRMES (28)
        IEXP = 1
C
C       GET NEXT CHARACTER
C
70      CONTINUE
        CHR = FIELD(POSIT)
        IF (CHR .EQ. CHARS(3)) GOTO 205
        POSIT = POSIT + 1
        IF (CHR .EQ. CHARS(1)) GOTO 70
        GOTO 50
C
C       DO WE HAVE A LETTER?
C
100     CONTINUE
        IF (TYPCHR (CHR) .NE. -1) GOTO 200
C
C       YES, IS IT AN 'E'
C
        IF (CHR .NE. CHARS(27)) GOTO 300
        IEXP = IPOSIT - 11
105     CONTINUE
        CHR = FIELD(POSIT)
        POSIT = POSIT + 1
        IF (CHR .EQ. CHARS(1)) GOTO 105
        SGN = 1
C
C       LOOK FOR A PLUS OR MINUS SIGN
C
        IF (CHR .EQ. CHARS(4)) GOTO 110
        IF (CHR .EQ. CHARS(5)) SGN = -1
        IF (CHR .NE. CHARS(5)) GOTO 120
110     CONTINUE
        CHR = FIELD(POSIT)
        POSIT = POSIT + 1
        IF (CHR .EQ. CHARS(1)) GOTO 110
C
C       FILL BUFFER FROM CURRENT POSITION TO POS 11 WITH ZEROS
C
120     CONTINUE
        DO 130 I=IPOSIT,11
        BUF(I) = CHARS(32)
130     CONTINUE
C
C       IS NEXT CHARACTER A DIGIT?
C
140     CONTINUE
        IF (CHR .EQ. CHARS(3)) GOTO 150
        IF (TYPCHR (CHR) .NE. -2) GOTO 150
        NUM = 0
        DO 145 I=1,10
        IF (DIGITS(I) .NE. CHR) GOTO 145
        NUM = I-1
        GOTO 147
145     CONTINUE
147     CONTINUE
        RES = RES * 10 + NUM
        CHR = FIELD(POSIT)
        POSIT = POSIT + 1
        GOTO 140
C
C       COMPUTE EXPONENT VALUE
C
150     CONTINUE
        IEXP = IEXP + SGN * RES
        IF (ZFLAG .EQ. 0) IEXP = 0
C
C       IS EXPONENT IN RANGE?
C
        IF ((-1000 .GT. IEXP) .OR. (IEXP .GT. 1000)) GOTO 300
C
C       YES
C
        BUF(11) = CHARS(27)
        BUF(12) = CHARS(4)
        IF (IEXP .LT. 0) BUF(12) = CHARS(5)
        IEXP = IABS (IEXP)
C
C       SINCE ITAS WILL RIGHT JUSTIFY A STRING, WE MUST LEFT JUSTIFY
C       THE RETURNED STRING AS WE PLACE IT IN THE BUFFER.
C
        IPOSIT = 13
        CALL ITAS (IEXP,TEMP,10)
        DO 170 I=1,6
        IF (TEMP(I) .EQ. CHARS(1)) GOTO 170
        BUF(IPOSIT) = TEMP(I)
        IPOSIT = IPOSIT + 1
170     CONTINUE
C
C       COPY BUF TO FIELD
C
        DO 190 I=1,16
        FIELD(I) = BUF(I)
190     CONTINUE
        RETURN
C
C       LOOKING FOR A DOT
C
200     CONTINUE
        IF (CHR .NE. CHARS(8)) GOTO 230
C
C       WE COME HERE IF WE HAD AN INTEGER ONLY (NO DOT IN FIELD)
C
205     CONTINUE
        IEXP = IPOSIT - 11
C
C       REPLACE BUF FROM CURRENT POS TO LOC 11 WITH ZEROS
C
        DO 210 I=IPOSIT,10
        BUF(I) = CHARS(32)
210     CONTINUE
C
C       GET NEXT CHARACTER
C
220     CONTINUE
        CHR = FIELD(POSIT)
        IF (CHR .EQ. CHARS(3)) GOTO 150
        POSIT = POSIT + 1
        IF (CHR .EQ. CHARS(1)) GOTO 220
C
C       IS CHR A DIGIT?
C
230     CONTINUE
        IF (TYPCHR (CHR) .EQ. -2) GOTO 240
C
C       IS CHR A LETTER?
C
        IF (TYPCHR (CHR) .NE. -1) GOTO 150
C
C       IS CHR AN 'E'
C
        IF (CHR .NE. CHARS(27)) GOTO 300
        GOTO 105
C
C       IS THIS THE FIRST DIGIT WE HAVE ENCOUNTERED?
C
240     CONTINUE
        IF ((CHR .EQ. CHARS(32)) .AND. (IPOSIT .EQ. 2)) GOTO 250
C
C       PLACE CHAR IN BUFFER
C
        ZFLAG = 1
        BUF(IPOSIT) = CHR
        IPOSIT = IPOSIT + 1
        IF ((IPOSIT .GT. 11) .AND.
     1  (CHR .NE. CHARS(32))) CALL ERRMES (28)
        GOTO 220
C
C       THIS WAS A LEADING ZERO AFTER THE DECIMAL POINT
C
250     CONTINUE
        IEXP = IEXP - 1
        GOTO 220
C
C       ERROR OCCURRED - INVALID NUMBER
C
300     CONTINUE
        CALL ERRMES (31)
        RETURN
        END
C+++    TYPCHR
C****** TYPCHR = DETERMINES TYPE OF CHARACTER = &REV
C
C
        INTEGER FUNCTION TYPCHR (CHR)
        INTEGER CHR
C
C       THIS SUBROUTINE DETERMINES THE TYPE OF CHARACTER WHICH HAS BEEN
C       PASSED TO IT.
C
C       RETURNS:
C
C               -1      = ALPHABETIC CHARACTER
C               -2      = NUMERIC CHARACTER
C                0      = OTHERWISE
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
        TYPCHR = 0
C
C       DETERMINE IF CHR IS A NUMBER
C
        IF (CHR - CHARS(32)) 30,20,10
10      CONTINUE
        IF (CHR - CHARS(33)) 20,20,30
C
C       IS A NUMBER
C
20      CONTINUE
        TYPCHR = -2
        RETURN
C
C       DETERMINE IF CHR IS A LETTER.
C
30      CONTINUE
        IF (CHR - CHARS(34)) 60,50,40
40      CONTINUE
        IF (CHR - CHARS(35)) 50,50,60
C
C       IS A LETTER
C
50      CONTINUE
        TYPCHR = -1
60      CONTINUE
        RETURN
        END
C+++    FSYM
C****** FSYM = FIND OP-CODE SYMBOL = REL.  1.00 , 09/01/79
C
        SUBROUTINE FSYM
C
        INTEGER K1,ITEM
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C       NORMAL CALL CHECKS MAIN BODY OF SYSTEM SYMBOLS
C       BREAKS OUT ARGUMENT CLASS TO VARIABLE IARG
C       THIS VARIABLE (IARG) DIRECTS TO TYPE OF PROCESSING REQUIRED
C       ALSO BREAKS OUT MSKTYP FROM TABLE, MASK TYPE (INDEX TO MASK TABLE)
C       TABPTR, SYMBOL TABLE POINTER (SECOND SUBSCRIPT FOR LOCATED ENTRY)
C       IF TABPTR IS RETURNED 0, THEN FAILURE TO LOCATE SYMBOL
        DO 20 K1=1,NOPSYM
        IF(SYM(1).NE.OPSYM(1,K1)) GOTO 20
        IF(SYM(2).NE.OPSYM(2,K1)) GOTO 20
        IF(SYM(3).NE.OPSYM(3,K1)) GOTO 20
C       SUCCESS, A MATCH
        TABPTR=K1
        GOTO 30
20      CONTINUE
C       FAILURE TO LOCATE SYMBOL
        TABPTR=0
        RETURN
C       ASSUMES NO SIGN BIT (7 BITS AT MOST IN IARG)
C       PULL OUT VALUES FOR MASK TYPE AND HANDLING TYPE
30      ITEM=OPSYM(8,TABPTR)
        IARG=ITEM/256
        MSKTYP=ITEM-IARG*256
        RETURN
        END
C+++    FUSYM
C****** FUSYM = FIND USER SYMBOL = REL.  1.00 , 09/01/79
C
        SUBROUTINE FUSYM
C
        INTEGER J
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C       FIND USER SYMBOL, LOOKS IN USER TABLES TO SEE
C       IF SYMBOL IS ALREADY ENTERED THERE DURING FIRST PASS
C       NUSYM IS NUMBER OF SYMBOLS CURRENTLY DEFINED
C       IF TABPTR=0, FAIL RETURN
C
C
        J=0
C
C
C       A REGULAR USER DEFINED SYMBOL
C
C
C       FAIL IF NO USER SYMBOLS IN THE TABLE
        IF (NUSYM.LT.1) GO TO 30
C
C       DO THE TABLE SEARCH
        DO 20 J=1,NUSYM
        IF (SYM(1).NE.USRSYM(J,1)) GO TO 20
        IF (SYM(2).NE.USRSYM(J,2)) GO TO 20
        IF (SYM(3).NE.USRSYM(J,3)) GO TO 20
C
C       SUCCESS, A MATCH
        TABPTR=J
        GO TO 40
C
20      CONTINUE
C
C
C       SYMBOL NOT FOUND
30      TABPTR=0
40      RETURN
        END
C+++    GARG
C****** GARG = GET ARGUEMENT = REL.  1.00 , 09/01/79
C
        SUBROUTINE GARG(L1,L2,KVAL)
C
        INTEGER J1,I,IV,JX,KCHAR,EXTPTR
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C       PTR=0 IS UNSUCCESSFUL RETURN
C       PTR=-1, UNSUCCESSFUL RETURN, ERR MESS ALREADY SENT
C       OTHERWISE, PTR POINTS TO ARGUMENT FOUND
        CALL GSYM
        IF(ALFLG)10,20,20
20      DO 30 J1=L1,L2
        IF (SYM(1).NE.ARGSYM(1,J1))GOTO 30
        IF (SYM(2).NE.ARGSYM(2,J1))GOTO 30
        IF(SYM(3).NE.BLANK)GOTO 30
C       MATCH FOUND
        PTR=J1
        GOTO 40
30      CONTINUE
C       IF FALL THROUGH LOOP, FAILURE TO MATCH ARG
10      PTR=0
        RETURN
C       MATCH FOUND
40      KVAL=ARGSYM(3,PTR)
        IF(ARGSYM(4,PTR)) 45,45,50
45      RETURN
C       NEED SPECIAL PROCESSING
50      I=ARGSYM(4,PTR)
        GOTO (60,90),I
C       DPY ARGUMENT
C       WAS BREAK CHAR A LEFT PAREN
60      IF (IBRF-11) 62,75,62
C       IMPLIED ZERO
62      IV=32
C       CHECK IF VALUE CURRENTLY STORED IN YR
63      JX=IAND16(CODMSK(3),56)
        IF(JX) 70,64,70
C       NO VALUE STORED, ADD CURRENT VALUE AND RETURN
64      CODMSK(3)=IOR16(CODMSK(3),56)
        CODE(3)=IOR16(CODE(3),IV)
66      RETURN
C       ALREADY YR VALUE, IS IT THE SAME
70      JX=IAND16(CODE(3),56)
        IF(JX-IV) 72,66,72
72      CALL ERRMES (8)
        PTR=-1
        RETURN
C       WAS LEFT PAREN, GET VALUE
75      CONTINUE
        NXC = NXC - 1
        CALL EXFLDS (CHARS(11),CHARS(12),0,1)
        FLDFLG = 1
        CALL GVAL (0,EXTPTR)
        FLDFLG = 0
        IF (GVLFLG) 140,4078,4078
C
C       CHECK IF BREAK CHAR IS OK, IF NOT SEND ERROR MESSAGE BUT CONTINUE
C       PROCESSING.
C
4078    CONTINUE
        IF ((IBRF .NE. 0) .AND. (IBRF .NE. 14) .AND. (IBRF .NE. 3)
     1  .AND. (IBRF .NE. 11) .AND. (IBRF .NE. 15)) CALL ERRMES (29)
C
C       CONTINUE PROCESSING ANYWAY
C       CHECK LIMITS OF VALUE
        IF (IVAL+4) 84,80,80
80      IF (IVAL-3) 82,82,84
C       ADD FOUR AND SHIFT 3 PLACES TO LEFT
82      IV=(IVAL+4)*8
        GOTO 63
84      CALL ERRMES (24)
        PTR=-1
        RETURN
C       DPX ARGUMENT
C       WAS BREAK CHAR A LEFT PAREN
90      IF (IBRF-11) 92,105,92
C       IMPLIED ZERO
92      IV=256
C       CHECK IF VALUE CURRENTLY IN XR
93      JX=IAND16(CODMSK(3),448)
        IF(JX) 100,94,100
C       NO VALUE STORED, ADD CURRENT VALUE AND RETURN
94      CODMSK(3)=IOR16(CODMSK(3),448)
        CODE(3)=IOR16(CODE(3),IV)
96      RETURN
C       ALREADY HAVE XR VALUE, IS IT THE SAME
100     JX=IAND16(CODE(3),448)
        IF(JX-IV) 72,96,72
C       WAS LEFT PAREN, GET VALUE
105     CONTINUE
        NXC = NXC - 1
        CALL EXFLDS (CHARS(11),CHARS(12),0,1)
        FLDFLG = 1
        CALL GVAL (0,EXTPTR)
        FLDFLG = 0
        IF (GVLFLG) 140,4108,4108
C       READ NEXT CHAR WHICH SHOULD BE A COMMA, SPACE ALLOWABLE
C
C       CHECK IF BREAK CHAR IS OK, IF NOT SEND ERROR MESSAGE BUT CONTINUE
C       PROCESSING.
C
4108    CONTINUE
        IF ((IBRF .NE. 0) .AND. (IBRF .NE. 14) .AND. (IBRF .NE. 3)
     1  .AND. (IBRF .NE. 11) .AND. (IBRF .NE. 15)) CALL ERRMES (29)
C
C       CONTINUE PROCESSING ANYWAY
C       CHECK LIMITS OF VALUE
        IF (IVAL+4) 84,110,110
110     IF(IVAL-3) 112,112,84
C       ADD FOUR AND SHIFT LEFT SIX PLACES
112     IV=(IVAL+4)*64
        GOTO 93
140     CALL ERRMES (26)
        PTR=-1
        RETURN
        END
C+++    GFIELD
C****** GFIELD = GET AN OP-CODE ARGUEMENT FIELD = REL.  1.00 , 09/01/79
C
        SUBROUTINE GFIELD(IFLD,IRET)
C
        INTEGER KCHAR,JX,IK,L1,L2,IVXL,LDBCF,KTEM,IX
        INTEGER EXTPTR
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
C
C       GETS THE ARGUEMENTS FOR OP-CODE FIELDS THAT NEED THEM
C
C
C       IRET DETERMINES WHERE WE WILL GO AFTER RETURNING TO APAL
C         1  2000   END OF A FIELD
C         2  3000  ERROR RECOVERY
C         3  320  END OF A LINE
        IRET=1
C
C
        GOTO(2000,100,300,400,600,610,700,800,900,1100,2000,
     1 1300,1500,2000,1700,2000),IFLD
C
C
C       SPAD GROUP, WITH TWO ARGUMENTS
100     CONTINUE
C
C       IF # SET CONDITION FIELD ACCORDINGLY.
C
        IF (IBRF .NE. 18) GOTO 105
        IF (IAND16 (CODMSK(2), MASKTB(6,2)) .NE. 0) GOTO 240
        CODMSK(2) = IOR16 (CODMSK(2),MASKTB(6,2))
        CODE(2) = IOR16 (CODE(2),32)
C
105     CONTINUE
        IF ((IBRF .NE. 0) .AND. (IBRF .NE. 18)) NXC = NXC - 1
        KCHAR=LIN(NXC)
        IF(KCHAR.NE.CHARS(19)) GOTO 110
        NXC=NXC+1
C       MERGE IN DECIMATE BIT
        CODMSK(1)=IOR16(ISBT,CODMSK(1))
        CODE(1)=IOR16(ISBT,CODE(1))
110     CONTINUE
        IF (KCHAR .NE. CHARS(1)) GOTO 115
        NXC = NXC + 1
        GOTO 105
115     CONTINUE
        CALL GVAL(0,EXTPTR)
        IF(GVLFLG) 120,130,130
120     CALL ERRMES (37)
        GOTO 3000
C       CHECK RANGE OF S-PAD VALUE
130     IF(IVAL) 140,150,150
140     CALL ERRMES (4)
        GOTO 3000
150     IF(IVAL-15) 160,160,140
C       SHIFT LEFT SIX PLACES
160     IVAL=IVAL*64
        CODE(1)=IOR16(IVAL,CODE(1))
C       READY FOR SECOND ARGUMENT
C       WAS COMMA OR BLANK (TAB) SEEN
        IF(IBRF-15) 170,190,170
170     IF(IBRF-1) 180,190,180
180     CALL ERRMES (27)
        GOTO 3000
190     CALL GVAL(0,EXTPTR)
        IF(GVLFLG) 120,200,200
200     IF(IVAL) 140,210,210
210     IF(IVAL-15) 220,220,140
C       SHIFT LEFT 2 PLACES
220     IVAL=IVAL*4
        CODE(1)=IOR16(IVAL,CODE(1))
        GOTO 2000
C
C       ERROR FOR MISSING EXPRESSION
230     CALL ERRMES (9)
        GO TO 3000
C
C       CONFLICTING OP-CODES
C
240     CONTINUE
        CALL ERRMES (3)
        GOTO 3000
C
C       SPAD GROUP WITH 1 ARGUMENT
300     CONTINUE
C
C       IF # SET CONDITION FIELD ACCORDINGLY.
C
        IF (IBRF .NE. 18) GOTO 305
        IF (IAND16 (CODMSK(2), MASKTB(6,2)) .NE. 0) GOTO 240
        CODMSK(2) = IOR16 (CODMSK(2),MASKTB(6,2))
        CODE(2) = IOR16 (CODE(2),32)
C
305     CONTINUE
        CALL GVAL(0,EXTPTR)
        IF(GVLFLG)120,310,310
310     IF(IVAL) 140,320,320
320     IF(IVAL-15) 330,330,140
C       SHIFT LEFT TWO PLACES
330     IVAL=IVAL*4
        CODE(1)=IOR16(IVAL,CODE(1))
        GOTO 2000
C
C
C       GET DISPLACEMENT FOR BRANCH, VALUE RANGE -20 TO +17
C       FROM CURRENT LOC
400     CONTINUE
        IF (IBRF .NE. 0) NXC = NXC - 1
        CALL GVAL(0,EXTPTR)
        IF(GVLFLG) 500,410,410
410     IVAL=IVAL-LOCNT
C       CHECK DISPLACEMENT IS IN LEGAL RANGE
        IF (IVAL+16) 420,430,430
420     CALL ERRMES (5)
        GOTO 3000
430     IF(IVAL-15) 440,440,420
C       ADJUST VALUE BY ADDING 16
440     IVAL=IVAL+16
C       CHECK NO DISPLACEMENT ALREADY ENTERED
        JX=IAND16(CODMSK(2),31)
        IF(JX) 450,470,450
C       DISPLACEMENT ALREADY ENTERED, IS IT THE SAME
450     JX=IAND16(CODE(2),31)
        IF(JX-IVAL) 460,2000,460
460     CALL ERRMES (6)
        GOTO 3000
470     CODMSK(2)=IOR16(CODMSK(2),31)
        CODE(2)=IOR16(CODE(2),IVAL)
        GOTO 2000
C       FAILURE IN VALUE, ARE WE LOOKING AT END OF FIELD
500     IF(IBRF-14) 510,520,510
510     IF(IBRF-3) 230,520,230
C       END OF FIELD, HAS DISPLACEMENT ALREADY SHOWN UP IN EARLIER
C       FIELD
520     JX=IAND16(CODMSK(2),31)
        IF(JX) 2000,530,2000
530     CALL ERRMES (7)
        GOTO 3000
C
C
C       WE COME HERE WHEN USING THE VALUE FIELD AS A P.S. ADDRESS
C       ABSOLUTE ADDRESS
600     JX=0
        GO TO 620
C       RELATIVE ADDRESS
610     JX=1
620     CONTINUE
        IF ((IBRF .NE. 0) .AND. (IBRF .NE. 15)) NXC = NXC - 1
        CALL GVAL(1,EXTPTR)
C       SEE IF EXPRESSION FOUND????
        IF (GVLFLG) 670,630,630
C       NOW CHECK FOR VALUE FIELD CONFLICTS
630     IF (CODMSK(4).EQ.0) GO TO 640
C       A CONFLICT WITH YW IS OK, OTHERWISE VALUE FIELD CONFLICT
        IF (CODMSK(4).NE.IOR16(0,-8192)) GO TO  1140
        IK=CODE(4)/8192
        IK=IAND16(IK,7)
C       WE NOW PUT YW INTO XW IF XW IS NOT USED OR IS THE SAME,
C         OTHERWISE ERROR
        IF (IAND16(7,CODMSK(3)).NE.0.AND.IAND16(7,CODE(3)).NE.IK)
     1  GOTO 1640
C       SET THE BITS AND MASK FOR THE XW FIELD
        CODE(3)=IOR16(IK,CODE(3))
        CODMSK(3)=IOR16(7,CODMSK(3))
640     IK=IVAL
C       MAKE RELATIVE IF IT'S SUPPOSED TO BE SO
        IF ((JX.EQ.1) .AND. (EXTPTR .EQ. 0)) IK=IK-LOCNT
        CODE(4)=IK
        CODMSK(4)=IOR16(0,-1)
C
C       IF EXTERNAL,COMMON SYMBOL, OR EXT-LOCAL BLOCK REFERENCE OCCURRED,
C       CREATE PROPER RELOCATION TRIPLETS.
C
        IF (IAND16 (IRSH16 (EXTPTR,15),1) .EQ. 1) GOTO 665
        IF (IAND16 (IRSH16 (EXTPTR,13),1) .EQ. 1) GOTO 650
        IF (IAND16 (IRSH16 (EXTPTR,14),1) .EQ. 1) GOTO 660
        IF (EXTPTR .EQ. 0) RETURN
        CODE(5)=IOR16 (IAND16 (USRSYM(EXTPTR,5),IP16 (-256)),5)
        RETURN
650     CONTINUE
        EXTPTR=IAND16 (EXTPTR,8191)
        CODE(5)=IOR16 (IAND16 (USRSYM(EXTPTR,5),IP16 (-256)),4)
        RETURN
660     CONTINUE
        EXTPTR=IAND16 (EXTPTR,8191)
        CODE(5)=IOR16 (IAND16 (USRSYM(EXTPTR,5),IP16 (-256)),3)
        RETURN
665     CONTINUE
        EXTPTR = IAND16 (EXTPTR,8191)
        CODE(5) = 2
        IF (EXTPTR .NE. 0) CODE(5) = IOR16 (IAND16 (USRSYM(EXTPTR,5),
     1  IP16 (-256)),2)
        RETURN
C
C       MISSING P.S. ADDRESS ERROR
670     CALL ERRMES (9)
        GOTO 3000
C       BOTH TOGETHER NOW
C
C       FLOATING ADDER GROUP WITH TWO ARGUMENTS
700     L1=1
        L2=6
        CALL GARG(L1,L2,IVXL)
C       IF PTR=-1, ERROR MESS ALREADY SENT IN GARG
C       IF PTR=0, ARGUMENT NOT FOUND IN TABLE
        IF(PTR)3000,1000,710
C       SHIFT LEFT 12 PLACES
710     IVXL=IVXL*4096
        CODE(2)=IOR16(CODE(2),IVXL)
C       WAS COMMA OR BLANK (TAB) SEEN
        IF (IBRF-15) 720,730,720
720     IF(IBRF-1) 180,730,180
C       GET SECOND ARG
730     L1=7
        L2=14
        CALL GARG(L1,L2,IVXL)
C       IF PTR=-1, ERROR MESS ALREADY SENT
        IF (PTR) 3000,740,750
740     CALL ERRMES (10)
        GOTO 3000
C       SHIFT VALUE LEFT 9 PLACES
750     IVXL=IVXL*512
        CODE(2)=IOR16(CODE(2),IVXL)
        GOTO 2000
C
C
C       FADD1 GROUP WITH 1 ARGUMENT
800     GOTO 730
C
C
C
C       FMUL GROUP WITH TWO ARGUMENTS
900     L1=15
        L2=18
        CALL GARG(L1,L2,IVXL)
C       IF PTR=-1, ERROR MESS ALREADY SENT
C       IF PTR=0, ARGUMENT NOT IN TABLE
        IF(PTR)3000,1000,910
C       SHIFT IVXL 10 PLACES
910     IVXL=IVXL*1024
        CODE(4)=IOR16(CODE(4),IVXL)
C       CHECK FOR COMMA OR BLANK
        IF (IBRF-15) 920,930,920
920     IF(IBRF-1) 180,930,180
C       GET SECOND ARG
930     L1=19
        L2=22
        CALL GARG(L1,L2,IVXL)
        IF(PTR) 950,940,950
940     CALL ERRMES (11)
        GOTO 3000
C       SHIFT IVXL LEFT 8 PLACES
950     IVXL=IVXL*256
        CODE(4)=IOR16(CODE(4),IVXL)
        GOTO 2000
C       ARGUMENT NOT RECOGNIZED, CHECK IF BREAK CHAR IS SEMICOLON
C       OR CRT, THEN NULL ARGUMENT WHICH IS OK, OTHERWISE ERROR
C
1000    IF(IBRF-14) 1010,2000,1010
1010    IF(IBRF-3) 1020,2000,1020
1020    CALL ERRMES (12)
        GOTO 3000
C
C
C       DB= MNEUMONIC, GET ARG
C       CAN ALSO ENTER THIS CODE FROM DPX, DPY, AND MI
1100    LDBCF=0
1110    L1=23
        L2=29
        KTEM=NXC
        CALL GARG(L1,L2,IVXL)
C       IF PTR=-1, ERROR MESSAGE ALREADY SENT
C       IF PTR=0, ARGUMENT NOT FOUND IN TABLE
        IF (PTR.EQ.-1) GO TO 3000
C       IF NOT FOUND, ASSUME DB=VALUE
        IF (PTR.EQ.0) IVXL=2
C       SHIFT LEFT 9 PLACES
        IVXL=IVXL*512
C       AN ERROR IF THE DB FIELD HAS ALREADY BEEN USED AND THE CURRENT
C       ENTRY IS NOT THE SAME AS THE OLD ONE
        IF (IAND16(3584,CODMSK(3)).NE.0.AND.IAND16(3584,CODE(3))
     1    .NE.IVXL) GO TO 1200
        CODE(3)=IOR16(CODE(3),IVXL)
        CODMSK(3)=IOR16(CODMSK(3),3584)
C       GO HANDLE THE DB=VALUE CASE
        IF (PTR.EQ.0) GO TO 1120
        GOTO 1180
C       ARGUMENT NOT RECOGNIZED, MUST BE VALUE
1120    NXC=KTEM
        CALL GVAL(1,EXTPTR)
        IF(GVLFLG) 230,1130,1130
C       SEE IF A VALUE FIELD CONFLICT
1130    IF (CODMSK(4).EQ.0) GO TO 1150
C       IT'S NOT A CONFLICT IF TWO DB=VALUES HAVE THE SAME VALUE
        IF (CODMSK(4).EQ.IOR16(0,-1).AND.IAND16(CODE(3),3584)
     1  .EQ.1024 .AND. CODE(4).EQ.IVAL) GO TO 1150
C       A VALUE/YW CONFLICT IS OK IF YW CAN BE PUT INTO XW, ELSE ERROR
        IF (CODMSK(4).NE.IOR16(0,-8192)) GO TO 1140
        IK=CODE(4)/8192
        IK=IAND16(IK,7)
        IF (IAND16(7,CODMSK(3)).NE.0.AND.IAND16(7,CODE(3)).NE.IK)
     1  GOTO 1640
C       PUT YW INTO XW
        CODE(3)=IOR16(IK,CODE(3))
        CODMSK(3)=IOR16(7,CODMSK(3))
        GO TO 1150
C
C       VALUE FIELD CONFLICT ERROR
1140    CALL ERRMES (13)
        GO TO 3000
C
1150    CODE(4)=IVAL
        CODMSK(4)=IOR16(0,-1)
C
C       EXTERNAL IS LEGAL HERE, CHECK IF IT OCCURRED
C
C
C       CREATE PROPER RELOCATION TRIPLETS.
C
        IF (IAND16 (IRSH16 (EXTPTR,15),1) .EQ. 1) GOTO 1175
        IF (IAND16 (IRSH16 (EXTPTR,13),1) .EQ. 1) GOTO 1160
        IF (IAND16 (IRSH16 (EXTPTR,14),1) .EQ. 1) GOTO 1170
        IF (EXTPTR .EQ. 0) GOTO 1180
        CODE(5) = IOR16 (IAND16 (USRSYM(EXTPTR,5),IP16(-256)),5)
        GOTO 1180
1160    CONTINUE
        EXTPTR = IAND16 (EXTPTR,8191)
        CODE(5) = IOR16 (IAND16 (USRSYM(EXTPTR,5),IP16(-256)),4)
        GOTO 1180
1170    CONTINUE
        EXTPTR = IAND16 (EXTPTR,8191)
        CODE(5) = IOR16 (IAND16 (USRSYM(EXTPTR,5),IP16(-256)),3)
        GOTO 1180
1175    CONTINUE
        EXTPTR = IAND16 (EXTPTR,8191)
        CODE(5) = 2
        IF (EXTPTR .NE. 0) CODE(5) = IOR16 (IAND16 (USRSYM(EXTPTR,5),
     1  IP16 (-256)),2)
1180    IF (LDBCF) 1190,2000,1190
1190    GOTO (1420,1630,1730),LDBCF
C
1200    CALL ERRMES (36)
        GO TO 3000
C
C       DPX COMMAND
C
C       WAS BREAK CHAR A LEFT PAREN
1300    IF(IBRF-11) 1390,1310,1390
C       YES, LEFT PAREN SO GET INDEX VALUE
1310    CONTINUE
        NXC = NXC - 1
        CALL EXFLDS (CHARS(11),CHARS(12),0,1)
        FLDFLG = 1
        CALL GVAL (0,EXTPTR)
        FLDFLG = 0
        IF(GVLFLG)1330,1340,1340
1330    CALL ERRMES (14)
        GOTO 3000
C       AND EAT BACK ARROW   WHICH SHOULD FOLLOW
1340    CONTINUE
        IF (IBRF-13) 1430,1350,1430
C       CHECK LIMITS FOR SUBSCRIPT
1350    IF(IVAL+4)1330,1360,1360
1360    IF(IVAL-3) 1370,1370,1330
1370    IVAL=IVAL+4
C       SEE IF XW HAS ALREADY BEEN USED AND IS NOT THE SAME
C       OTHERWISE ERROR
        IF (IAND16(7,CODMSK(3)).NE.0.AND.IAND16(7,CODE(3)).NE.IVAL)
     1  GOTO 1640
        CODE(3)=IOR16(CODE(3),IVAL)
        CODMSK(3)=IOR16(CODMSK(3),7)
C       NOW GET REST OF LINE
        L1=30
        L2=32
        KTEM=NXC
        CALL GARG(L1,L2,IVXL)
        IF(PTR) 1410,1410,1380
C       USE TABLE TO GET VALUES
1380    CODE(3)=IOR16(CODE(3),IDPXX(IVXL))
        GOTO 2000
C       WAS BREAK CHAR A BACK ARROW
1390    IF (IBRF-13) 1430,1400,1430
1400    IVAL=0
        GOTO 1370
C       NOT REGULAR ARGUMENT, TRY DB= ARG
1410    LDBCF=1
        NXC=KTEM
        GOTO 1110
C       SUCCESSFUL RETURN FROM DB=
1420    IVXL=1
        GOTO 1380
C
C       ERROR, MISSING OP-CODE
1430    CALL ERRMES (15)
        GO TO 3000
C
C
C       DPY COMMAND, WAS BREAK CHAR A LEFT PAREN
1500    IF(IBRF-11) 1600,1510,1600
C       YES, LEFT PAREN, SO GET INDEX VALUE
1510    CONTINUE
        NXC = NXC - 1
        CALL EXFLDS (CHARS(11),CHARS(12),0,1)
        FLDFLG = 1
        CALL GVAL (0,EXTPTR)
        FLDFLG = 0
        IF(GVLFLG) 1330,1530,1530
C       EAT FOLLOWING BACK ARROW
1530    CONTINUE
        IF (IBRF-13) 1430,1540,1430
C       CHECK LIMITS FOR SUBSCRIPT
1540    IF(IVAL+4) 1330,1550,1550
1550    IF(IVAL-3) 1560,1560,1330
1560    IVAL=IVAL+4
        IK=IAND16(IVAL,3)
C       SHIFT 13 LEFT
        IK=IK*8192
        IF (IVAL.GE.4) IK=IK+ISBT
C       SEE IF A CONFLICT WITH YW
        IF (IAND16(-8192,CODMSK(4)).EQ.0) GO TO 1570
C       THIS IS OK IF XW IS NOT USED OR IS THE SAME AS YW, ELSE ERROR
        IF (IAND16(7,CODMSK(3)).NE.0.AND.IAND16(7,CODE(3)).NE.IVAL)
     1  GOTO 1640
C       PUT IN BITS AND MASK FOR XW
        CODE(3)=IOR16(IVAL,CODE(3))
        CODMSK(3)=IOR16(7,CODMSK(3))
        GO TO 1580
C
C       PUT IN THE YW FIELD
1570    CODE(4)=IOR16(CODE(4),IK)
        CODMSK(4)=IOR16(CODMSK(4),-8192)
C       NOW GET REST OF LINE
1580    L1=30
        L2=32
        KTEM=NXC
        CALL GARG(L1,L2,IVXL)
        IF(PTR) 1620,1620,1590
C       SHIFT LEFT 12 PLACES
1590    IVXL=IVXL*4096
        CODE(3)=IOR16(CODE(3),IVXL)
        GOTO 2000
C       WAS BREAK CHAR A BACK ARROW
1600    IF (IBRF -13) 1430,1610,1430
1610    IVAL=0
        GOTO 1560
C       NOT REGULAR ARGUMENT, TRY DB= ARGUMENT
1620    LDBCF=2
        NXC=KTEM
        GOTO 1110
C       SUCCESSFUL RETURN FROM DB=
1630    IVXL=1
        GOTO 1590
C
C
C       XW/YW CONFLICT ERROR
1640    CALL ERRMES (39)
        GO TO 3000
C
C       MI  COMMAND, CHECK FOR REGULAR ARGUMENT
C
1700    L1=33
        L2=35
        KTEM=NXC
        CALL GARG(L1,L2,IVXL)
        IF (PTR) 1720,1720,1710
C       SUCCESS, SHIFT LEFT SIX PLACES
1710    IVXL=IVXL*64
        CODE(4)=IOR16(CODE(4),IVXL)
        GOTO 2000
C       NOT REGULAR ARGUMENT, TRY DB= ARGUMENT
1720    LDBCF=3
        NXC=KTEM
        GOTO 1110
C       SUCCESSFUL RETURN FROM DB=
1730    IVXL=3
        GOTO 1710
C
C
C
C       RETURN IF THINGS ARE OK
2000    RETURN
C
C
C       RETURN IF WE HAD AN ASSEMBLY ERROR
3000    IRET=2
        RETURN
        END
C+++    READLN
C****** READLN = READ A NEW LINE = REL.  1.00 , 09/01/79
C
        SUBROUTINE READLN(ISYM)
C       INPUT ROUTINE
C
        INTEGER I,J,ISYM
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
C       RETURNS:
C
C       ISYM    = 1 IF BLANK LINE
C                 0 IF EVERYTHING IS HUNKY-DORRY,
C                -1 IF EOF OCCURRED.
C
C       THIS ROUTINE GETS SINGLE LINE FROM INPUT FILE
C
C
C       VARIABLES:
C
C       INLIN, BUFFER CONTAINING INPUT LINE
C       IPTRX, POINTER TO LAST GOOD LETTER
C       TLUN -- THE SCRATCH FILE ON WHICH TO SAVE THE SOURCE TEXT
C       SLUN -- THE INPUT SOURCE FILE
C
C       GET NEW LINE
C
        DO 10 I = 1,80
        INLIN(I) = BLANK
10      CONTINUE
        ISYM = 0
        IF (IPASS.EQ.2)  GO TO 22
        IOPTR = 1
C
C       USE THE READ WITH THE "END=" CONSTRUCT IF IT IS LEGAL
C       IF NOT THEN USE A CONSTRUCT TO DETERMINE WHEN END OF FILE
C       OCCURRED, AND BRANCH TO LABEL 60.
C
        READ(SLUN,220,END=60)  (INLIN(I),I=1,80)
        WRITE(TLUN,221) (INLIN(I),I=1,80)
C       WRITE(1,221) (INLIN(I),I=1,80)
        GO TO 23
C
C       USE THE READ WITH THE "END=" CONSTRUCT IF IT IS LEGAL
C       IF NOT THEN USE A CONSTRUCT TO DETERMINE WHEN END OF FILE
C       OCCURRED, AND BRANCH TO LABEL 60.
C
22      CONTINUE
        IF (LSTING .EQ. 1) IOPTR = IOPTR + 1
        IF (IOPTR .GT. 10) GOTO 250
        READ(TLUN,220,END=60)  (INLIN(I),I=1,80)
C       WRITE(1,221) (INLIN(I),I=1,80)
C
C       COPY INLIN TO IOLIN
C
23      CONTINUE
        IF ((IPASS .EQ. 2) .AND. (LSTING .EQ. 0)) GOTO 26
        DO 25 I=23,100
        IOLIN(I,IOPTR) = INLIN(I-22)
25      CONTINUE
26      CONTINUE
C
C       INCREMENT LINNUM AND IF PASS2 INSERT IT IN IOLIN.
C
        LINNUM = LINNUM + 1
        IF ((IPASS .EQ. 2) .AND. (LSTING .EQ. 1)
     1  ) CALL PNUM (LINNUM,IOPTR,1)
C
C       DELETE TRAILING BLANKS
C       LOOK FOR A WORD WITH ALL BLANKS IN IT
        DO 30 I=1,80
        IPTRX=81-I
        IF (INLIN(IPTRX).NE.BLANK)   GO TO 36
30      CONTINUE
C
C       BLANK LINE - FLAG IT
C
        ISYM = 1
36      CONTINUE
C
C       CHECK IF FIRST CHARACTER IN LINE IS A '[' WHICH INDICATES
C       AN END OF FILE FOR AN INSERTED FILE OCCURRED.
C
        IF (INLIN(1) .EQ. CHARS(37)) GOTO 60
C
C       APPEND A CARRAGE RETURN
C
        IPTRX=IPTRX+1
        INLIN(IPTRX)=CHARS(3)
        RETURN
C
C       EOF ENCOUNTERED.
C
60      CONTINUE
        ISYM = -1
        RETURN
C
C
220     FORMAT (80A1)
C       WE USE EITHER FORMAT DEPENDING UPON WHETHER THE FIRST CHARACTER
C               IS OR IS NOT USED FOR CARRIAGE CONTROL
221     FORMAT (1X, 80A1)
C
C       ERROR - TWO MANY LINES FOR INSTRUCTION
C
250     CONTINUE
        CALL ERRMES (1)
        ISYM = 1
        RETURN
        END
C+++    PACKS
C****** PACKS = PACKS CHARACTERS 2 PER WORD = REL.  1.00 , 09/01/79
C
        SUBROUTINE PACKS(MAXNUM,BUF)
C
C
C       THIS ROUTINE TAKES CHARACTERS FROM ARRAY "BUF" AND RETURNS THEM
C       PACKED TWO PER WORD IN ARRAY "SYM"
C
        INTEGER I,J,MAXNUM,BUF(81)
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
C       BLANK OUT OUTPUT ARRAY
C
        DO 10 I=1,40
        SYM(I) = BLANK
10      CONTINUE
C
C       NOW PACK UP CHARACTERS
C
        DO 50 I= 1,MAXNUM
        J = I + (I - 1)
        IF (BUF(J) .EQ. CHARS(3)) BUF(J) = CHARS(1)
        IF (BUF(J+1) .EQ. CHARS(3)) BUF(J+1) = CHARS(1)
        SYM(I) = IOR16 (ILSH16 (BUF(J+1),8),IAND16 (BUF(J),255))
50      CONTINUE
        RETURN
        END
C+++    GLINE
C****** GLINE = GET A LINE = REL.  1.00 , 09/01/79
C
        SUBROUTINE GLINE
C
        INTEGER SYMBOL,FLAG,I,J
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C       SUBROUTINE GETS NEXT LINE OF TEXT
C       STORES ONE CHARACTER PER WORD IN LIN(100)
C       DELETES ALL LEADING BLANKS, CONVERTS TABS TO BLANKS,
C       ELIMINATES ALL COMMENTS.
C
C       RETURNS:
C
C       GLNFLG  = -1 IF EOF OCCURRED.
C                  0 IF ; OR , WAS NOT LAST CHARACTER SEEN IN LINE.
C                  1 IF ; OR , WAS LAST CHARACTER SEEN IN LINE.
C
C
C       INITIALIZE CONSTANTS
C
1       CONTINUE
        NXC = 1
C
C       INPUT A LINE.
C
        CALL READLN (FLAG)
        IF (FLAG) 80,5,90
C
C       SKIP OVER ALL INITIAL BLANKS AND TABS.
C
5       CONTINUE
        DO 15 I=1,80
        J = I
        SYMBOL = INLIN(J)
C
C       LOOK FOR BLANKS.
C
        IF (SYMBOL .EQ. CHARS(1)) GOTO 15
C
C       LOOK FOR TABS.
C
        IF (SYMBOL .NE. CHARS(2)) GOTO 20
15      CONTINUE
C
C       LOOK FOR COMMENT LINES ONLY.
C
20      CONTINUE
        IF (SYMBOL .EQ.CHARS(17)) GOTO 90
C
C       COPY CHARACTER TO LIN.
C
30      CONTINUE
        LIN(NXC) = SYMBOL
        NXC = NXC + 1
C
C       EXTRACT NEXT CHARACTER.
C
        J = J + 1
        SYMBOL = INLIN(J)
C
C       CHECK IF SEMICOLON OR COMMA.
C
        IF (SYMBOL .NE. CHARS(14) .AND. SYMBOL .NE. CHARS(15)) GOTO 50
        GLNFLG = 1
        GOTO 30
C
C       CHECK IF COMMENT.
C
50      CONTINUE
        IF (SYMBOL .NE. CHARS(17)) GOTO 60
C
C       IF COMMENT, INSERT CARRAGE RETURN IN LIN AND RETURN.
C
55      CONTINUE
        LIN(NXC) = CHARS(3)
C
C       DELETE TRAILING BLANKS IF ANY.
C
        J = NXC
        DO 57 I=1,NXC
        J = J - 1
        IF (J .EQ. 0) GOTO 58
        IF (LIN(J) .NE. CHARS(1)) GOTO 58
        LIN(J) = CHARS(3)
        LIN(J+1) = CHARS(1)
57      CONTINUE
58      CONTINUE
        NXC = 1
        RETURN
C
C       CHECK IF CARRAGE RETURN.
C
60      CONTINUE
        IF (SYMBOL .NE. CHARS(3)) GOTO 70
C
C       COPY CRT AND RETURN.
C
        GOTO 55
C
C       GENERAL POPULOUS OF CHARACTERS
C
70      CONTINUE
C
C       CHECK IF TAB, IF SO CHANGE TO BLANK.
C
        IF (SYMBOL .EQ. CHARS(2)) SYMBOL = CHARS(1)
C
C       IF SYMBOL EQUALS BLANK, DO NOT RESET GLNFLG.
C
        IF (SYMBOL .EQ. CHARS(1)) GOTO 30
        GLNFLG = 0
        GOTO 30
C
C       EOF ENCOUNTERED
C
80      GLNFLG = -1
        NXC = 1
        RETURN
C
C       BLANK OR COMMENT LINE ONLY.
C
90      CONTINUE
        IF ((IPASS .NE. 2) .OR. (LSTING .NE. 1) .OR.
     1  (GLNFLG .EQ. 1)) GOTO 1
        CALL WLIN
        IOPTR = 0
        GOTO 1
        END
C+++    GNUM
C****** GNUM = GET A NUMBER = REL.  1.00 , 09/01/79
C
        SUBROUTINE GNUM
C
        INTEGER KT,L1,I,I1,J
        REAL R,VAL
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C       WHEN CALLED HAVE SCANNED NEXT CHAR AND KNOW IT@S NUMBER
C       DIGEST THIS NUMBER IN APPROPRIATE RADIX AND RETURN VALUE
C       RADICES POSSIBLE:
C          K  OCTAL (IMPLIED IF NONE SPECIFIED)
C          B  BINARY
C          .  DECIMAL
C        X   HEX
        DIMENSION IDIG(20)
        KT=0
C       GET NEXT DIGIT
10      CONTINUE
        L1=LIN(NXC)
        IF (FLDFLG .EQ. 1) L1 = FIELD(NXC)
        NXC=NXC+1
C        SEE WHICH DIGIT
         DO 12 I=1,16
        J = I
         IF (L1.EQ.DIGITS(I)) GO TO 14
12       CONTINUE
C        NOT A DIGIT, GO SEE WHICH RADIX
         GO TO 60
C        STORE DIGIT IF WE DON'T ALREADY HAVE TOO MANY
14       IF (KT.GT.20) GO TO 29
         KT=KT+1
         IDIG(KT) = J-1
         GO TO 10
29      CALL ERRMES (18)
        IVAL=0
        RETURN
C       LOOKING FOR RADIX
C        BINARY?????
60       IF (L1.NE.CHARS(26)) GO TO 62
         R=2.0
         GO TO 34
C        DECIMAL???????
62       IF (L1.NE.CHARS(8)) GO TO 64
         R=10.0
         GO TO 34
C        HEX???????
64       IF (L1.NE.CHARS(28)) GO TO 66
         R=16.0
         GO TO 34
C        OCTAL???????
66       IF (L1.NE.CHARS(25)) GO TO 68
         R=8.0
         GO TO 34
C        NRADIX IMPLIED, THE NEXT CHARACTER IS THE BREAK CHARACTER
68       R=FLOAT(NRADIX)
         GO TO 36
C       GET NEXT CHAR, SHOULD BE BREAK CHAR
34      CONTINUE
        NXC=NXC+1
36      CONTINUE
        CALL GBRK
C       NOW CONVERT DIGITS TO VALUE
         VAL=0.0
         DO 50 I=1,KT
C
C       CHECK IF NUMBER IS OF APPROPRIATE RADIX.
C
        IF (FLOAT(IDIG(I)) .GE. R) GOTO 80
C
C       COMPUTE VALUE OF NUMBER.
C
50       VAL=VAL* R   + FLOAT(IDIG(I))
C        SEE IF VALUE TOO BIG
         IF (VAL.GE.65536.0) GO TO 29
C        FIX VALUE BACK TO AN INTEGER FROM -32768 TO 32767
         IF (VAL-32768.0) 54,55,56
C        WAS LESS THAN 32768, FIX VALUE
54       IVAL=INT(VAL)
        GO TO 70
C        WAS EQUAL TO 32768, FIX TO -32768
55       IVAL = -32767-1
        GO TO 70
C        WAS GREATER THAN 32768, MAKE NEGATIVE (VALUE-65536)
56       IVAL = INT(VAL-65536.0)
C
70      CONTINUE
        RETURN
C
C       ERROR - NUMBER NOT OF APPROPRIATE RADIX
C
80      CONTINUE
        CALL ERRMES (9)
        RETURN
         END
C+++    GSYM
C****** GSYM = GET A SYMBOL = REL.  1.00 , 09/01/79
C
        SUBROUTINE GSYM
C
        INTEGER I,L1,L2,J1
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C       ROUTINE GETS NEXT SYMBOL FROM LIN(100) OR FROM INLIN(80)
C       IF FLDFLG = 1
C       EITHER USER OR SYSTEM SYMBOL (NEXT CONSECUTIVE CHARS)
C       SKIPS OVER ANY INITIAL BLANKS
C       IF FIRST NON-BLANK CHAR IS BREAK CHAR, FAILURE
C       EXCEPT FOR = WHICH IS LEGAL SYMBOL
C       RETURNS, ALFLG=-1, FAILURE---ALFLG=0 SUCCESS
C       FIRST 6 CHARS OF SYMBOL ARE PACKED IN SYM(1)-SYM(3)
C       WITH ENDING BREAK CHAR IN IBRF BY TABLE INDEX VALUE
C       BLANK OUT THE CHARACTER STORAGE
        DO 10 I=1,6
10      INLIN(I)=CHARS(1)
        ALFLG=0
C       SPECIAL TREATMENT FOR FIRST CHARACTER
        L2=1
C
C       GET RID OF LEADING BLANKS
C
20      CONTINUE
        L1=LIN(NXC)
        IF (FLDFLG .EQ. 1) L1 = FIELD(NXC)
        NXC=NXC+1
        IF(L1.EQ.CHARS(1)) GOTO 20
C
C       CHECK IF FIRST CHAR IS A BREAK CHARACTER
C
        DO 30 J1=2,BRKMX
        IF (L1-CHARS(J1)) 30,25,30
25      ALFLG=-1
        IBRF=J1
        INLIN(L2) = L1
        GOTO 70
30      CONTINUE
C
C       HERE WE FOUND AN ALPHA-NUMERIC TOKEN
C       LOOP, GET NEXT CHAR
C
36      CONTINUE
        IF (L2 .LE. 6) INLIN(L2) = L1
        L2=L2+1
        L1=LIN(NXC)
        IF (FLDFLG .EQ. 1) L1 = FIELD(NXC)
        NXC=NXC+1
        DO 40 J1=1,BRKMX
        IF(L1-CHARS(J1)) 40,50,40
C       BREAK CHAR FOUND
40      CONTINUE
        GOTO 36
C
C       LOCATE NEXT LEGAL BREAK CHAR OTHER THAN BLANK IF THERE IS ONE.
C
50      CONTINUE
        CALL GBRK
C       PACK UP CHARS AND RETURN
C
        CALL PACKS(3,INLIN)
C
70      CONTINUE
        RETURN
        END
C+++    GBRK
C****** GBRK = GETS NEXT BREAK CHARACTER = REL.  1.00 , 09/01/79
C
        SUBROUTINE GBRK
C
        INTEGER L1,J1
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
C       THIS SUBROUTINE LOCATES THE NEXT BREAK CHARACTER AFTER A SYMBOL,
C       NUMBER,O OR A FIELD HAS BEEN EXTRACTED. BLANKS ARE IGNORED.
C
C
C       CHECK IF BREAK CHAR IS A SPACE
C
        L1 = LIN(NXC-1)
        IF (FLDFLG .EQ. 1) L1 = FIELD(NXC - 1)
10      CONTINUE
        DO 20 J1 = 1,BRKMX
        IF (L1 .NE. CHARS(J1)) GOTO 20
        IBRF = J1
        IF (IBRF .NE. 1) GOTO 30
        L1 = LIN(NXC)
        IF (FLDFLG .EQ. 1) L1 = FIELD(NXC)
        NXC = NXC + 1
        GOTO 10
20      CONTINUE
C
C       BREAK CHAR WAS AN ALPHA-NUMERIC CHARACTER
C
        IBRF = 0
        NXC = NXC - 1
30      CONTINUE
        RETURN
        END
C+++    GVAL
C****** GVAL = APAL EXPRESSION EVALUATOR = REL.  1.00 , 09/01/79
C
        SUBROUTINE GVAL (OKEXT,EXTPTR)
C
        INTEGER OKEXT,EXTPTR
C
C       THIS ROUTINE EVALUATES A PARENTHETICAL EXPRESSION AND
C       RETURNS ITS 16 BIT 2'S COMP VALUE.
C
C       CALL:
C
C       OKEXT  = 1 IF EXTERNALS ARE TO BE ALLOWED, ELSE 0
C       FLDFLG  =  0 IF EXPRESSION IS READ FROM 'LIN', 1 IF EXPRESSION
C                  IF READ FROM 'FIELD'.
C
C       RETURNS:
C
C       EXTPTR = SYMBOL TABLE INDEX OF AN EXTERNAL REF. IF THERE
C                WAS ONE, ELSE 0;  BITS(0-12). BITS(13-15) = 1 IF
C                A REFERENCE TO THE LOCAL DATA BLOCK OF AN EXTERNAL
C                SUBROUTINE IS MADE.
C
C       ROUTINES USED:  IADD16, IAND16, ICMP16, INEG16
C                       INOT16, IOR16, IPFIX, ISUB16, LENS, NEGCHK,
C                       ILSH16
C                APAL:  ERROR, FLOAT2
C
C       VARIABLES:
C
C       GVLFLG    = 0 IF EVERYTHING WAS HUNKY DORRY, ELSE -1
C       EXPRTB()  = ARAY IN TABLES CONTAINING THE LEGAL OPERATORS, THEIR
C                   PRECEDENCE, AND ID VALUES
C       STK1()    = STACK USED IN THE EXPRESSION PARSING
C       STK2()    = DITTO
C       USRSYM()  = THE USER SYMBOL TABLE (SEE TABLES)
C       EXPRMX    = THE INDEX OF THE LAST ELEMENT DIFINED IN EXPRTB()
C       FLGDLM    = 1 IF A DELIMITER HAS BEEN SEEN DURING PARSING, ELSE 0.
C       FLGDUN    = 1 WHEN END OF EXPRESSION WAS FOUND AND FINAL RESULT CALC.S
C                   ARE TO BEGIN.
C       LSTPRS    = PRECEDENCE OF THE LAST ITEM PARSED.
C       PRES      = PRECEDENCE OF CURRENT ITEM
C       ST1       = STK1() POINTER
C       ST2       = STK2() POINTER
C       ST1MAX    = SIZE OF STK1()
C       ST2MAX    = SIZE OF STK2()
C
C       LEGAL OPERATORS IN EXPRESSIONS AND THEIR PRECEDENCES (READING DOWN) ARE:
C
C       '  +  -   (ALL UNARY OPS)
C       *  /
C       +  -  &  %  <  >  =
C
C       IF TWO OPERATORS OF EQUAL PRECEDENCE OCCUR IN A ROW THEY ARE
C       EVALUATED LEFT TO RIGHT.
C
C       *****************************
C       * TO CREATE A NEW OPERATOR  *
C       *****************************
C
C       EXPRESSIONS ARE EVALUATED BY CONVERTING TO POLISH (POSTFIX) NOTATION
C       USING THE OPERATOR PRECEDENCE VALUES AND THE TWO STACKS.  ITEMS ARE
C       ADDED TO STK1() AS LONG AS THEY ARE OF GROWING PRECEDENCE, OTHERWISE
C       ITEMS ARE POPPED FROM STK1 TO STK2.  WHEN AN OPERATOR IS POPPED IT
C       IS EVALUATED IMMEDIATELY W/ THE LAST 2 (OR 1 IF UNARY) ITEMS ON STK2.
C       VALUES (OR SYMBOLS) HAVE A PRECEDENCE OF 15, UNARYS = 9, TIMES AND
C       DIVIDE = 7, AND ALL OTHERS ARE 5.  TO ADD A NEW OPERATOR THE SYMBOL,
C       ITS PRECEDENCE, AND A UNIQUE ID VALUE MUST BE PLACED IN EXPRTB() IN
C       TABLES.  IF THE OPERATOR IS UNARY, CODE MUST BE ADDED BELOW (READ THE
C       COMMENTS) SO THAT IT WILL BE RECOGNIZED AS SUCH.  OTHERWISE THE ONLY
C       CHANGE HERE IS TO ADD THE CODE TO DO THE ACTUAL EVALUATION AFTER
C       THE COMPUTED GOTO BELOW.
C
        INTEGER ST1MAX,ST2MAX,EXTFLG,L1
        INTEGER ST1,ST2,PRES,FLGDUN,FLGDLM
        INTEGER ID,LSTPRS,NXCSV,IBRFSV,RELFLG
        INTEGER I,STK1(20,2),STK2(10,2),PRES2,VAL2
C
        INTEGER EXPRMX,EXPRTB
C
        COMMON /EXPRST/ EXPRMX,EXPRTB(12,3)
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
C
C       INITIALIZE ...
C
        GVLFLG=0
        IVAL=0
        FLGDLM=0
        FLGDUN=0
        EXTPTR=0
        RELFLG=0
        PRES=0
        ST1=0
        ST2=0
        ST1MAX=20
        ST2MAX=10
        EXTFLG=0
        IBRFSV = IBRF
        IBRF = -1
        IF (FLDFLG .EQ. 0) GOTO 150
        NXCSV = NXC
        NXC = 1
        GOTO 150
C
C       IF FLGDUN=1 WE'RE THRU, ELSE GET NEXT ITEM ON LINE, SAVE PRECEDENCE
C       OF THE LAST ITEM, AND PROCESS THE NEW ONE AS A NUMBER, SYMBOL OR
C       SPECIAL CHAR.
C
100     IF (FLGDUN .EQ. 1) GOTO 750
        IF (IBRF .EQ. -1) NXC = NXC + 1
        IF (IBRF .NE. -1) NXC = NXC - 1
        IBRF = -1
150     CONTINUE
        L1 = LIN(NXC)
        IF (FLDFLG .EQ. 1) L1 = FIELD(NXC)
        IF (L1 - CHARS(1)) 200,170,200
170     NXC = NXC + 1
        GOTO 150
200     CONTINUE
C
C       CHECK IF ABSOLUTE RELOCATION IS REQUESTED.
C
        IF (L1 .NE. CHARS(23)) GOTO 225
        EXTPTR = ILSH16 (1,15)
        NXC = NXC + 1
        GOTO 150
225     CONTINUE
        LSTPRS=PRES
        PRES=15
C
C       CHECK IF NUMBER
C
        IF (L1 - CHARS(32)) 400,300,250
250     IF (L1 - CHARS(33)) 300,300,400
C
C       HERE WE HAVE A NUMBER.
C       DEFAULT RADIX IS NRADIX.
C
300     CONTINUE
        CALL GNUM
        GOTO 900
C
C       IF CHAR IS A ! GET REST OF SYMBOL NAME, AND SET THE STARTING
C       SEARCH PTR SO THAT TABLE MEM. CONSTANTS ARE EXAMINED.
C
C
C       SYMBOL ENCOUNTERED - GET ITS VALUE FROM USER SYMTAB.
C
C
C       CHECK IF ALPHANUMERIC
C
400     CONTINUE
        RELFLG = 0
        IF (L1 - CHARS(34)) 600,700,450
450     CONTINUE
        IF (L1 - CHARS(35)) 700,700,600
C
600     CONTINUE
        IF (L1 .EQ. CHARS(18)) RELFLG = -1
        IF (L1 .EQ. CHARS(24)) RELFLG = -2
        IF (RELFLG .EQ. 0) GOTO 720
700     CONTINUE
        IF (RELFLG .EQ. -1) NXC = NXC + 1
        CALL GSYM
        IF (ALFLG) 2100,701,701
C
C       LOOK UP SYMBOL IN TABLE
C
701     CONTINUE
        CALL FUSYM
C                    !   #   ALPHA
        IF (RELFLG + 1) 702,704,705
702     CONTINUE
        IF (TABPTR) 703,703,705
C
C       ENTER SYMBOL IN TABLE
C
703     CONTINUE
        NUSYM = NUSYM + 1
        IF (NUSYM .GT. USRMAX) GOTO 716
        TABPTR = NUSYM
        USRSYM(NUSYM,1) = SYM(1)
        USRSYM(NUSYM,2) = SYM(2)
        USRSYM(NUSYM,3) = SYM(3)
        USRSYM(NUSYM,4) = 0
        EXTNUM = EXTNUM + 1
        USRSYM(NUSYM,5) = IOR16 (ILSH16 (EXTNUM,8),1)
        GOTO 705
704     CONTINUE
        EXTPTR = ILSH16 (1,13)
705     CONTINUE
        IF (TABPTR) 715,715,706
706     CONTINUE
        IVAL = USRSYM(TABPTR,4)
        ID = IAND16 (USRSYM(TABPTR,5),7)
        IF ((ID .EQ. 1) .AND. (EXTFLG .EQ. 1)) GOTO 710
        IF (ID.EQ.3.OR.ID.EQ.4) EXTPTR=
     *  IOR16 (IOR16 (ILSH16 (1,14),EXTPTR),TABPTR)
        IF (ID.EQ.0.OR.ID.EQ.2.OR.ID.EQ.3.OR.ID.EQ.4) GO TO 900
C
C       EXTERNAL SYMBOL IS OK ONLY OKEXT=1, SAVE PTR (EXTPTR) TO THE EXTERNAL
C
        IF (OKEXT .EQ. 0 .OR. ST1 .EQ. 1 .OR. ST2 .EQ. 1) GOTO 710
        EXTPTR=IOR16(EXTPTR,TABPTR)
        IF (IBRF .EQ. 14 .OR. IBRF .EQ. 3) GOTO 4000
        IF (IBRF .NE. 4 .AND. IBRF .NE. 5) GOTO 710
        EXTFLG=1
        GOTO 900
C
C       EXTERNAL SYMBOL NOT ALLOWED
C
710     CALL ERRMES (16)
        GOTO 2200
C
C       UNDEFINED USER SYMBOL
C
715     CALL ERRMES (17)
        GOTO 2200
C
C       SYMBOL TABLE OVERFLOW
C
716     CONTINUE
        CALL ERRMES (41)
        GOTO 2200
C
C       POINT = CURRENT LOCATION COUNTER
C
 720    IF (L1 .NE. CHARS(8)) GOTO 740
        IVAL=LOCNT
        GOTO 900
C
C       HERE WE HAVE A SPEC. CHAR - POSSIBLY END OF EXPR (, ; 0)
C       OR AN ARITHMETIC OP.  IF END OF EXPR. SET DLIM TO TRAILING
C       DELIMITER AND FLGDLM TO SAY ONE WAS FOUND ALREADY.
C
740     IF (L1 .NE. CHARS(3) .AND. L1 .NE. CHARS(15) .AND.
     *      L1 .NE. CHARS(14)) GOTO 780
        FLGDLM=1
C
C       THIS WILL CAUSE EVERYTHING IN STK1 TO BE MOVED TO STK2
C
        IF (FLGDUN .EQ. 1) GOTO 750
        PRES=0
        FLGDUN=1
        GOTO 840
C
C       HERE WE HAVE READ END OF EXPRESSION - STK1 SHOULD CONTAIN ONLY
C       0,0 AND STK2 SHOULD HAVE 1 'VALUE' (PRES=15) AND THAT'S THE
C       RESULT --- RETURN WITH IT.
C
750     IF (ST1 .NE. 1 .OR. STK1(1,2) .NE. 0 .OR. ST2 .NE. 1 .OR.
     *      STK2(1,2) .NE. 15) GOTO 2100
        IVAL=STK2(1,1)
        GOTO 3000
C
C       LOOK FOR ARITHMETIC OP., GET CODE AND PRECEDENCE.
C       EXPRTB (1-EXPRMX,1) = +,-,*,/,-,(,)
C
780     DO 790 I=1,EXPRMX
        IF (L1 .EQ. EXPRTB(I,1)) GOTO 810
790     CONTINUE
        GOTO 2100
810     PRES=EXPRTB(I,2)
        IVAL=EXPRTB(I,3)
C
C       CHECK FOR UNARY CODES THAT DOUBLE AS BINARIES (+,-)
C       UNARY PLUS: IVAL=6
C             MINUS: IVAL=5    PRES=9 IN BOTH CASES.
C
        IF (L1 .NE. CHARS(5) .AND. L1 .NE. CHARS(4)) GOTO 840
        IF (LSTPRS .EQ. 15 .OR. LSTPRS .EQ. 1) GOTO 840
        IF (L1 .EQ. CHARS(5)) IVAL=5
        IF (L1 .EQ. CHARS(4)) IVAL=6
        PRES=9
840     IF (ST1 .EQ. 0) GOTO 900
        GOTO 1000
C
C       ADD ITEM TO TOP OF STACK 1
C
900     IF ((PRES .EQ. 15 .OR. PRES .EQ. 2) .AND.
     *      LSTPRS .EQ. 15) GOTO 2100
        IF (PRES .EQ. 15 .AND. LSTPRS .EQ. 1) GOTO 2100
        ST1=ST1+1
        IF (ST1 .GT. ST1MAX) GOTO 2000
        STK1(ST1,1)=IVAL
        STK1(ST1,2)=PRES
        GOTO 100
C
C       CHECK FOR TWO VALUES OR TWO BINARY OPS IN A ROW - ILLEGAL!
C       MOVE LAST ITEM ON STK1 TO STK2 IF ITS PRES IS
C       .GE. THE CURRENT PRECEDENCE.  IF MOVING AN ARITH.
C       OPERATOR - DO IT!!  CHECK FOR LEFT PAREN AS WE'RE MOVING STUFF.
C
1000    VAL2=STK1(ST1,1)
        PRES2=STK1(ST1,2)
        IF (PRES .EQ. 9 .AND. PRES2 .EQ. 9) GOTO 900
        IF (PRES .EQ. 15 .AND. PRES2 .EQ. 15) GOTO 2100
        IF (PRES .GT. PRES2 .OR. PRES .EQ. 2) GOTO 900
        IF (PRES2 .NE. 2) GOTO 1100
        ST1=ST1-1
        GOTO 100
1100    IF (PRES2 .NE. 15) GOTO 1150
C
C       MOVE A NUMERICAL ITEM FROM STK1 TO STK2
C
        ST2=ST2+1
        IF (ST2 .GT. ST2MAX) GOTO 2000
        STK2(ST2,1)=STK1(ST1,1)
        STK2(ST2,2)=PRES2
        ST1=ST1-1
1120    IF (ST1 .EQ. 0) GOTO 900
        GOTO 1000
C
C       NOW DO AN ARITHMETIC OPERATION, CHECKING THAT THE OPERAND(S)
C       ARE THERE (IN STK2) AND ARE 'VALUES' (ONLY CHECK ONE OPERAND IF
C       OPERATOR IS UNARY (5,6,11)
C
1150    IF (VAL2 .NE. 5 .AND. VAL2 .NE. 6
     *  .AND. VAL2 .NE. 12) GOTO 1200
        IF (ST2 .LT. 1 .OR. STK2(ST2,2) .NE. 15) GOTO 2100
        GOTO 1208
1200    IF (ST2 .LT. 2 .OR. STK2(ST2,2) .NE. 15 .OR.
     *      STK2(ST2-1,2) .NE. 15) GOTO 2100
        ST2=ST2-1
1208    ST1=ST1-1
C
C       DO THE OP:  +, -, *, /, - (UNARY), + (UNARY), &, %, =, >, <, '
C
        GOTO (1210,1220,1230,1240,1250,1120,1270,1280,1290,
     *        1300,1310,1320),VAL2
C
C       16 BIT 2'S COMP ADD
C
1210    STK2(ST2,1)=IADD16 (STK2(ST2,1),STK2(ST2+1,1))
        GOTO 1120
C
C       16 BIT 2'S COMP SUBTRACT
C
1220    STK2(ST2,1)=ISUB16 (STK2(ST2,1),STK2(ST2+1,1))
        GOTO 1120
C
C       16 BIT 2'S COMP MULTIPLY (LOW ORDER BITS LOST ON BIG ONES)
C
1230    STK2(ST2,1)=IPFIX (FLOAT2 (STK2(ST2,1))*FLOAT2 (STK2(ST2+1,1)))
        GOTO 1120
C
C       16 BIT 2'S COMP DIVIDE (W/ 0 DIV CHECK)
C
1240    IF (ICMP16 (STK2(ST2+1,1),0) .EQ. 0) GOTO 1245
        STK2(ST2,1)=IPFIX (FLOAT2 (STK2(ST2,1))/FLOAT2 (STK2(ST2+1,1)))
        GOTO 1120
C
C       DIVISION BY ZERO
C
1245    CONTINUE
        CALL ERRMES (57)
        STK2(ST2,1)=IPFIX(-1)
        GOTO 1120
C
C       UNARY MINUS (16 BIT 2'S COMP)
C
1250    STK2(ST2,1)=INEG16 (STK2(ST2,1))
        GOTO 1120
C
C       & - 16 BIT LOGICAL AND
C
1270    STK2(ST2,1)=IAND16 (STK2(ST2,1),STK2(ST2+1,1))
        GOTO 1120
C
C       % - 16 BIT LOGICAL OR
C
1280    STK2(ST2,1)=IOR16 (STK2(ST2,1),STK2(ST2+1,1))
        GOTO 1120
C
C       = - RETURNS 1 IF OP1 = OP2 ELSE 0
C
1290    IF (ICMP16 (STK2(ST2,1),STK2(ST2+1,1)) .EQ. 0) GOTO 1295
        STK2(ST2,1)=0
        GOTO 1120
1295    STK2(ST2,1)=1
        GOTO 1120
C
C       > - RETURNS 1 IF OP1 > OP2 ELSE 0
C
1300    IF (NEGCHK (ISUB16 (STK2(ST2+1,1),STK2(ST2,1))) .EQ. 1)
     *      GOTO 1305
        STK2(ST2,1)=0
        GOTO 1120
1305    STK2(ST2,1)=1
        GOTO 1120
C
C       < - RETURNS 1 IF OP1 < OP2 ELSE 0
C
1310    IF (NEGCHK (ISUB16 (STK2(ST2,1),STK2(ST2+1,1))) .EQ. 1)
     *      GOTO 1315
        STK2(ST2,1)=0
        GOTO 1120
1315    STK2(ST2,1)=1
        GOTO 1120
C
C       ' - 16 BIT LOGICAL NOT
C
1320    STK2(ST2,1)=INOT16 (STK2(ST2,1))
        GOTO 1120
C
C       ERROR RETURNS.  SEND MESSAGE, FLAG, AND DELETE REST OF LINE
C       UP TO AND INCLUDING A COMMA, SEMI-COLON, OR END OF LINE,
C       (WHICH EVER COMES FIRST).
C
C
C       EXPRESSION STACK OVERFLOW
C
2000    CONTINUE
        CALL ERRMES (46)
        GOTO 2200
C
C       BAD OR MISSING EXPRESSION
C
2100    CONTINUE
         CALL ERRMES (9)
2200     IVAL=0
        GVLFLG=-1
        IF (FLGDLM .EQ. 1 .AND. L1 .NE. 0) GOTO 3000
2250    IF (L1 .EQ. CHARS(14) .OR. L1 .EQ. CHARS(15)) GOTO 2260
        IF (L1 .EQ. CHARS(3)) GOTO 3000
        NXC = NXC + 1
        L1 = LIN(NXC)
        IF (FLDFLG .EQ. 1) L1 = FIELD(NXC)
        GOTO 2250
2260    CONTINUE
        NXC = NXC + 1
C
C       CONTROL COME HERE BEFORE RETURNING TO DETERMINE WHAT THE BREAK
C       CHARACTER IS.
C
3000    CONTINUE
        DO 3010 I=1,BRKMX
        IF (CHARS(I) .NE. L1) GOTO 3010
        IBRF = I
        IF (I .NE. 3) NXC = NXC + 1
        GOTO 4000
3010    CONTINUE
        IBRF = 0
        NXC = NXC + 1
C
C       IF EXPRESSION WAS EXTRACTED FROM 'FIELD' RESTORE 'NXC' BEFORE
C       RETURNING
C
4000    CONTINUE
        IF (FLDFLG .EQ. 1) NXC = NXCSV
        IF (FLDFLG .EQ. 1) IBRF = IBRFSV
        RETURN
        END
C+++    FLOAT2
C****** FLOAT2 = FLOAT A 2'S COMP INTEGER = REL.  1.00 , 09/01/79
C
        REAL FUNCTION FLOAT2(I)
C
C       CALL:
C
C       I      = A 16 BIT 2'S COMP (SIGN1ED) INTEGER
C
C       RETURNS:
C
C       FLOAT2 = THE FLOATED VALUE OF I
C
C       ROUTINES-UTIL:  INEG16, NEGCHK, PFLOAT
C
        INTEGER I,II
        REAL SIGN1
C
        II=I
        SIGN1=1.0
        IF (NEGCHK (II) .EQ. 0) GOTO 100
        SIGN1=-1.0
        II=INEG16 (II)
100     FLOAT2=SIGN1*PFLOAT (II)
        RETURN
        END
C+++    PNUM
C****** PNUM = PRINT NUMBER = REL.  1.00 , 09/01/79
C
        SUBROUTINE PNUM(NUM,LINDX,NXW)
C
        INTEGER INUM,I,K,NDIG,LINDX,ID,RADIX,NXW,NXWR
        REAL F,FR
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C        CONVERTS ARGUMENT VALUE TO OCTAL,DECIMAL,OR HEX OUTPUT IN
C              THE NEXT SIX CHARACTERS OF THE OUTPUT LINE
        ID = 6
        RADIX = IRADIX
        IF (NXW .NE. 1) GOTO 100
        RADIX = 10
        ID = 5
100     CONTINUE
         INUM=NUM
         NXWR=NXW+ID
         DO 200 I=1,ID
         K=NXWR-I
C        WORRY ABOUT THE SIGN BIT BEING ON
         IF (INUM.GE.0) GO TO 150
         F=FLOAT(INUM) + 65536.0
         FR=FLOAT(RADIX)
         NDIG=INT(AMOD(F,FR))
         INUM=INT(F/FR)
        GO TO 190
150      NDIG=MOD(INUM,RADIX)
         INUM=INUM/RADIX
190      IOLIN( K,LINDX)=DIGITS(NDIG+1)
200     CONTINUE
C        IF (RADIX.NE.8) IOLIN(NXWR-7,LINDX)=CHARS(1)
C        IF (RADIX.EQ.16) IOLIN(NXWR-6,LINDX)=CHARS(1)
        RETURN
        END
C+++    ITAS
C****** ITAS = INTEGER TO CHARACTER CONVERSION = REL.  1.00 , 09/01/79
C
        SUBROUTINE ITAS (VALUE,STR,RADIX)
        INTEGER VALUE,STR(6),RADIX
C
C       CONVERTS THE INTEGER 'VALUE' INTO A RADIX 'RADIX' CHARACTER
C       STRING OF UPTO 'MAXLEN' CHARACTERS. IF 'MAXLEN' IS EXCEEDED, RETURN
C       A STRING OF '**** ... ***'.
C
        REAL J,N,A
        INTEGER I,K,M,BLANK,L
        INTEGER ZERO,STAR
        DATA ZERO,STAR /2H0 , 2H* /
C
        DATA BLANK/2H  /
        DO 75 I = 1,6
        STR(I) = BLANK
75      CONTINUE
        J = RADIX
        A = J
        N = PFLOAT(VALUE)
        DO 100 I = 1,6
        IF (J.GT.N) GO TO 200
100     J = J * A
        I = 6
        IF (N.GT.J) GO TO 1000
200     CONTINUE
        J = J / A
        DO 300 K = 1,I
        M = N/J
C
C CONVERT INTEGER N TO INTERNAL CHARACTER REPRESENTATION
C
        N = N-FLOAT(M)*J
        STR(K) = M+(ZERO)
300     J = J / A
        GOTO 2000
1000    CONTINUE
        DO 1100 K = 1,I
1100    STR(1) = STAR
C
C       NOW RIGHT JUSTIFY THE STRING OF CHARACTERS.
C
2000    CONTINUE
        IF (I .EQ. 6) RETURN
        I = 6 - I
        DO 3000 M = 1,I
        DO 2500 K = 1,5
        L = 7 - K
        STR(L) = STR(L-1)
2500    CONTINUE
        STR(1) = BLANK
3000    CONTINUE
        RETURN
        END
C+++    SNDMES
C****** SNDMES = SEND ERROR MESSAGE = REL.  1.00 , 09/01/79
C
        SUBROUTINE SNDMES
C
        INTEGER I,J,STAR(2)
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
        DATA STAR(1),STAR(2)/2H**,2H**/
C
C       ERRCNT CONTAINS THE NUMBER OF ERRORS IN THIS LINE
C       ERNUMS(12,2) CONTAINS THE MESSAGES TO BE SENT FOR THIS LINE, IN ORDER
C
        IF (ERRCNT .EQ. 0) RETURN
        DO 10000 I=1,ERRCNT
C
C       CHECK TO SEE IF WE NEED A NEW HEADER.
C
        LINES = LINES + 2
        IF (LINES .GT. 54) CALL HEADER
C
        J=ERNUMS(I,1)
        GO TO  (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
     1 21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
     2 41,42,43,44,45),J
1       WRITE (LLUN,1001) STAR(1),STAR(2),J,ERNUMS(I,2)
1001    FORMAT (1X, 2A2,26H W  LINE BUFFER OVERFLOW (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
2       WRITE (LLUN,1002) STAR(1),STAR(2),J,ERNUMS(I,2)
1002    FORMAT (1X, 2A2,29H C  MULTIPLY DEFINED SYMBOL (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
3       WRITE(LLUN,1003) STAR(1),STAR(2),J,ERNUMS(I,2)
1003    FORMAT (1X, 2A2,26H C  CONFLICTING OP-CODES (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
4       WRITE(LLUN,1004) STAR(1),STAR(2),J,ERNUMS(I,2)
1004    FORMAT (1X, 2A2,32H C  S-PAD ADDRESS OUT OF RANGE (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
5       WRITE(LLUN,1005) STAR(1),STAR(2),J,ERNUMS(I,2)
1005    FORMAT (1X, 2A2,33H O  BRANCH ADDRESS OUT OF RANGE (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
6       WRITE(LLUN,1006) STAR(1),STAR(2),J,ERNUMS(I,2)
1006    FORMAT (1X, 2A2,32H C  CONFLICTING BRANCH ADDRESS (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
7       WRITE(LLUN,1007) STAR(1),STAR(2),J,ERNUMS(I,2)
1007    FORMAT (1X, 2A2,28H M  MISSING BRANCH ADDRESS (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
8       WRITE(LLUN,1008) STAR(1),STAR(2),J,ERNUMS(I,2)
1008    FORMAT (1X, 2A2,34H C  CONFLICTING DATA PAD INDEXES (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
9       WRITE(LLUN,1009) STAR(1),STAR(2),J,ERNUMS(I,2)
1009    FORMAT (1X, 2A2,31H M  BAD OR MISSING EXPRESSION (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
10      WRITE(LLUN,1010) STAR(1),STAR(2),J,ERNUMS(I,2)
1010    FORMAT (1X, 2A2,24H M  BAD FADD ARGUEMENT (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
11      WRITE(LLUN,1011) STAR(1),STAR(2),J,ERNUMS(I,2)
1011    FORMAT (1X, 2A2,24H M  BAD FMUL ARGUEMENT (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
12      WRITE(LLUN,1012) STAR(1),STAR(2),J,ERNUMS(I,2)
1012    FORMAT (1X, 2A2,36H M  MISSING FADD OR FMUL ARGUEMENT (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
13      WRITE(LLUN,1013) STAR(1),STAR(2),J,ERNUMS(I,2)
1013    FORMAT (1X, 2A2,26H C  VALUE FIELD CONFLICT (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
14      WRITE(LLUN,1014) STAR(1),STAR(2),J,ERNUMS(I,2)
1014    FORMAT (1X, 2A2,28H M  MISSING DATA PAD INDEX (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
15      WRITE(LLUN,1015) STAR(1),STAR(2),J,ERNUMS(I,2)
1015    FORMAT (1X, 2A2,23H M  UNDEFINED OP-CODE (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
16      WRITE(LLUN,1016) STAR(1),STAR(2),J,ERNUMS(I,2)
1016    FORMAT (1X, 2A2,31H M  $EXT SYMBOL IN EXPRESSION (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
17      WRITE(LLUN,1017) STAR(1),STAR(2),J,ERNUMS(I,2)
1017    FORMAT (1X, 2A2,27H M  UNDEFINED USER SYMBOL (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
18      WRITE(LLUN,1018) STAR(1),STAR(2),J,ERNUMS(I,2)
1018    FORMAT (1X, 2A2,22H O  INTEGER OVERFLOW (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
19      WRITE(LLUN,1019) STAR(1),STAR(2),J,ERNUMS(I,2)
1019    FORMAT (1X, 2A2,37H W  BAD OPTION - DEFAULT VALUE USED (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
20      WRITE(LLUN,1020) STAR(1),STAR(2),J,ERNUMS(I,2)
1020    FORMAT (1X, 2A2,28H B  UNRECOGNIZED STATEMENT (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
21      WRITE(LLUN,1021) STAR(1),STAR(2),J,ERNUMS(I,2)
1021    FORMAT (1X, 2A2,25H M  IMPROPER $LOC VALUE (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
22      WRITE(LLUN,1022) STAR(1),STAR(2),J,ERNUMS(I,2)
1022    FORMAT (1X, 2A2,26H B  BAD COMMON STATEMENT (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
23      WRITE(LLUN,1023) STAR(1),STAR(2),J,ERNUMS(I,2)
1023    FORMAT (1X, 2A2,18H W  MISSING $END (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
24      WRITE(LLUN,1024) STAR(1),STAR(2),J,ERNUMS(I,2)
1024    FORMAT (1X, 2A2,33H O  DATA PAD INDEX OUT OF RANGE (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
25      WRITE(LLUN,1025) STAR(1),STAR(2),J,ERNUMS(I,2)
1025    FORMAT (1X, 2A2,24H B  BAD DATA STATEMENT (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
26      WRITE(LLUN,1026) STAR(1),STAR(2),J,ERNUMS(I,2)
1026    FORMAT (1X, 2A2,29H M  BAD DATA PAD INDEX EXPR (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
27      WRITE(LLUN,1027) STAR(1),STAR(2),J,ERNUMS(I,2)
1027    FORMAT (1X, 2A2,19H B  COMMA MISSING (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
28      CONTINUE
        WRITE (LLUN,1028) STAR(1),STAR(2),J,ERNUMS(I,2)
1028    FORMAT (1X, 2A2,31H M  NUMBER TO LARGE,TRUNCATED (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
29      WRITE(LLUN,1029) STAR(1),STAR(2),J,ERNUMS(I,2)
1029    FORMAT (1X, 2A2,34H B  MISSING SEP AFTER D.P. INDEX (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
30      WRITE(LLUN,1030) STAR(1),STAR(2),J,ERNUMS(I,2)
1030    FORMAT (1X, 2A2,25H W  EXTRANEOUS BROUHAHA (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
31      WRITE(LLUN,1031) STAR(1),STAR(2),J,ERNUMS(I,2)
1031    FORMAT (1X, 2A2,33H M  BAD FLOATING POINT CONSTANT (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
32      WRITE(LLUN,1032) STAR(1),STAR(2),J,ERNUMS(I,2)
1032    FORMAT (1X, 2A2,32H W  ILLEGAL PSEUDO-OP POSITION (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
33      WRITE(LLUN,1033) STAR(1),STAR(2),J,ERNUMS(I,2)
1033    FORMAT (1X, 2A2,28H W  ENTRY SYMBOL NOT LOCAL (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
34      WRITE(LLUN,1034) STAR(1),STAR(2),J,ERNUMS(I,2)
1034    FORMAT (1X, 2A2,19H M  BAD PARAMETER (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
35      WRITE(LLUN,1035) STAR(1),STAR(2),J,ERNUMS(I,2)
1035    FORMAT (1X, 2A2,28H W  UNDEFINED ENTRY SYMBOL (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
36       WRITE(LLUN,1036) STAR(1),STAR(2),J,ERNUMS(I,2)
1036    FORMAT (1X, 2A2,27H C  DATA PAD BUS CONFLICT (,I2,
     1  10H) ON LINE ,I4,/1X)
         GO TO 10000
37       WRITE(LLUN,1037) STAR(1),STAR(2),J,ERNUMS(I,2)
1037    FORMAT (1X, 2A2,27H M  MISSING S-PAD ADDRESS (,I2,
     1  10H) ON LINE ,I4,/1X)
         GO TO 10000
38      WRITE(LLUN,1038) STAR(1),STAR(2),J,ERNUMS(I,2)
1038    FORMAT (1X, 2A2,36H M  MISSING PROGRAM SOURCE ADDRESS (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
39      WRITE(LLUN,1039) STAR(1),STAR(2),J,ERNUMS(I,2)
1039    FORMAT (1X, 2A2,20H C  XW/YW CONFLICT (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
40      WRITE(LLUN,1040) STAR(1),STAR(2),J,ERNUMS(I,2)
1040    FORMAT (1X, 2A2,29H B   UNRECOGNIZED PSEUDO OP (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
41      WRITE(LLUN,1041) STAR(1),STAR(2),J,ERNUMS(I,2)
1041    FORMAT (1X, 2A2,28H B   SYMBOL TABLE OVERFLOW (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
42      WRITE(LLUN,1042) STAR(1),STAR(2),J,ERNUMS(I,2)
1042    FORMAT (1X, 2A2,
     1  49H B  COMIO STATEMENT OUT OF ORDER OR ILLFORMATED (,
     2  I2,10H) ON LINE ,I4,/1X)
        GO TO 10000
43      WRITE(LLUN,1043) STAR(1),STAR(2),J,ERNUMS(I,2)
1043    FORMAT (1X, 2A2,22H BAD PARAM STATEMENT (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
44      WRITE(LLUN,1044) STAR(1),STAR(2),J,ERNUMS(I,2)
1044    FORMAT (1X, 2A2,
     1  47H B  SUBROUTINE NAME MUST BE DECLARED EXTERNAL (,
     2  I2,10H) ON LINE ,I4,/1X)
        GO TO 10000
45      WRITE(LLUN,1045) STAR(1),STAR(2),J,ERNUMS(I,2)
1045    FORMAT (1X, 2A2,34H B  BAD OR MISSING SYMBOL STRING (,I2,
     1  10H) ON LINE ,I4,/1X)
        GO TO 10000
C
10000   CONTINUE
        ERRTOT=ERRTOT+ERRCNT
        ERRCNT=0
        RETURN
        END
C+++    WLIN
C****** WLIN = WRITE A LINE = REL.  1.00 , 09/01/79
C
        SUBROUTINE WLIN
C
C
C
        INTEGER I,J,ICXC,LLDX
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C       COMES HERE WITH TEXT IN IOLIN(100,10) READY TO SEND TO LISTING FILE
C       ONE CHAR PER WORD
C
        LLDX = 1
C
C       CHECK TO SEE IF WE NEED A HEADER
C
        LINES = LINES + IOPTR
        IF ((LINES .GT. 54) .AND. (GLNFLG .EQ. 0)) CALL HEADER
C
30      CONTINUE
C
        WRITE (LLUN,500) (IOLIN(J,LLDX),J=1,100)
500     FORMAT (1X, 1H ,132A1)
        LLDX = LLDX + 1
        IF (LLDX .LE. IOPTR) GOTO 30
        IOPTR = 0
C
C       BLANK OUT IOLIN
C
        DO 50 I=1,100
        DO 45 J=1,10
        IOLIN(I,J) = BLANK
45      CONTINUE
50      CONTINUE
        RETURN
        END
C+++    HEADER
C****** HEADER = OUTPUTS HEADER LINE TO LISTING = REL.  1.00 , 09/01/79
C
        SUBROUTINE HEADER
C
C
C       THIS ROUTINE DOES A FORM-FEED, WRITES THE APAL HEADER TO LLUN AND
C       RESETS LINES (THE LINE COUNT)
C
C
C
        INTEGER I,J,K,II(5)
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
C       IF THIS IS THE FIRST PAGE, GET DATE AND TIME.
C
        IF (PAGES .NE. 0) GOTO 50
        CALL DATTIM (TIMES)
        IF (TIMES(1) .EQ. 0) GOTO 50
        TIMES(3) = TIMES(3) - INT(FLOAT(TIMES(3))/100.0)*100
C
C       HERE WE REFORMAT TIME AND DATE
C
        DO 10 I=1,5
        II(I) = TIMES(I)
10      CONTINUE
        DO 20 I=1,5
        TIMES(2*I-1) = II(I)/10
        TIMES(2*I) = MOD(II(I),10)
20      CONTINUE
C
C       HERE WE OUTPUT WHAT EVER IS NEEDED TO CAUSE A FORM FEED ON THE
C       PRINTER.
50      CONTINUE
C
        WRITE (LLUN,100)
100     FORMAT (1H1)
C
C       NOW OUTPUT THE HEADER ITSELF.
C
        PAGES = PAGES + 1
        WRITE (LLUN,200) (SFILE(I),I=2,31),(TI(J),J=1,3),
     1  (TIMES(K),K=1,10),PAGES
200     FORMAT (1X, 'ASM100 REL.  1.00 , 09/01/79 ',30A1,2X,3A2,2X,2(2I1
     +,'/'),                                                            .+.
     1  2I1,3X,2I1,1H:,2I1,3X,5HPAGE ,I4,//1X)
C
C       RESET LINES (LINE COUNT)
C
        LINES=3
C
        RETURN
        END
C+++    EXFLDS
C****** EXFLDS = EXTRACTS A FIELD FROM A STRING = REL.  1.00 , 09/01/79
C
        SUBROUTINE EXFLDS(LBRK,TBRK,OPT,CR)
        INTEGER LBRK,TBRK,OPT,I,ILEVEL,CR
C
C       LBRK AND TBRK ARE CHARACTERS TO USE AS DELIMITERS
C       IN EXTRACTING 'FIELD'
C
C       EXTRACTS FROM LBRK TO TRBK. IF LBRK AND TBRK ARE THE SAME
C       EXTRACTS FROM CURRENT POSITION TO NEXT TBRK.  IF THEY ARE
C       DIFFERENT, EXTRACTS FROM LBRK TO TBRK AT SAME LEVEL, I.E.
C       IF 'N' LBRK'S ARE FOUND, EXTRACTS UNTIL 'N+1'TH TBRK.
C
C       RETURNS EXTRACTED STRING IN 'FIELD'.
C
C       IF END OF FIELD NOT FOUND, EXTRACTS TO END OF STRING INSTEAD.
C
C       IF 'OPT' NOT EQUAL TO ZERO, DOES NOT RETURN STARTING AND ENDING
C       DELIMITERS IN 'FIELD', BUT DOES RETURN FIRST CHARACTER IF NOT
C       A LBRK.
C
C       VARIABLES:
C
C       LBRK    = LEADING BREAK CHARACTER
C
C       TBRK    = TRAILING BREAK CHARACTER
C       OPT     = OPTION FLAG
C       CR      = CARRAGE RETURN FLAG, IF 1 APPEND A CARRAGE RETURN,
C                 IF 0 DO NOTHING.
C       DLIM    = FLAG TO INDICATE WHETHER TRAILING BREAK CHARACTER WAS
C                 FOUND OR NOT, 1 INDICATES YES, 0 - NO.
C       ILEVEL  = LEVEL FLAG
C
C                                                                       APALCOM
        INTEGER SYM,CODE,CODMSK,IRADIX,IPGNO,IPGLN,ITITLE,              APALCOM
     1LIN,NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS,ERRCNT,                   APALCOM
     2IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN,                    APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT,IDPXX,                        APALCOM
     4IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                              APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD,LINES,INSFLG,NRADIX,IOLIN,IOPTR              APALCOM
     7,PAGES,INSFG2,TI,BLANK,CHARMX,PTR,FLDFLG,SFILE,TIMES,             APALCOM
     8DLIM,BRKMX,BFILE,LFILE,TFILE                                      APALCOM
C                                                                       APALCOM
        INTEGER OPSYM,MASKTB,                                           APALCOM
     1IBKS,CHARS,ISBT,ARGSYM,DIGITS,USRSYM,PSUSYM,USRMAX                APALCOM
C                                                                       APALCOM
        INTEGER COD                                                     APALCOM
C                                                                       APALCOM
        COMMON /GEN/ SYM(40),CODE(5),CODMSK(5),IRADIX,IPGNO,IPGLN,      APALCOM
     1ITITLE(6),LIN(100),NXC,ALFLG,GVLFLG,NUSYM,LOCNT,ERNUMS(12,2),     APALCOM
     2ERRCNT,IARG,MSKTYP,TABPTR,IVAL,IBRF,IPTR,IPTRX,INLIN(81),         APALCOM
     3MCPTR,LSTING,GLNFLG,ERRTOT,IPASS,IT(3),IDPXX(3),                  APALCOM
     4COD(160),IORDF,LABFLG,ITTI,ITTO,ISUSYM,NOPSYM                     APALCOM
     5,LSTFLG,SLUN,OLUN,LLUN,TLUN                                       APALCOM
     6,LINNUM,EXTNUM,FIELD(80),LINES,INSFLG,NRADIX,IOLIN(100,10)        APALCOM
     7,IOPTR,PAGES,INSFG2,TI(3),BLANK,CHARMX,PTR,FLDFLG,SFILE(31)       APALCOM
     8,TIMES(10),DLIM,BRKMX,BFILE(31),LFILE(31),TFILE(31)               APALCOM
C                                                                       APALCOM
        COMMON /SYM/ OPSYM(8,231),MASKTB(14,4),                         APALCOM
     1IBKS,CHARS(37),ISBT,ARGSYM(4,35),DIGITS(16),USRSYM(200,5),        APALCOM
     2PSUSYM(3,31),USRMAX                                               APALCOM
C                                                                       APALCOM
C
C       BLANK OUT FIELD
C
        DO 10 I=1,80
        FIELD(I) = CHARS(1)
10      CONTINUE
C
C       IF LBRK IS EQUAL TO TBRK, GOTO 50 TO BEGIN EXTRACTING THE FIELD.
C
        DLIM = 1
        I = 1
        ILEVEL = 1
        IF (LBRK .EQ. TBRK) GOTO 50
C
C       LOCATE LEADING BREAK CHARACTER.
C
20      CONTINUE
        IF (LIN(NXC) .EQ. LBRK) GOTO 40
        IF (LIN(NXC) .EQ. CHARS(3)) GOTO 400
        NXC = NXC + 1
        GOTO 20
C
C       IF OPT EQUALS 0 EXTRACT LEADING BREAK CHARACTER, ELSE SKIP IT.
C
40      IF (OPT .NE. 0) GOTO 45
        FIELD(1) = LIN(NXC)
        I = 2
45      CONTINUE
C
C       GET NEXT CHARACTER FROM LIN.
C
        NXC = NXC + 1
C
C       LOCATE TRAILING BREAK CHARACTER OF SAME LEVEL AS LEADING
C       BREAK CHARACTER.
C
50      CONTINUE
        IF (LIN(NXC) .NE. TBRK) GOTO 70
        ILEVEL = ILEVEL - 1
        IF (ILEVEL .EQ. 0) GOTO 100
C
C       PLACE CHARACTER IN FIELD AND GET NEXT CHAR, IF CHAR WAS A
C       LEADING BREAK CHARACTER, INCREMENT THE LEVEL COUNT.
C
70      CONTINUE
        FIELD(I) = LIN(NXC)
        I = I + 1
        IF (I .GT. 79) GOTO 400
        IF (LIN(NXC) .EQ. LBRK) ILEVEL = ILEVEL + 1
        NXC = NXC + 1
        IF (LIN(NXC) .EQ. CHARS(3)) GOTO 300
        GOTO 50
C
C       DELETE LAST CHARACTER IF OPT IS NOT 0, AND RETURN.
C
100     CONTINUE
        FIELD(I) = LIN(NXC)
        NXC = NXC + 1
        IF (OPT .NE. 0) FIELD(I) = CHARS(1)
        IF (OPT .EQ. 0) I = I + 1
C
C       APPEND A CARRAGE RETURN IF REQUIRED, AND GET NEXT BREAK CHAR
C
        IF (CR .EQ. 1) FIELD(I) = CHARS(3)
        NXC = NXC + 1
        CALL GBRK
        RETURN
C
C       END OF SOURCE STRING REACHED
C
300     CONTINUE
        DLIM = 0
        IBRF = 3
        IF (CR .EQ. 1) FIELD(I) = CHARS(3)
        RETURN
C
C       LINE BUFFER OVERFLOW
C
400     CONTINUE
        CALL ERRMES (1)
        IBRF = -1
        DLIM = 0
        RETURN
        END
C+++    LENGTH
C****** LENGTH = LENGTH OF FILE NAME = REL.  1.00 , 09/01/79
C
        SUBROUTINE LENGTH (BUF)
        INTEGER BUF(40)
C
C       THIS SUBROUTINE REFORMATS THE NAME PASSED TO IT IN BUF FOR
C       USE IN INFILE.
C
        INTEGER I,J,ID,BLK
C
        DATA BLK /1H /
        DO 10 I = 1,30
        ID = 31 - I
        IF (BUF(ID) .NE. BLK) GOTO 20
10      CONTINUE
20      DO 30 I=1,ID
        J = (ID + 1) - I
        BUF(J+1) = BUF(J)
30      CONTINUE
        BUF(1) = ID
        RETURN
        END
