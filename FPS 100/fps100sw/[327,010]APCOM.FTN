C****** APCOM = COMMON ROUTINES FOR PDP-11 PDS SOFTWARE = REL 2.0  , JAN 78 ***
C
C
C****** NUMOUT = INTEGER TO CHARACTER CONV. = REL 2.0  , JAN 78 ***************
C
        SUBROUTINE NUMOUT(NUM,DIGITS,H)
C       CONVERTS "NUM", A 16-BIT INTEGER INTO AN UNSIGNED
C       CHARACTER STRING PLACED INTO "DIGITS"
C        "H" CONTAINS THE RADIX (EITHER 8,10, OR 16)
        INTEGER NUM,DIGITS(6),H
        COMMON /IDTB/ IBLNK,INSIGN,IPSIGN,IPOINT,IEXP,IDB(16)
        FNUM=NUM
        IF (NUM.LT.0) FNUM=FNUM+65536.0
        IF (NUM.EQ.-32767-1) FNUM=32768.0
        RADIX=H
         DO 200 I=1,6
         K=7-I
        N=AMOD(FNUM,RADIX)
        FNUM=FNUM/RADIX
200     DIGITS(K)=IDB(N+1)
         IF (H.NE.8) DIGITS(1)=IBLNK
         IF (H.EQ.16) DIGITS(2)=IBLNK
        RETURN
        END
C
C****** GTFIL = GET A FILE ASSIGNED FOR PDP-11 = REL 2.0  , JAN 78 ************
C
        SUBROUTINE GTFIL(ICH,ITTI,ITTO)
C       VERSION 1     FEB 1976
C
C       OPENS A USER SELECTED FILE TO CHANNEL NUMBER "ICH"
C
C       CONSOLE INPUT IS DONE THROUGH CHANNEL "ITTI"
C       CONSOLE OUTPUT IS DONE TO CHANNEL OUTPUT "ITTO"
C
C
C       THIS SUBROUTINE DEPENDS UPON THE OPERATING SYSTEM !!!!!!!!!!!!!!
C
C
C
C       IH HERE MUST BE PUT WHATEVER MUST BE DONE TO ATTACH A CHANNEL
C         VARIABLE TO AN I/O DEVICE FILE
C
C       THIS INVOLVES TYPICALLY THREE STEPS:
C
C         1. THE USER TYPES IN A FILE NAME, WHICH IS READ INTO
C             AN ARRAY
C         2. THE SUBROUTINE GETS AN I/O NUMBER FROM THE OPERATING
C             SYSTEM AND PUTS IT INTO "ICH"
C         3. A SYSTEM CALL IS DONE TO ASSIGN THE VARIABLE "ICH" TO
C             THE FILE NAME WHICH THE USER TYPED INTO THE ARRAY IN STEP
C             "1" ABOVE
C
C
C
C       IF FILE NAMES ARE NOT USED, AND ONLY DEVICE NUMBERS ARE USED
C         THEN THIS ROUTINE SHOULD SIMPLY READ IN A DEVICE NUMBER,
C         INSTEAD OF A NAME, FROM THE THE USER.
C       IF FIXED I/O DEVICE NUMBERS ARE TO BE USED, THEN THE CALL TO
C         THIS ROUTINE SHOULD BE REPLACED WITH A SIMPLE ASSIGNMENT
C         STATEMENT  ICH = #   TO PUT THE PROPER NUMBER INTO "ICH"
C
C       THIS IS DONE FOR CONSOLE INPUT/OUTPUT
C
        DIMENSION IFILE(15)
        READ(ITTI,100) IQ,IFILE
100     FORMAT(Q,15A2)
        CALL ASSIGN(ICH,IFILE,IQ)
        RETURN
        END
C
C****** CLFIL = CLOSE A FILE FOR PDP-11 = REL 2.0  , JAN 78 *******************
C
        SUBROUTINE CLFIL(ICH,ITTO)
C
C       CLOSES AN OPENED FILE - WHOSE CHANNEL NUMBER IS "ICH"
C       ANY ERROR MESSAGES ARE TYPED OUT ON CHANNEL "ITTO"
C
C       THIS SUBROUTINE DEPENDS UPON THE OPERATING SYSTEM !!!!!!!!!!!!!!
C
C
C       PUT HERE WHATEVER SYSTEM CALLS ARE NECESSARY TO CLOSE AN OPEN
C         I/O FILE WHICH IS POINTED TO BY CHANNEL VARIABLE "ICH"
C
C       THIS IS A FILE WHICH HAS BE OPENED BY A CALL TO "GTFIL"
C
C       IN SOME SYSTEMS      ENDFILE ICH     IS PROPER
C
C       IN OTHERS NOTHING NEED BE DONE TO CLOSE A FILE
C
        CALL CLOSE(ICH)
        RETURN
        END
C
C****** FREAD = FLOATING POINT INPUT = REL 2.0  , JAN 78 **********************
C
        SUBROUTINE FREAD(VAL,ITTI,ITTO)
C
C       READS A FLOATING POINT NUMBER FROM THE USER CONSOLE (I/O
C         CHANNEL "ITTI")
C         AND PUTS THE DOUBLE PRECISION RESULT INTO "VAL"
C       "ITTO" IS THE CHANNEL NUMBER FOR CONSOLE OUTPUT
C
C
       DOUBLE PRECISION VAL,FRAC,DIG
        DIMENSION INB(80)
        COMMON /IDTB/ IBLNK,INSIGN,IPSIGN,IPOINT,IEXP,IDB(16)
C
C
C       READ IN A LINE
C
1000    CALL GETTY(INB,ITTI,ITTO)
        INBPTR=0
C       INITIALIZE
C       VAL - OUTPUT RESULT
C       FRAC - INVERSE POWERS OF TEN, FOR FRACTIONAL VALUES
C       ISGN - SIGN OF RESULT
C       IFRAC - 1 IF WE ARE PROCESSING A FRACTION
C       IEXPSW - EXPONENT SWITCH: 1 IF THERE IS ONE
C       IEXPS - EXPONENT SIGN
C       IEXPP - EXPONENT VALUE
C
        VAL=0.0D0
       FRAC = 1.0D0
        ISGN=1
       IFRAC = 0
       IEXPSW = 0
         IEXPS=1
        IEXPP=0
C
C       SCAN THE LINE
C
       DO 15000 ICX = 1,80
C
C       GET THE NEXT CHARACTER
        INBPTR=INBPTR+1
        IBYT=INB(INBPTR)
C       IGNORE BLANKS
       IF ( IBYT.EQ.IBLNK ) GO TO 15000
       IF(IBYT.NE.IEXP) GO TO 1400
C
C       IF ITS AN "E" SET THE EXPONENT SWITCH
       IEXPSW = 1
       GO TO 15000
1400   IF ( IBYT.NE.IPOINT ) GO TO 1500
C
C       IF ITS A "." THEN SET THE FRACTION SWITCH
       IFRAC = 1
       GO TO 15000
C
1500   IF (IBYT.NE.INSIGN ) GO TO 2000
C
C       IF ITS A "-" THEN SET "ISGN" OR "IEXPS" TO -1
        IF (IEXPSW.EQ.1) GO TO 1700
C       MAKE THE RESULT NEGATIVE
        ISGN=-1
       GO TO 15000
C       MAKE THE EXPONENT NEGATIVE
1700    IEXPS=-1
       GO TO 15000
C
2000   IF ( IBYT.NE.IPSIGN ) GO TO 3000
C
C       IF ITS A "+" THEN SET EITHER "ISGN" OR "IEXPS" TO 1
        IF (IEXPSW.EQ.1) GO TO 1900
C       MAKE THE RESULT POSITIVE
        ISGN=1
       GO TO 15000
C       MAKE THE EXPONENT POSITIVE
1900    IEXPS=1
       GO TO 15000
C
C       SEE IF WE HAVE A DIGIT
C
3000   DO 4000 IDX = 1,10
       IF (IBYT.EQ.IDB(IDX) ) GO TO 5000
 4000  CONTINUE
C
C       AN ERROR DON'T HAVE ANYTHING LEGAL, TYPE A "?" AND RE-INITIALIZE
       WRITE (ITTO,1)
    1  FORMAT (2H ?)
       GO TO 1000
C
C       ADD THE NEW DIGIT INTO EITHER THE MANTISSA OR THE EXPONENT
5000   IF(IEXPSW.EQ.1) GO TO 9000
       DIG = IDX - 1
       IF ( IFRAC.EQ.1 ) GO TO 6000
C
C       UPDATE THE INTEGER PART OF THE RESULT
       VAL = VAL * 10.0D0 + DIG
       GO TO 15000
C
C       UPDATE THE FRACTION PART OF THE RESULT
6000   FRAC = FRAC / 10.0D0
       DIG = DIG*FRAC
       VAL = VAL + DIG
       GO TO 15000
C
C       UPDATE THE EXPONENT
9000    IEXPP=IEXPP*10+(IDX-1)
15000  CONTINUE
C
C
C
C       NEGATE VAL IF WE NEED TO
        IF (ISGN.EQ.-1) VAL=-VAL
C       SEE IF WE HAD AN EXPONENT
       IF ( IEXPSW.EQ.0 )  GO TO 20000
C       NEGATE THE EXPONENT IF WE NEED TO
        IF (IEXPS.EQ.-1) IEXPP=-IEXPP
C       PUT THE EXPONENT INTO THE RESULT
        VAL = VAL * 10.0D0**IEXPP
20000  RETURN
       END
C
C****** IREAD = INTEGER INPUT = REL 2.0  , JAN 78 *****************************
C
        SUBROUTINE IREAD(IVAL,IR,ITTI,ITTO)
C
C       READS AN INTEGER FROM THE USER CONSOLE (I/O CHANNEL "ITTI")
C       USING RADIX "IR" (8,10, OR 16), AND PUTS THE RESULT INTO IVAL
C       "ITTO" IS THE I/O CHANNEL FOR CONSOLE OUTPUT
C
        DIMENSION INB(80)
        COMMON /IDTB/ IBLNK,INSIGN,IPSIGN,IPOINT,IEXP,IDB(16)
C
C
C
         R=FLOAT(IR)
1000     VAL=0.0
        ISGN=0
        CALL GETTY(INB,ITTI,ITTO)
        INBPTR=0
         DO 4000 ICX=1,80
        INBPTR=INBPTR+1
        IF (INBPTR.GT.80) GO TO 6000
        IBYT=INB(INBPTR)
       IF ( IBYT.EQ.IBLNK )  GO TO 6000
       DO 2000 IDX = 1,IR
       IF ( IBYT.EQ.IDB(IDX) )  GO TO 3000
 2000  CONTINUE
       IF(IBYT.NE.IPSIGN) GO TO 2100
        ISGN=1
         GO TO 4000
2100   IF(IBYT.NE.INSIGN) GO TO 2200
        ISGN=-1
         GO TO 4000
3000     VAL=VAL*R+FLOAT(IDX-1)
4000     CONTINUE
C
C        THE LEGITIMATE RANGE IS BETWEEN 0 AND +65535
C              OR -32768 TO +32767
C        SEE IF SIGNED OR UNSIGNED
6000    IF (ISGN.NE.0) GO TO 6500
C        UNSIGNED
         IF (VAL.GT.65536.0) GO TO 2200
         IF (VAL.GE.32768.0) VAL = VAL - 65536.0
         GO TO 7000
C        SIGNED
6500    IF (ISGN.EQ.-1) GO TO 6700
C        POSITIVE SIGNED
         IF (VAL.GE.32768.0) GO TO 2200
         GO TO 7000
C        NEGATIVE SIGNED
6700     IF (VAL.GT.32768.0) GO TO 2200
         VAL = -VAL
C        FIX THE RESULT
7000     IF (VAL.NE.-32768.0) GO TO 7500
         IVAL = -32767-1
         RETURN
7500     IVAL = INT(VAL)
       RETURN
C
2200   WRITE(ITTO,1)
1      FORMAT(2H ?)
       GO TO 1000
C
       END
C
C****** AREAD = ALPHA (A2) READ = REL 2.0  , JAN 78 ***************************
C
        SUBROUTINE AREAD(ICB,N,ITTI,ITTO)
C
C       FILLS N LOACTIONS OF "ICB" WITH CHARACTERS READ FROM I/O
C         CHANNEL "ITTI".  CHARACTERS ARE READ WITH A "A2" FORMAT.
C
        DIMENSION ICB(N)
C       THE CONSOLE READ MUST HAVE THE PROPERTY THAT BLANKS ARE FILLED
C         IN TO THE RIGHT OF THE USER INPUT TO GIVE A FULL LINE (80
C       CHARACTERS, OR 40 WORDS)
C
        READ (ITTI,1000) (ICB(I),I=1,N)
1000    FORMAT(40A2)
C
C       WE ALSO ASSUME THAT THE "CARRIAGE RETURN" WHICH WAS TYPED IN BY
C         THE USER WAS ECHOED BY THE INPUT ROUTINE.  IF NOT, THEN
C         THEN THE STATEMENTS BELOW NEED TO BE ADDED:
C  ---- ONLY WHEN READING FROM THE TERMINAL ----
C       WRITE (ITTO,2)
C2      FORMAT(1X)
C
        RETURN
        END
C
C****** GETTY = ALPHA (A1) READ = REL 2.0  , JAN 78 ***************************
C
        SUBROUTINE GETTY(INB,ITTI,ITTO)
C
C       GETS AN 80 CHARACTER LINE FROM A USER CONSOLE WHOSE CHANNEL
C         NUMBER HAS BEEN SET IN "ITTI"
C
        DIMENSION INB(80)
C
C       WE ARE DEPENDING UPON AN ALPHA READ TO THE CONSOLE TO
C         GIVE US WHAT THE USER TYPED IN, WITH BLANKS FILLED IN TO THE
C         RIGHT TO GIVE US 80 CHARACTERS
C
        READ (ITTI,1000) (INB(I),I=1,80)
1000    FORMAT(80A1)
C
C       WE ALSO ASSUME THAT THE "CARRIAGE RETURN" WHICH WAS TYPED IN BY
C         THE USER WAS ECHOED BY THE INPUT ROUTINE.  IF NOT, THEN
C         THEN THE STATEMENTS BELOW NEED TO BE ADDED:
C   ----- ONLY WHEN READING FROM THE TERMINAL -----
C
C       WRITE (ITTO,2)
C2      FORMAT(1X)
C
        RETURN
        END
C
C****** SETTY = SET TERMINAL I/O FOR PDP-11 = REL 2.0  , JAN 78 ***************
C
        SUBROUTINE SETTY(ITTI,ITTO)
C
C       SET THE USER CONSOLE (TTY) I/O DEVICE CHANNEL NUMBERS
C
C
C       THIS ROUTINE SETS THE I/O CHANNEL NUMBERS FOR READS FROM
C         THE USER CONSOLE, AND WRITES TO THE USER CONSOLE
C
C
C       ITTI  --  I/O DEVICE CHANNEL NUMBER FOR CONSOLE INPUT
C       ITTO  --  I/O DEVICE CHANNEL NUMBER FOR OUTPUT TO THE USER
C                        CONSOLE
C
C
C       IF THE PROGRAMS, WHICH NORMALLY OPERATE INTERACTIVELY WITH
C         A USER, ARE TO BE USED IN A "BATCH" MANNER; THEN "ITTI" AND
C         "ITTO" MAY BE SET TO DEVICES OTHER THAN A CONSOLE, I.E.
C         ITTI  TO A CARD READER  AND  ITTO  TO A LINE PRINTER
C
C
C       HERE WE NEED TWO ASSIGNMENT STATAMENTS WHICH SET "ITTI" AND
C         "ITTO" TO THE PROPER VALUES FOR YOUR COMPUTER OPERATING SYSTEM
C
C
        ITTI = 5
        ITTO = 5
C
C
C
        RETURN
        END
